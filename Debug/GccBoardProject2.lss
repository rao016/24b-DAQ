
GccBoardProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ac40  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002a8  20000000  0000ac40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000553c  200002b0  0000aef0  000202a8  2**4
                  ALLOC
  3 .stack        00002004  200057ec  0001042c  000202a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
  5 .comment      0000007f  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00049a81  00000000  00000000  0002034f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007367  00000000  00000000  00069dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a67f  00000000  00000000  00071137  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b98  00000000  00000000  0007b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001100  00000000  00000000  0007c34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000201ee  00000000  00000000  0007d44e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018af1  00000000  00000000  0009d63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b5bd  00000000  00000000  000b612d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b70  00000000  00000000  001416ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 77 00 20 49 4a 00 00 45 4a 00 00 45 4a 00 00     .w. IJ..EJ..EJ..
	...
      2c:	45 4a 00 00 00 00 00 00 00 00 00 00 45 4a 00 00     EJ..........EJ..
      3c:	45 4a 00 00 45 4a 00 00 45 4a 00 00 45 4a 00 00     EJ..EJ..EJ..EJ..
      4c:	45 4a 00 00 89 41 00 00 45 4a 00 00 6d 0c 00 00     EJ...A..EJ..m...
      5c:	45 39 00 00 45 4a 00 00 3d 10 00 00 4d 10 00 00     E9..EJ..=...M...
      6c:	5d 10 00 00 6d 10 00 00 00 00 00 00 00 00 00 00     ]...m...........
      7c:	45 4a 00 00 45 4a 00 00 45 4a 00 00 bd 18 00 00     EJ..EJ..EJ......
      8c:	cd 18 00 00 dd 18 00 00 00 00 00 00 00 00 00 00     ................
      9c:	45 4a 00 00 45 4a 00 00 45 4a 00 00 45 4a 00 00     EJ..EJ..EJ..EJ..
      ac:	45 4a 00 00 00 00 00 00                             EJ......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002b0 	.word	0x200002b0
      d4:	00000000 	.word	0x00000000
      d8:	0000ac40 	.word	0x0000ac40

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002b4 	.word	0x200002b4
     108:	0000ac40 	.word	0x0000ac40
     10c:	0000ac40 	.word	0x0000ac40
     110:	00000000 	.word	0x00000000

00000114 <changeSampleRate>:
 * Description: Writes the register to change the ADC sample rate
 *  with the rate from the input
 * Last Modified: 11/1/17
 *
******************************************************************/
void changeSampleRate (uint8_t rate) {
     114:	b510      	push	{r4, lr}
    writeReg(CONFIG1_REG, (rate & 0b00000111) + CONFIG1_REG_INIT);
     116:	2107      	movs	r1, #7
     118:	4001      	ands	r1, r0
     11a:	3930      	subs	r1, #48	; 0x30
     11c:	b2c9      	uxtb	r1, r1
     11e:	2001      	movs	r0, #1
     120:	4b01      	ldr	r3, [pc, #4]	; (128 <changeSampleRate+0x14>)
     122:	4798      	blx	r3
}
     124:	bd10      	pop	{r4, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	0000032d 	.word	0x0000032d

0000012c <change_channel>:
 * Description: Sets which channels to 'turn on' on the ADC.  Data
 *  is sent from all channels regardless.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void change_channel (uint8_t channel) {	
     12c:	b510      	push	{r4, lr}
     12e:	0004      	movs	r4, r0
	if ((1) & channel) writeReg(CH_0_SET_REG, CHSET_ON_REG_VAL);
     130:	07c3      	lsls	r3, r0, #31
     132:	d522      	bpl.n	17a <change_channel+0x4e>
     134:	2100      	movs	r1, #0
     136:	2005      	movs	r0, #5
     138:	4b1f      	ldr	r3, [pc, #124]	; (1b8 <change_channel+0x8c>)
     13a:	4798      	blx	r3
	else writeReg(CH_0_SET_REG, CHSET_OFF_REG_VAL);
	
	if ((1 << 1) & channel) writeReg(CH_1_SET_REG, CHSET_ON_REG_VAL);
     13c:	07a3      	lsls	r3, r4, #30
     13e:	d521      	bpl.n	184 <change_channel+0x58>
     140:	2100      	movs	r1, #0
     142:	2006      	movs	r0, #6
     144:	4b1c      	ldr	r3, [pc, #112]	; (1b8 <change_channel+0x8c>)
     146:	4798      	blx	r3
	else writeReg(CH_1_SET_REG, CHSET_OFF_REG_VAL);
	
	if ((1 << 2) & channel) writeReg(CH_2_SET_REG, CHSET_ON_REG_VAL);
     148:	0763      	lsls	r3, r4, #29
     14a:	d520      	bpl.n	18e <change_channel+0x62>
     14c:	2100      	movs	r1, #0
     14e:	2007      	movs	r0, #7
     150:	4b19      	ldr	r3, [pc, #100]	; (1b8 <change_channel+0x8c>)
     152:	4798      	blx	r3
	else writeReg(CH_2_SET_REG, CHSET_OFF_REG_VAL);
	
	if ((1 << 3) & channel) writeReg(CH_3_SET_REG, CHSET_ON_REG_VAL);
     154:	0723      	lsls	r3, r4, #28
     156:	d51f      	bpl.n	198 <change_channel+0x6c>
     158:	2100      	movs	r1, #0
     15a:	2008      	movs	r0, #8
     15c:	4b16      	ldr	r3, [pc, #88]	; (1b8 <change_channel+0x8c>)
     15e:	4798      	blx	r3
	else writeReg(CH_3_SET_REG, CHSET_OFF_REG_VAL);
	
	if (4 < HIGHEST_CHANNEL) {
		if ((1 << 4) & channel) writeReg(CH_4_SET_REG, CHSET_ON_REG_VAL);
     160:	06e3      	lsls	r3, r4, #27
     162:	d51e      	bpl.n	1a2 <change_channel+0x76>
     164:	2100      	movs	r1, #0
     166:	2009      	movs	r0, #9
     168:	4b13      	ldr	r3, [pc, #76]	; (1b8 <change_channel+0x8c>)
     16a:	4798      	blx	r3
		else writeReg(CH_4_SET_REG, CHSET_OFF_REG_VAL);
		
		if ((1 << 5) & channel) writeReg(CH_5_SET_REG, CHSET_ON_REG_VAL);
     16c:	06a3      	lsls	r3, r4, #26
     16e:	d41d      	bmi.n	1ac <change_channel+0x80>
		else writeReg(CH_5_SET_REG, CHSET_OFF_REG_VAL);
     170:	2181      	movs	r1, #129	; 0x81
     172:	200a      	movs	r0, #10
     174:	4b10      	ldr	r3, [pc, #64]	; (1b8 <change_channel+0x8c>)
     176:	4798      	blx	r3
			
			if ((1 << 7) & channel) writeReg(CH_7_SET_REG, CHSET_ON_REG_VAL);
			else writeReg(CH_7_SET_REG, CHSET_OFF_REG_VAL);
		}
	}
}
     178:	bd10      	pop	{r4, pc}
	else writeReg(CH_0_SET_REG, CHSET_OFF_REG_VAL);
     17a:	2181      	movs	r1, #129	; 0x81
     17c:	2005      	movs	r0, #5
     17e:	4b0e      	ldr	r3, [pc, #56]	; (1b8 <change_channel+0x8c>)
     180:	4798      	blx	r3
     182:	e7db      	b.n	13c <change_channel+0x10>
	else writeReg(CH_1_SET_REG, CHSET_OFF_REG_VAL);
     184:	2181      	movs	r1, #129	; 0x81
     186:	2006      	movs	r0, #6
     188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <change_channel+0x8c>)
     18a:	4798      	blx	r3
     18c:	e7dc      	b.n	148 <change_channel+0x1c>
	else writeReg(CH_2_SET_REG, CHSET_OFF_REG_VAL);
     18e:	2181      	movs	r1, #129	; 0x81
     190:	2007      	movs	r0, #7
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <change_channel+0x8c>)
     194:	4798      	blx	r3
     196:	e7dd      	b.n	154 <change_channel+0x28>
	else writeReg(CH_3_SET_REG, CHSET_OFF_REG_VAL);
     198:	2181      	movs	r1, #129	; 0x81
     19a:	2008      	movs	r0, #8
     19c:	4b06      	ldr	r3, [pc, #24]	; (1b8 <change_channel+0x8c>)
     19e:	4798      	blx	r3
     1a0:	e7de      	b.n	160 <change_channel+0x34>
		else writeReg(CH_4_SET_REG, CHSET_OFF_REG_VAL);
     1a2:	2181      	movs	r1, #129	; 0x81
     1a4:	2009      	movs	r0, #9
     1a6:	4b04      	ldr	r3, [pc, #16]	; (1b8 <change_channel+0x8c>)
     1a8:	4798      	blx	r3
     1aa:	e7df      	b.n	16c <change_channel+0x40>
		if ((1 << 5) & channel) writeReg(CH_5_SET_REG, CHSET_ON_REG_VAL);
     1ac:	2100      	movs	r1, #0
     1ae:	200a      	movs	r0, #10
     1b0:	4b01      	ldr	r3, [pc, #4]	; (1b8 <change_channel+0x8c>)
     1b2:	4798      	blx	r3
     1b4:	e7e0      	b.n	178 <change_channel+0x4c>
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	0000032d 	.word	0x0000032d

000001bc <initReg>:
 * Description: Initializes Registers setting the sample rate and
 *  channels to record on.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void initReg(uint8_t rate, uint8_t channel) {
     1bc:	b510      	push	{r4, lr}
     1be:	000c      	movs	r4, r1
    changeSampleRate(rate);
     1c0:	4b02      	ldr	r3, [pc, #8]	; (1cc <initReg+0x10>)
     1c2:	4798      	blx	r3
    change_channel(channel);
     1c4:	0020      	movs	r0, r4
     1c6:	4b02      	ldr	r3, [pc, #8]	; (1d0 <initReg+0x14>)
     1c8:	4798      	blx	r3
}
     1ca:	bd10      	pop	{r4, pc}
     1cc:	00000115 	.word	0x00000115
     1d0:	0000012d 	.word	0x0000012d

000001d4 <readADC>:
 *  array 'adcData'.  Retries until either 3 attempts or expected
 *  first byte is recieved.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void readADC(void) {
     1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static uint8_t read_tx[22] = {READ_ADC,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    uint8_t i;
    
    do {
        txrx_wait_sel(read_tx, 22, adcData);
     1d6:	4e09      	ldr	r6, [pc, #36]	; (1fc <readADC+0x28>)
     1d8:	4c09      	ldr	r4, [pc, #36]	; (200 <readADC+0x2c>)
     1da:	4f0a      	ldr	r7, [pc, #40]	; (204 <readADC+0x30>)
     1dc:	e000      	b.n	1e0 <readADC+0xc>
    } while (((adcData[1] & 0xF0) != 0xC0) && i++ < 3);
     1de:	001d      	movs	r5, r3
        txrx_wait_sel(read_tx, 22, adcData);
     1e0:	0032      	movs	r2, r6
     1e2:	2116      	movs	r1, #22
     1e4:	0020      	movs	r0, r4
     1e6:	47b8      	blx	r7
    } while (((adcData[1] & 0xF0) != 0xC0) && i++ < 3);
     1e8:	7873      	ldrb	r3, [r6, #1]
     1ea:	220f      	movs	r2, #15
     1ec:	4393      	bics	r3, r2
     1ee:	2bc0      	cmp	r3, #192	; 0xc0
     1f0:	d003      	beq.n	1fa <readADC+0x26>
     1f2:	1c6b      	adds	r3, r5, #1
     1f4:	b2db      	uxtb	r3, r3
     1f6:	2d02      	cmp	r5, #2
     1f8:	d9f1      	bls.n	1de <readADC+0xa>
}
     1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1fc:	20002be0 	.word	0x20002be0
     200:	20000000 	.word	0x20000000
     204:	00002d2d 	.word	0x00002d2d

00000208 <drdy_callback>:
 *
 * Description: Callback function for pin on ADC saying data is ready
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void drdy_callback(void) {
     208:	b510      	push	{r4, lr}
	if (!timer_done) {
     20a:	4b05      	ldr	r3, [pc, #20]	; (220 <drdy_callback+0x18>)
     20c:	781b      	ldrb	r3, [r3, #0]
     20e:	2b00      	cmp	r3, #0
     210:	d000      	beq.n	214 <drdy_callback+0xc>
        dataRdy = true;
		readADC();
	}
}
     212:	bd10      	pop	{r4, pc}
        dataRdy = true;
     214:	2201      	movs	r2, #1
     216:	4b03      	ldr	r3, [pc, #12]	; (224 <drdy_callback+0x1c>)
     218:	701a      	strb	r2, [r3, #0]
		readADC();
     21a:	4b03      	ldr	r3, [pc, #12]	; (228 <drdy_callback+0x20>)
     21c:	4798      	blx	r3
}
     21e:	e7f8      	b.n	212 <drdy_callback+0xa>
     220:	200056ad 	.word	0x200056ad
     224:	200002cc 	.word	0x200002cc
     228:	000001d5 	.word	0x000001d5

0000022c <initGPIO>:
 *
 * Description: Initializes all GPIO Pins direction and state
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void initGPIO(void) {
     22c:	b570      	push	{r4, r5, r6, lr}
     22e:	b084      	sub	sp, #16
	struct port_config config_port_pin;
	struct extint_chan_conf config_extint_chan;
	
	config_extint_chan.gpio_pin = DRDY_PIN;
     230:	2303      	movs	r3, #3
     232:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = DRDY_PIN_MUX;
     234:	23c0      	movs	r3, #192	; 0xc0
     236:	029b      	lsls	r3, r3, #10
     238:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_DOWN;
     23a:	2502      	movs	r5, #2
     23c:	466b      	mov	r3, sp
     23e:	721d      	strb	r5, [r3, #8]
	config_extint_chan.wake_if_sleeping = true;
     240:	2601      	movs	r6, #1
     242:	725e      	strb	r6, [r3, #9]
	config_extint_chan.filter_input_signal = true;
     244:	729e      	strb	r6, [r3, #10]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     246:	72dd      	strb	r5, [r3, #11]
	
	extint_chan_set_config(DRDY_PIN_LINE, &config_extint_chan);
     248:	4669      	mov	r1, sp
     24a:	2003      	movs	r0, #3
     24c:	4b12      	ldr	r3, [pc, #72]	; (298 <initGPIO+0x6c>)
     24e:	4798      	blx	r3
	extint_register_callback(drdy_callback, DRDY_PIN_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     250:	2200      	movs	r2, #0
     252:	2103      	movs	r1, #3
     254:	4811      	ldr	r0, [pc, #68]	; (29c <initGPIO+0x70>)
     256:	4b12      	ldr	r3, [pc, #72]	; (2a0 <initGPIO+0x74>)
     258:	4798      	blx	r3
	enableDrdy(false);
     25a:	2000      	movs	r0, #0
     25c:	4b11      	ldr	r3, [pc, #68]	; (2a4 <initGPIO+0x78>)
     25e:	4798      	blx	r3
	
	config_port_pin.powersave = false;
     260:	ac03      	add	r4, sp, #12
     262:	2300      	movs	r3, #0
     264:	70a3      	strb	r3, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     266:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
     268:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(PWDN_PIN, &config_port_pin);
     26a:	0021      	movs	r1, r4
     26c:	2000      	movs	r0, #0
     26e:	4e0e      	ldr	r6, [pc, #56]	; (2a8 <initGPIO+0x7c>)
     270:	47b0      	blx	r6
	port_pin_set_config(START_PIN, &config_port_pin);
     272:	0021      	movs	r1, r4
     274:	2002      	movs	r0, #2
     276:	47b0      	blx	r6
	port_pin_set_config(RST_PIN, &config_port_pin);
     278:	0021      	movs	r1, r4
     27a:	2001      	movs	r0, #1
     27c:	47b0      	blx	r6
	port_pin_set_config(SLAVE_SELECT_PIN, &config_port_pin);
     27e:	0021      	movs	r1, r4
     280:	2005      	movs	r0, #5
     282:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     284:	4b09      	ldr	r3, [pc, #36]	; (2ac <initGPIO+0x80>)
     286:	619d      	str	r5, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     288:	2220      	movs	r2, #32
     28a:	615a      	str	r2, [r3, #20]
     28c:	3a1c      	subs	r2, #28
     28e:	615a      	str	r2, [r3, #20]
	
	port_pin_set_output_level(RST_PIN,true);
	port_pin_set_output_level(SLAVE_SELECT_PIN, false);
	startADC(false);
	reset_ADC();
     290:	4b07      	ldr	r3, [pc, #28]	; (2b0 <initGPIO+0x84>)
     292:	4798      	blx	r3
}
     294:	b004      	add	sp, #16
     296:	bd70      	pop	{r4, r5, r6, pc}
     298:	00000da5 	.word	0x00000da5
     29c:	00000209 	.word	0x00000209
     2a0:	0000411d 	.word	0x0000411d
     2a4:	000002f1 	.word	0x000002f1
     2a8:	000041dd 	.word	0x000041dd
     2ac:	41004400 	.word	0x41004400
     2b0:	000002b5 	.word	0x000002b5

000002b4 <reset_ADC>:
 * Description: Resets the ADC using the pwdn pin.  There is also a
 *  rst pin.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void reset_ADC(void) {
     2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2b6:	b083      	sub	sp, #12
	uint8_t tx[2] = {STOP_CONT_ADC, STOP_ADC};
     2b8:	ac01      	add	r4, sp, #4
     2ba:	4b09      	ldr	r3, [pc, #36]	; (2e0 <reset_ADC+0x2c>)
     2bc:	881b      	ldrh	r3, [r3, #0]
     2be:	8023      	strh	r3, [r4, #0]
     2c0:	4e08      	ldr	r6, [pc, #32]	; (2e4 <reset_ADC+0x30>)
     2c2:	2701      	movs	r7, #1
     2c4:	6177      	str	r7, [r6, #20]
    turnOn(false);
	//Needs at least 9ms
	delay_ms(100);
     2c6:	2064      	movs	r0, #100	; 0x64
     2c8:	4d07      	ldr	r5, [pc, #28]	; (2e8 <reset_ADC+0x34>)
     2ca:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     2cc:	61b7      	str	r7, [r6, #24]
	turnOn(true);
	delay_ms(100);
     2ce:	2064      	movs	r0, #100	; 0x64
     2d0:	47a8      	blx	r5
	txrx_wait(tx,2);
     2d2:	2102      	movs	r1, #2
     2d4:	0020      	movs	r0, r4
     2d6:	4b05      	ldr	r3, [pc, #20]	; (2ec <reset_ADC+0x38>)
     2d8:	4798      	blx	r3
}
     2da:	b003      	add	sp, #12
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	0000a594 	.word	0x0000a594
     2e4:	41004400 	.word	0x41004400
     2e8:	000031a5 	.word	0x000031a5
     2ec:	00002cad 	.word	0x00002cad

000002f0 <enableDrdy>:
 * Description: Enables or Disables the drdy callback depending on
 *  the input
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void enableDrdy(bool val) {
     2f0:	b510      	push	{r4, lr}
	val ? extint_chan_enable_callback(DRDY_PIN_LINE, EXTINT_CALLBACK_TYPE_DETECT) : extint_chan_disable_callback(DRDY_PIN_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     2f2:	2800      	cmp	r0, #0
     2f4:	d104      	bne.n	300 <enableDrdy+0x10>
     2f6:	2100      	movs	r1, #0
     2f8:	2003      	movs	r0, #3
     2fa:	4b04      	ldr	r3, [pc, #16]	; (30c <enableDrdy+0x1c>)
     2fc:	4798      	blx	r3
}
     2fe:	bd10      	pop	{r4, pc}
	val ? extint_chan_enable_callback(DRDY_PIN_LINE, EXTINT_CALLBACK_TYPE_DETECT) : extint_chan_disable_callback(DRDY_PIN_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     300:	2100      	movs	r1, #0
     302:	2003      	movs	r0, #3
     304:	4b02      	ldr	r3, [pc, #8]	; (310 <enableDrdy+0x20>)
     306:	4798      	blx	r3
     308:	e7f9      	b.n	2fe <enableDrdy+0xe>
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00004169 	.word	0x00004169
     310:	00004149 	.word	0x00004149

00000314 <startADC>:
	if (level) {
     314:	2800      	cmp	r0, #0
     316:	d103      	bne.n	320 <startADC+0xc>
		port_base->OUTCLR.reg = pin_mask;
     318:	2204      	movs	r2, #4
     31a:	4b03      	ldr	r3, [pc, #12]	; (328 <startADC+0x14>)
     31c:	615a      	str	r2, [r3, #20]
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void startADC(bool val) {
    port_pin_set_output_level(START_PIN, val);
}
     31e:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
     320:	2204      	movs	r2, #4
     322:	4b01      	ldr	r3, [pc, #4]	; (328 <startADC+0x14>)
     324:	619a      	str	r2, [r3, #24]
     326:	e7fa      	b.n	31e <startADC+0xa>
     328:	41004400 	.word	0x41004400

0000032c <writeReg>:
 *  ADC allows for multiple sequential registers to be written, but
 *  this functionality is ignored.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void writeReg(uint8_t reg, uint8_t value) {
     32c:	b5f0      	push	{r4, r5, r6, r7, lr}
     32e:	b085      	sub	sp, #20
     330:	0002      	movs	r2, r0
     332:	9001      	str	r0, [sp, #4]
     334:	000e      	movs	r6, r1
    uint8_t attempts = 0, tx[3] = {(WRITE_REG + reg), 0, value};
     336:	ab03      	add	r3, sp, #12
     338:	3240      	adds	r2, #64	; 0x40
     33a:	701a      	strb	r2, [r3, #0]
     33c:	2200      	movs	r2, #0
     33e:	705a      	strb	r2, [r3, #1]
     340:	7099      	strb	r1, [r3, #2]
     342:	2404      	movs	r4, #4
	do {
		txrx_wait(tx, 3);
     344:	4d07      	ldr	r5, [pc, #28]	; (364 <writeReg+0x38>)
    } while (value != readReg(reg) && attempts++ < 3);
     346:	4f08      	ldr	r7, [pc, #32]	; (368 <writeReg+0x3c>)
		txrx_wait(tx, 3);
     348:	2103      	movs	r1, #3
     34a:	a803      	add	r0, sp, #12
     34c:	47a8      	blx	r5
    } while (value != readReg(reg) && attempts++ < 3);
     34e:	9801      	ldr	r0, [sp, #4]
     350:	47b8      	blx	r7
     352:	4286      	cmp	r6, r0
     354:	d003      	beq.n	35e <writeReg+0x32>
     356:	3c01      	subs	r4, #1
     358:	b2e4      	uxtb	r4, r4
     35a:	2c00      	cmp	r4, #0
     35c:	d1f4      	bne.n	348 <writeReg+0x1c>
}
     35e:	b005      	add	sp, #20
     360:	bdf0      	pop	{r4, r5, r6, r7, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	00002cad 	.word	0x00002cad
     368:	0000036d 	.word	0x0000036d

0000036c <readReg>:
 *  ADC allows for multiple sequential registers to be read, but this
 *  functionality is ignored.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t readReg(uint8_t reg) {
     36c:	b500      	push	{lr}
     36e:	b083      	sub	sp, #12
	uint8_t tx[3] = {(READ_REG + reg), 0, 0};
     370:	ab01      	add	r3, sp, #4
     372:	0002      	movs	r2, r0
     374:	3220      	adds	r2, #32
     376:	701a      	strb	r2, [r3, #0]
     378:	2200      	movs	r2, #0
     37a:	705a      	strb	r2, [r3, #1]
     37c:	709a      	strb	r2, [r3, #2]
	if (reg > CONFIG4_REG) return 0;
     37e:	2300      	movs	r3, #0
     380:	2817      	cmp	r0, #23
     382:	d902      	bls.n	38a <readReg+0x1e>
    txrx_wait(tx, 3);
    return rx_buf[2];
}
     384:	0018      	movs	r0, r3
     386:	b003      	add	sp, #12
     388:	bd00      	pop	{pc}
    txrx_wait(tx, 3);
     38a:	2103      	movs	r1, #3
     38c:	a801      	add	r0, sp, #4
     38e:	4b02      	ldr	r3, [pc, #8]	; (398 <readReg+0x2c>)
     390:	4798      	blx	r3
    return rx_buf[2];
     392:	4b02      	ldr	r3, [pc, #8]	; (39c <readReg+0x30>)
     394:	789b      	ldrb	r3, [r3, #2]
     396:	e7f5      	b.n	384 <readReg+0x18>
     398:	00002cad 	.word	0x00002cad
     39c:	20005694 	.word	0x20005694

000003a0 <initADC>:
 * Description: Initializes the ADC.  SPI is configured, GPIO is set,
 *  Registers are set to initialization states.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void __attribute__((optimize("O0"))) initADC(void) {
     3a0:	b580      	push	{r7, lr}
     3a2:	af00      	add	r7, sp, #0
	configure_spi_master();
     3a4:	4b0d      	ldr	r3, [pc, #52]	; (3dc <initADC+0x3c>)
     3a6:	4798      	blx	r3
    initGPIO();
     3a8:	4b0d      	ldr	r3, [pc, #52]	; (3e0 <initADC+0x40>)
     3aa:	4798      	blx	r3
    initReg(DATA_RATE_16000,0b00111111);
     3ac:	213f      	movs	r1, #63	; 0x3f
     3ae:	2000      	movs	r0, #0
     3b0:	4b0c      	ldr	r3, [pc, #48]	; (3e4 <initADC+0x44>)
     3b2:	4798      	blx	r3
	writeReg(CONFIG1_REG,CONFIG1_REG_INIT);
     3b4:	21d0      	movs	r1, #208	; 0xd0
     3b6:	2001      	movs	r0, #1
     3b8:	4b0b      	ldr	r3, [pc, #44]	; (3e8 <initADC+0x48>)
     3ba:	4798      	blx	r3
	writeReg(CONFIG2_REG,CONFIG2_REG_INIT);
     3bc:	21c3      	movs	r1, #195	; 0xc3
     3be:	2002      	movs	r0, #2
     3c0:	4b09      	ldr	r3, [pc, #36]	; (3e8 <initADC+0x48>)
     3c2:	4798      	blx	r3
	writeReg(CONFIG3_REG,CONFIG3_REG_INIT);
     3c4:	2160      	movs	r1, #96	; 0x60
     3c6:	2003      	movs	r0, #3
     3c8:	4b07      	ldr	r3, [pc, #28]	; (3e8 <initADC+0x48>)
     3ca:	4798      	blx	r3
	writeReg(MISC1_REG,MISC1_REG_INIT);
     3cc:	2120      	movs	r1, #32
     3ce:	2015      	movs	r0, #21
     3d0:	4b05      	ldr	r3, [pc, #20]	; (3e8 <initADC+0x48>)
     3d2:	4798      	blx	r3
}
     3d4:	46c0      	nop			; (mov r8, r8)
     3d6:	46bd      	mov	sp, r7
     3d8:	bd80      	pop	{r7, pc}
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	00002b79 	.word	0x00002b79
     3e0:	0000022d 	.word	0x0000022d
     3e4:	000001bd 	.word	0x000001bd
     3e8:	0000032d 	.word	0x0000032d

000003ec <determineADCRate>:
 *  users desired sample rate as the input.  'FF' is a 'fudge factor'
 *  since we need a little extra time to transfer data between samples
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t determineADCRate(float rate) {
     3ec:	b570      	push	{r4, r5, r6, lr}
     3ee:	1c05      	adds	r5, r0, #0
    if (rate < (float) RATE_1000 * FF) {
     3f0:	4916      	ldr	r1, [pc, #88]	; (44c <determineADCRate+0x60>)
     3f2:	4b17      	ldr	r3, [pc, #92]	; (450 <determineADCRate+0x64>)
     3f4:	4798      	blx	r3
     3f6:	2800      	cmp	r0, #0
     3f8:	d00f      	beq.n	41a <determineADCRate+0x2e>
        if (rate < (float) RATE_500 * FF) return (rate < (float) RATE_250 * FF) ? DATA_RATE_250 : DATA_RATE_500;
     3fa:	4916      	ldr	r1, [pc, #88]	; (454 <determineADCRate+0x68>)
     3fc:	1c28      	adds	r0, r5, #0
     3fe:	4b14      	ldr	r3, [pc, #80]	; (450 <determineADCRate+0x64>)
     400:	4798      	blx	r3
     402:	2800      	cmp	r0, #0
     404:	d101      	bne.n	40a <determineADCRate+0x1e>
        else return DATA_RATE_1000;
     406:	2004      	movs	r0, #4
    }
    else {
        if (rate < (float) RATE_4000 * FF) return (rate < (float) RATE_2000 * FF) ? DATA_RATE_2000 : DATA_RATE_4000;
		else return (rate < (float) RATE_8000 * FF) ? DATA_RATE_8000 : DATA_RATE_16000;
    }
}
     408:	bd70      	pop	{r4, r5, r6, pc}
        if (rate < (float) RATE_500 * FF) return (rate < (float) RATE_250 * FF) ? DATA_RATE_250 : DATA_RATE_500;
     40a:	4913      	ldr	r1, [pc, #76]	; (458 <determineADCRate+0x6c>)
     40c:	1c28      	adds	r0, r5, #0
     40e:	4b10      	ldr	r3, [pc, #64]	; (450 <determineADCRate+0x64>)
     410:	4798      	blx	r3
     412:	1e43      	subs	r3, r0, #1
     414:	4198      	sbcs	r0, r3
     416:	3005      	adds	r0, #5
     418:	e7f6      	b.n	408 <determineADCRate+0x1c>
        if (rate < (float) RATE_4000 * FF) return (rate < (float) RATE_2000 * FF) ? DATA_RATE_2000 : DATA_RATE_4000;
     41a:	4910      	ldr	r1, [pc, #64]	; (45c <determineADCRate+0x70>)
     41c:	1c28      	adds	r0, r5, #0
     41e:	4b0c      	ldr	r3, [pc, #48]	; (450 <determineADCRate+0x64>)
     420:	4798      	blx	r3
     422:	2800      	cmp	r0, #0
     424:	d007      	beq.n	436 <determineADCRate+0x4a>
     426:	490e      	ldr	r1, [pc, #56]	; (460 <determineADCRate+0x74>)
     428:	1c28      	adds	r0, r5, #0
     42a:	4b09      	ldr	r3, [pc, #36]	; (450 <determineADCRate+0x64>)
     42c:	4798      	blx	r3
     42e:	1e43      	subs	r3, r0, #1
     430:	4198      	sbcs	r0, r3
     432:	3002      	adds	r0, #2
     434:	e7e8      	b.n	408 <determineADCRate+0x1c>
		else return (rate < (float) RATE_8000 * FF) ? DATA_RATE_8000 : DATA_RATE_16000;
     436:	2401      	movs	r4, #1
     438:	490a      	ldr	r1, [pc, #40]	; (464 <determineADCRate+0x78>)
     43a:	1c28      	adds	r0, r5, #0
     43c:	4b04      	ldr	r3, [pc, #16]	; (450 <determineADCRate+0x64>)
     43e:	4798      	blx	r3
     440:	2800      	cmp	r0, #0
     442:	d100      	bne.n	446 <determineADCRate+0x5a>
     444:	2400      	movs	r4, #0
     446:	b2e0      	uxtb	r0, r4
     448:	e7de      	b.n	408 <determineADCRate+0x1c>
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	44480000 	.word	0x44480000
     450:	000055f1 	.word	0x000055f1
     454:	43c80000 	.word	0x43c80000
     458:	43480000 	.word	0x43480000
     45c:	45480000 	.word	0x45480000
     460:	44c80000 	.word	0x44c80000
     464:	45c80000 	.word	0x45c80000

00000468 <udi_tmc_getsetting>:
 * @return The value of the alternate setting
 */
uint8_t udi_tmc_getsetting(void)
{
   return udi_tmc_alternate_setting;
}
     468:	2000      	movs	r0, #0
     46a:	4770      	bx	lr

0000046c <udi_tmc_setup>:
bool udi_tmc_setup(void) {
     46c:	b510      	push	{r4, lr}
	int setup_type = Udd_setup_type();
     46e:	4b1f      	ldr	r3, [pc, #124]	; (4ec <udi_tmc_setup+0x80>)
     470:	781b      	ldrb	r3, [r3, #0]
	if (Udd_setup_is_in()) {
     472:	b25a      	sxtb	r2, r3
	bool result = false; // Default to handling as an unsupported request
     474:	2000      	movs	r0, #0
	if (Udd_setup_is_in()) {
     476:	2a00      	cmp	r2, #0
     478:	db00      	blt.n	47c <udi_tmc_setup+0x10>
}
     47a:	bd10      	pop	{r4, pc}
		if (setup_type == USB_REQ_TYPE_CLASS) {
     47c:	2260      	movs	r2, #96	; 0x60
     47e:	4013      	ands	r3, r2
     480:	2b20      	cmp	r3, #32
     482:	d1fa      	bne.n	47a <udi_tmc_setup+0xe>
	switch (udd_g_ctrlreq.req.bRequest) {
     484:	4b19      	ldr	r3, [pc, #100]	; (4ec <udi_tmc_setup+0x80>)
     486:	785a      	ldrb	r2, [r3, #1]
     488:	2a40      	cmp	r2, #64	; 0x40
     48a:	d82c      	bhi.n	4e6 <udi_tmc_setup+0x7a>
     48c:	0093      	lsls	r3, r2, #2
     48e:	4a18      	ldr	r2, [pc, #96]	; (4f0 <udi_tmc_setup+0x84>)
     490:	58d3      	ldr	r3, [r2, r3]
     492:	469f      	mov	pc, r3
			UDI_TMC_INITIATE_ABORT_BULK_OUT_EXT();
     494:	4b17      	ldr	r3, [pc, #92]	; (4f4 <udi_tmc_setup+0x88>)
     496:	4798      	blx	r3
	bool result = true; // Default to indicating the request was handled
     498:	2001      	movs	r0, #1
     49a:	e7ee      	b.n	47a <udi_tmc_setup+0xe>
			UDI_TMC_CHECK_ABORT_BULK_OUT_STATUS_EXT();
     49c:	4b16      	ldr	r3, [pc, #88]	; (4f8 <udi_tmc_setup+0x8c>)
     49e:	4798      	blx	r3
	bool result = true; // Default to indicating the request was handled
     4a0:	2001      	movs	r0, #1
     4a2:	e7ea      	b.n	47a <udi_tmc_setup+0xe>
			UDI_TMC_INITIATE_ABORT_BULK_IN_EXT();
     4a4:	4b15      	ldr	r3, [pc, #84]	; (4fc <udi_tmc_setup+0x90>)
     4a6:	4798      	blx	r3
	bool result = true; // Default to indicating the request was handled
     4a8:	2001      	movs	r0, #1
     4aa:	e7e6      	b.n	47a <udi_tmc_setup+0xe>
			UDI_TMC_CHECK_ABORT_BULK_IN_STATUS_EXT();
     4ac:	4b14      	ldr	r3, [pc, #80]	; (500 <udi_tmc_setup+0x94>)
     4ae:	4798      	blx	r3
	bool result = true; // Default to indicating the request was handled
     4b0:	2001      	movs	r0, #1
     4b2:	e7e2      	b.n	47a <udi_tmc_setup+0xe>
			UDI_TMC_INITIATE_CLEAR_EXT();
     4b4:	4b13      	ldr	r3, [pc, #76]	; (504 <udi_tmc_setup+0x98>)
     4b6:	4798      	blx	r3
			udd_ep_clear_halt(UDI_TMC_EP_BULK_IN); // Clear HALT condition
     4b8:	2081      	movs	r0, #129	; 0x81
     4ba:	4b13      	ldr	r3, [pc, #76]	; (508 <udi_tmc_setup+0x9c>)
     4bc:	4798      	blx	r3
	bool result = true; // Default to indicating the request was handled
     4be:	2001      	movs	r0, #1
     4c0:	e7db      	b.n	47a <udi_tmc_setup+0xe>
			UDI_TMC_CHECK_CLEAR_STATUS_EXT();
     4c2:	4b12      	ldr	r3, [pc, #72]	; (50c <udi_tmc_setup+0xa0>)
     4c4:	4798      	blx	r3
	bool result = true; // Default to indicating the request was handled
     4c6:	2001      	movs	r0, #1
     4c8:	e7d7      	b.n	47a <udi_tmc_setup+0xe>
                      (USBTMC_SUPPORT_TERMCHAR << 0),             // Bulk-IN TermChar support
                      {0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0} // Reserved Bytes
                    };

	udd_g_ctrlreq.payload = (uint8_t*)&capabilities;
     4ca:	4b08      	ldr	r3, [pc, #32]	; (4ec <udi_tmc_setup+0x80>)
     4cc:	4a10      	ldr	r2, [pc, #64]	; (510 <udi_tmc_setup+0xa4>)
     4ce:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = sizeof(struct USBTMC_capabilities);
     4d0:	2218      	movs	r2, #24
     4d2:	819a      	strh	r2, [r3, #12]
	bool result = true; // Default to indicating the request was handled
     4d4:	2001      	movs	r0, #1
     4d6:	e7d0      	b.n	47a <udi_tmc_setup+0xe>
   udd_g_ctrlreq.payload = &result;
     4d8:	4b04      	ldr	r3, [pc, #16]	; (4ec <udi_tmc_setup+0x80>)
     4da:	4a0e      	ldr	r2, [pc, #56]	; (514 <udi_tmc_setup+0xa8>)
     4dc:	609a      	str	r2, [r3, #8]
   udd_g_ctrlreq.payload_size = sizeof(uint8_t);
     4de:	2201      	movs	r2, #1
     4e0:	819a      	strh	r2, [r3, #12]
	bool result = true; // Default to indicating the request was handled
     4e2:	2001      	movs	r0, #1
     4e4:	e7c9      	b.n	47a <udi_tmc_setup+0xe>
			result = false;
     4e6:	2000      	movs	r0, #0
     4e8:	e7c7      	b.n	47a <udi_tmc_setup+0xe>
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	20002f28 	.word	0x20002f28
     4f0:	0000a598 	.word	0x0000a598
     4f4:	00004e2d 	.word	0x00004e2d
     4f8:	00004e49 	.word	0x00004e49
     4fc:	00004e6d 	.word	0x00004e6d
     500:	00004ea5 	.word	0x00004ea5
     504:	00004ee1 	.word	0x00004ee1
     508:	000024cd 	.word	0x000024cd
     50c:	00004ef9 	.word	0x00004ef9
     510:	20000018 	.word	0x20000018
     514:	20000030 	.word	0x20000030

00000518 <udi_tmc_disable>:
{
     518:	b510      	push	{r4, lr}
   UDI_TMC_DISABLE_EXT();
     51a:	4b01      	ldr	r3, [pc, #4]	; (520 <udi_tmc_disable+0x8>)
     51c:	4798      	blx	r3
}
     51e:	bd10      	pop	{r4, pc}
     520:	00004de5 	.word	0x00004de5

00000524 <udi_tmc_enable>:
{
     524:	b510      	push	{r4, lr}
   return UDI_TMC_ENABLE_EXT() ? true : false;
     526:	4b01      	ldr	r3, [pc, #4]	; (52c <udi_tmc_enable+0x8>)
     528:	4798      	blx	r3
}
     52a:	bd10      	pop	{r4, pc}
     52c:	00004dc5 	.word	0x00004dc5

00000530 <udi_tmc_bulk_in_run>:
bool udi_tmc_bulk_in_run(uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback) {
     530:	b510      	push	{r4, lr}
     532:	b082      	sub	sp, #8
     534:	000b      	movs	r3, r1
   return udd_ep_run(UDI_TMC_EP_BULK_IN, false, buf, buf_size, callback);
     536:	9200      	str	r2, [sp, #0]
     538:	0002      	movs	r2, r0
     53a:	2100      	movs	r1, #0
     53c:	2081      	movs	r0, #129	; 0x81
     53e:	4c02      	ldr	r4, [pc, #8]	; (548 <udi_tmc_bulk_in_run+0x18>)
     540:	47a0      	blx	r4
}
     542:	b002      	add	sp, #8
     544:	bd10      	pop	{r4, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	00002511 	.word	0x00002511

0000054c <udi_tmc_bulk_out_run>:
bool udi_tmc_bulk_out_run(uint8_t* buf, iram_size_t buf_size, udd_callback_trans_t callback) {
     54c:	b510      	push	{r4, lr}
     54e:	b082      	sub	sp, #8
     550:	000b      	movs	r3, r1
	if (NULL == callback) {
     552:	2a00      	cmp	r2, #0
     554:	d007      	beq.n	566 <udi_tmc_bulk_out_run+0x1a>
	return udd_ep_run(UDI_TMC_EP_BULK_OUT, false, buf, buf_size, callback);
     556:	9200      	str	r2, [sp, #0]
     558:	0002      	movs	r2, r0
     55a:	2100      	movs	r1, #0
     55c:	2002      	movs	r0, #2
     55e:	4c04      	ldr	r4, [pc, #16]	; (570 <udi_tmc_bulk_out_run+0x24>)
     560:	47a0      	blx	r4
}
     562:	b002      	add	sp, #8
     564:	bd10      	pop	{r4, pc}
		callback = udi_process_bulkOUT_header;
     566:	4a03      	ldr	r2, [pc, #12]	; (574 <udi_tmc_bulk_out_run+0x28>)
		buf_size = sizeof(bulkOUTmsgHeader_t);
     568:	238c      	movs	r3, #140	; 0x8c
		buf = (uint8_t*)&bulkOUTmsgHeader;
     56a:	4803      	ldr	r0, [pc, #12]	; (578 <udi_tmc_bulk_out_run+0x2c>)
     56c:	e7f3      	b.n	556 <udi_tmc_bulk_out_run+0xa>
     56e:	46c0      	nop			; (mov r8, r8)
     570:	00002511 	.word	0x00002511
     574:	0000057d 	.word	0x0000057d
     578:	20002c00 	.word	0x20002c00

0000057c <udi_process_bulkOUT_header>:
void udi_process_bulkOUT_header(udd_ep_status_t status, iram_size_t numBytes, udd_ep_id_t endpointId) {
     57c:	b510      	push	{r4, lr}
	if ( UDD_EP_TRANSFER_OK == status ) {
     57e:	2800      	cmp	r0, #0
     580:	d11a      	bne.n	5b8 <udi_process_bulkOUT_header+0x3c>
		switch (bulkOUTmsgHeader.header.MsgID) {
     582:	4b10      	ldr	r3, [pc, #64]	; (5c4 <udi_process_bulkOUT_header+0x48>)
     584:	781b      	ldrb	r3, [r3, #0]
     586:	2b01      	cmp	r3, #1
     588:	d00e      	beq.n	5a8 <udi_process_bulkOUT_header+0x2c>
     58a:	2b02      	cmp	r3, #2
     58c:	d115      	bne.n	5ba <udi_process_bulkOUT_header+0x3e>
 */
void udi_req_dev_dep_msg_in_header_rx(udd_ep_id_t endpointId, TMC_bulkOUT_request_dev_dep_msg_in_header_t const* header) {
	(void)endpointId;

	// We don't support the termChar mechanism
	if (0 == header->bmTransferAttributes) {
     58e:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <udi_process_bulkOUT_header+0x48>)
     590:	7a1b      	ldrb	r3, [r3, #8]
     592:	2b00      	cmp	r3, #0
     594:	d110      	bne.n	5b8 <udi_process_bulkOUT_header+0x3c>
		if (!UDI_TMC_DEVICE_DEPENDENT_DATA_RX_EXT(header)) {
     596:	480b      	ldr	r0, [pc, #44]	; (5c4 <udi_process_bulkOUT_header+0x48>)
     598:	4b0b      	ldr	r3, [pc, #44]	; (5c8 <udi_process_bulkOUT_header+0x4c>)
     59a:	4798      	blx	r3
     59c:	2800      	cmp	r0, #0
     59e:	d10b      	bne.n	5b8 <udi_process_bulkOUT_header+0x3c>
}

////////////////////////////////////////////////////////////////////////////////
void udi_signal_bulkOUT_error(void) {
	// TODO: Halt the BulkOUT endpoint to signal an error
	udd_ep_set_halt(UDI_TMC_EP_BULK_OUT);
     5a0:	3002      	adds	r0, #2
     5a2:	4b0a      	ldr	r3, [pc, #40]	; (5cc <udi_process_bulkOUT_header+0x50>)
     5a4:	4798      	blx	r3
     5a6:	e007      	b.n	5b8 <udi_process_bulkOUT_header+0x3c>
				TMC_COMMAND_HANDLER(&bulkOUTmsgHeader.dev_dep_msg_out.msg);
     5a8:	4809      	ldr	r0, [pc, #36]	; (5d0 <udi_process_bulkOUT_header+0x54>)
     5aa:	4b0a      	ldr	r3, [pc, #40]	; (5d4 <udi_process_bulkOUT_header+0x58>)
     5ac:	4798      	blx	r3
				UDI_TMC_RECEIVE_BULKOUT_COMMAND();
     5ae:	2200      	movs	r2, #0
     5b0:	2100      	movs	r1, #0
     5b2:	2000      	movs	r0, #0
     5b4:	4b08      	ldr	r3, [pc, #32]	; (5d8 <udi_process_bulkOUT_header+0x5c>)
     5b6:	4798      	blx	r3
}
     5b8:	bd10      	pop	{r4, pc}
				udd_ep_abort(endpointId);
     5ba:	0010      	movs	r0, r2
     5bc:	4b07      	ldr	r3, [pc, #28]	; (5dc <udi_process_bulkOUT_header+0x60>)
     5be:	4798      	blx	r3
				return;
     5c0:	e7fa      	b.n	5b8 <udi_process_bulkOUT_header+0x3c>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	20002c00 	.word	0x20002c00
     5c8:	00005035 	.word	0x00005035
     5cc:	0000239d 	.word	0x0000239d
     5d0:	20002c0c 	.word	0x20002c0c
     5d4:	00004b89 	.word	0x00004b89
     5d8:	0000054d 	.word	0x0000054d
     5dc:	000021dd 	.word	0x000021dd

000005e0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     5e0:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     5e2:	4b11      	ldr	r3, [pc, #68]	; (628 <udc_next_desc_in_iface+0x48>)
     5e4:	681b      	ldr	r3, [r3, #0]
     5e6:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     5e8:	7894      	ldrb	r4, [r2, #2]
     5ea:	78d3      	ldrb	r3, [r2, #3]
     5ec:	021b      	lsls	r3, r3, #8
     5ee:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     5f0:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     5f2:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     5f4:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     5f6:	4290      	cmp	r0, r2
     5f8:	d210      	bcs.n	61c <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     5fa:	7843      	ldrb	r3, [r0, #1]
     5fc:	2b04      	cmp	r3, #4
     5fe:	d00f      	beq.n	620 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     600:	428b      	cmp	r3, r1
     602:	d00a      	beq.n	61a <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     604:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     606:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     608:	4290      	cmp	r0, r2
     60a:	d205      	bcs.n	618 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     60c:	7843      	ldrb	r3, [r0, #1]
     60e:	2b04      	cmp	r3, #4
     610:	d008      	beq.n	624 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     612:	428b      	cmp	r3, r1
     614:	d1f6      	bne.n	604 <udc_next_desc_in_iface+0x24>
     616:	e000      	b.n	61a <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     618:	2000      	movs	r0, #0
}
     61a:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     61c:	2000      	movs	r0, #0
     61e:	e7fc      	b.n	61a <udc_next_desc_in_iface+0x3a>
     620:	2000      	movs	r0, #0
     622:	e7fa      	b.n	61a <udc_next_desc_in_iface+0x3a>
     624:	2000      	movs	r0, #0
     626:	e7f8      	b.n	61a <udc_next_desc_in_iface+0x3a>
     628:	200002dc 	.word	0x200002dc

0000062c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     62c:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     62e:	4b03      	ldr	r3, [pc, #12]	; (63c <udc_valid_address+0x10>)
     630:	885b      	ldrh	r3, [r3, #2]
     632:	207f      	movs	r0, #127	; 0x7f
     634:	4018      	ands	r0, r3
     636:	4b02      	ldr	r3, [pc, #8]	; (640 <udc_valid_address+0x14>)
     638:	4798      	blx	r3
}
     63a:	bd10      	pop	{r4, pc}
     63c:	20002f28 	.word	0x20002f28
     640:	000026e9 	.word	0x000026e9

00000644 <udc_update_iface_desc>:
{
     644:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     646:	4b19      	ldr	r3, [pc, #100]	; (6ac <udc_update_iface_desc+0x68>)
     648:	781b      	ldrb	r3, [r3, #0]
		return false;
     64a:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     64c:	2b00      	cmp	r3, #0
     64e:	d029      	beq.n	6a4 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     650:	4b17      	ldr	r3, [pc, #92]	; (6b0 <udc_update_iface_desc+0x6c>)
     652:	681b      	ldr	r3, [r3, #0]
     654:	681b      	ldr	r3, [r3, #0]
     656:	791c      	ldrb	r4, [r3, #4]
     658:	4284      	cmp	r4, r0
     65a:	d923      	bls.n	6a4 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     65c:	4a15      	ldr	r2, [pc, #84]	; (6b4 <udc_update_iface_desc+0x70>)
     65e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     660:	789a      	ldrb	r2, [r3, #2]
     662:	78dc      	ldrb	r4, [r3, #3]
     664:	0224      	lsls	r4, r4, #8
     666:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     668:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     66a:	42a3      	cmp	r3, r4
     66c:	d21c      	bcs.n	6a8 <udc_update_iface_desc+0x64>
     66e:	2500      	movs	r5, #0
     670:	2601      	movs	r6, #1
     672:	e007      	b.n	684 <udc_update_iface_desc+0x40>
     674:	4a0f      	ldr	r2, [pc, #60]	; (6b4 <udc_update_iface_desc+0x70>)
     676:	6013      	str	r3, [r2, #0]
     678:	e00f      	b.n	69a <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     67a:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     67c:	189b      	adds	r3, r3, r2
     67e:	0035      	movs	r5, r6
	while (ptr_end_desc >
     680:	42a3      	cmp	r3, r4
     682:	d20c      	bcs.n	69e <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     684:	785a      	ldrb	r2, [r3, #1]
     686:	2a04      	cmp	r2, #4
     688:	d1f7      	bne.n	67a <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     68a:	789a      	ldrb	r2, [r3, #2]
     68c:	4282      	cmp	r2, r0
     68e:	d1f4      	bne.n	67a <udc_update_iface_desc+0x36>
     690:	78da      	ldrb	r2, [r3, #3]
     692:	428a      	cmp	r2, r1
     694:	d1f1      	bne.n	67a <udc_update_iface_desc+0x36>
     696:	2d00      	cmp	r5, #0
     698:	d1ec      	bne.n	674 <udc_update_iface_desc+0x30>
				return true; // Interface found
     69a:	2201      	movs	r2, #1
     69c:	e002      	b.n	6a4 <udc_update_iface_desc+0x60>
     69e:	4a05      	ldr	r2, [pc, #20]	; (6b4 <udc_update_iface_desc+0x70>)
     6a0:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     6a2:	2200      	movs	r2, #0
}
     6a4:	0010      	movs	r0, r2
     6a6:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     6a8:	2200      	movs	r2, #0
     6aa:	e7fb      	b.n	6a4 <udc_update_iface_desc+0x60>
     6ac:	200002d8 	.word	0x200002d8
     6b0:	200002dc 	.word	0x200002dc
     6b4:	200002e0 	.word	0x200002e0

000006b8 <udc_iface_disable>:
{
     6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ba:	46c6      	mov	lr, r8
     6bc:	b500      	push	{lr}
     6be:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     6c0:	2100      	movs	r1, #0
     6c2:	4b13      	ldr	r3, [pc, #76]	; (710 <udc_iface_disable+0x58>)
     6c4:	4798      	blx	r3
     6c6:	1e05      	subs	r5, r0, #0
     6c8:	d103      	bne.n	6d2 <udc_iface_disable+0x1a>
}
     6ca:	0028      	movs	r0, r5
     6cc:	bc04      	pop	{r2}
     6ce:	4690      	mov	r8, r2
     6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     6d2:	4b10      	ldr	r3, [pc, #64]	; (714 <udc_iface_disable+0x5c>)
     6d4:	681b      	ldr	r3, [r3, #0]
     6d6:	685b      	ldr	r3, [r3, #4]
     6d8:	00a2      	lsls	r2, r4, #2
     6da:	58d3      	ldr	r3, [r2, r3]
     6dc:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     6de:	68db      	ldr	r3, [r3, #12]
     6e0:	4798      	blx	r3
     6e2:	0001      	movs	r1, r0
     6e4:	0020      	movs	r0, r4
     6e6:	4b0a      	ldr	r3, [pc, #40]	; (710 <udc_iface_disable+0x58>)
     6e8:	4798      	blx	r3
     6ea:	1e05      	subs	r5, r0, #0
     6ec:	d0ed      	beq.n	6ca <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     6ee:	4b0a      	ldr	r3, [pc, #40]	; (718 <udc_iface_disable+0x60>)
     6f0:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6f2:	4e0a      	ldr	r6, [pc, #40]	; (71c <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     6f4:	4f0a      	ldr	r7, [pc, #40]	; (720 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6f6:	2105      	movs	r1, #5
     6f8:	0020      	movs	r0, r4
     6fa:	47b0      	blx	r6
     6fc:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     6fe:	d002      	beq.n	706 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     700:	7880      	ldrb	r0, [r0, #2]
     702:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     704:	e7f7      	b.n	6f6 <udc_iface_disable+0x3e>
	udi_api->disable();
     706:	4643      	mov	r3, r8
     708:	685b      	ldr	r3, [r3, #4]
     70a:	4798      	blx	r3
	return true;
     70c:	e7dd      	b.n	6ca <udc_iface_disable+0x12>
     70e:	46c0      	nop			; (mov r8, r8)
     710:	00000645 	.word	0x00000645
     714:	200002dc 	.word	0x200002dc
     718:	200002e0 	.word	0x200002e0
     71c:	000005e1 	.word	0x000005e1
     720:	00002229 	.word	0x00002229

00000724 <udc_iface_enable>:
{
     724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     726:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     728:	4b0f      	ldr	r3, [pc, #60]	; (768 <udc_iface_enable+0x44>)
     72a:	4798      	blx	r3
     72c:	2800      	cmp	r0, #0
     72e:	d019      	beq.n	764 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     730:	4b0e      	ldr	r3, [pc, #56]	; (76c <udc_iface_enable+0x48>)
     732:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     734:	4e0e      	ldr	r6, [pc, #56]	; (770 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     736:	4f0f      	ldr	r7, [pc, #60]	; (774 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     738:	2105      	movs	r1, #5
     73a:	0020      	movs	r0, r4
     73c:	47b0      	blx	r6
     73e:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     740:	d009      	beq.n	756 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     742:	7903      	ldrb	r3, [r0, #4]
     744:	7942      	ldrb	r2, [r0, #5]
     746:	0212      	lsls	r2, r2, #8
     748:	431a      	orrs	r2, r3
     74a:	78c1      	ldrb	r1, [r0, #3]
     74c:	7880      	ldrb	r0, [r0, #2]
     74e:	47b8      	blx	r7
     750:	2800      	cmp	r0, #0
     752:	d1f1      	bne.n	738 <udc_iface_enable+0x14>
     754:	e006      	b.n	764 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     756:	4b08      	ldr	r3, [pc, #32]	; (778 <udc_iface_enable+0x54>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	685b      	ldr	r3, [r3, #4]
     75c:	00ad      	lsls	r5, r5, #2
     75e:	58eb      	ldr	r3, [r5, r3]
     760:	681b      	ldr	r3, [r3, #0]
     762:	4798      	blx	r3
}
     764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     766:	46c0      	nop			; (mov r8, r8)
     768:	00000645 	.word	0x00000645
     76c:	200002e0 	.word	0x200002e0
     770:	000005e1 	.word	0x000005e1
     774:	00002281 	.word	0x00002281
     778:	200002dc 	.word	0x200002dc

0000077c <udc_start>:
{
     77c:	b510      	push	{r4, lr}
	udd_enable();
     77e:	4b01      	ldr	r3, [pc, #4]	; (784 <udc_start+0x8>)
     780:	4798      	blx	r3
}
     782:	bd10      	pop	{r4, pc}
     784:	00002799 	.word	0x00002799

00000788 <udc_reset>:
{
     788:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     78a:	4b0e      	ldr	r3, [pc, #56]	; (7c4 <udc_reset+0x3c>)
     78c:	781b      	ldrb	r3, [r3, #0]
     78e:	2b00      	cmp	r3, #0
     790:	d011      	beq.n	7b6 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     792:	4b0d      	ldr	r3, [pc, #52]	; (7c8 <udc_reset+0x40>)
     794:	681b      	ldr	r3, [r3, #0]
     796:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     798:	791b      	ldrb	r3, [r3, #4]
     79a:	2b00      	cmp	r3, #0
     79c:	d00b      	beq.n	7b6 <udc_reset+0x2e>
     79e:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     7a0:	4e0a      	ldr	r6, [pc, #40]	; (7cc <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7a2:	4d09      	ldr	r5, [pc, #36]	; (7c8 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     7a4:	0020      	movs	r0, r4
     7a6:	47b0      	blx	r6
				iface_num++) {
     7a8:	3401      	adds	r4, #1
     7aa:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7ac:	682b      	ldr	r3, [r5, #0]
     7ae:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     7b0:	791b      	ldrb	r3, [r3, #4]
     7b2:	42a3      	cmp	r3, r4
     7b4:	d8f6      	bhi.n	7a4 <udc_reset+0x1c>
	udc_num_configuration = 0;
     7b6:	2200      	movs	r2, #0
     7b8:	4b02      	ldr	r3, [pc, #8]	; (7c4 <udc_reset+0x3c>)
     7ba:	701a      	strb	r2, [r3, #0]
	udc_device_status =
     7bc:	3201      	adds	r2, #1
     7be:	4b04      	ldr	r3, [pc, #16]	; (7d0 <udc_reset+0x48>)
     7c0:	801a      	strh	r2, [r3, #0]
}
     7c2:	bd70      	pop	{r4, r5, r6, pc}
     7c4:	200002d8 	.word	0x200002d8
     7c8:	200002dc 	.word	0x200002dc
     7cc:	000006b9 	.word	0x000006b9
     7d0:	200002ce 	.word	0x200002ce

000007d4 <udc_sof_notify>:
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     7d6:	4b0e      	ldr	r3, [pc, #56]	; (810 <udc_sof_notify+0x3c>)
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	2b00      	cmp	r3, #0
     7dc:	d017      	beq.n	80e <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7de:	4b0d      	ldr	r3, [pc, #52]	; (814 <udc_sof_notify+0x40>)
     7e0:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     7e2:	681a      	ldr	r2, [r3, #0]
     7e4:	7912      	ldrb	r2, [r2, #4]
     7e6:	2a00      	cmp	r2, #0
     7e8:	d011      	beq.n	80e <udc_sof_notify+0x3a>
     7ea:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7ec:	4d09      	ldr	r5, [pc, #36]	; (814 <udc_sof_notify+0x40>)
     7ee:	e006      	b.n	7fe <udc_sof_notify+0x2a>
				iface_num++) {
     7f0:	3401      	adds	r4, #1
     7f2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7f4:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     7f6:	681a      	ldr	r2, [r3, #0]
     7f8:	7912      	ldrb	r2, [r2, #4]
     7fa:	42a2      	cmp	r2, r4
     7fc:	d907      	bls.n	80e <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     7fe:	685b      	ldr	r3, [r3, #4]
     800:	00a2      	lsls	r2, r4, #2
     802:	58d3      	ldr	r3, [r2, r3]
     804:	691b      	ldr	r3, [r3, #16]
     806:	2b00      	cmp	r3, #0
     808:	d0f2      	beq.n	7f0 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     80a:	4798      	blx	r3
     80c:	e7f0      	b.n	7f0 <udc_sof_notify+0x1c>
}
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	200002d8 	.word	0x200002d8
     814:	200002dc 	.word	0x200002dc

00000818 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     81a:	4bac      	ldr	r3, [pc, #688]	; (acc <udc_process_setup+0x2b4>)
     81c:	2200      	movs	r2, #0
     81e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     820:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     822:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     824:	781b      	ldrb	r3, [r3, #0]
     826:	b25a      	sxtb	r2, r3
     828:	2a00      	cmp	r2, #0
     82a:	db13      	blt.n	854 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     82c:	2260      	movs	r2, #96	; 0x60
     82e:	421a      	tst	r2, r3
     830:	d100      	bne.n	834 <udc_process_setup+0x1c>
     832:	e0da      	b.n	9ea <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     834:	4ba5      	ldr	r3, [pc, #660]	; (acc <udc_process_setup+0x2b4>)
     836:	781a      	ldrb	r2, [r3, #0]
     838:	231f      	movs	r3, #31
     83a:	4013      	ands	r3, r2
     83c:	2b01      	cmp	r3, #1
     83e:	d100      	bne.n	842 <udc_process_setup+0x2a>
     840:	e176      	b.n	b30 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     842:	4ba2      	ldr	r3, [pc, #648]	; (acc <udc_process_setup+0x2b4>)
     844:	781a      	ldrb	r2, [r3, #0]
     846:	231f      	movs	r3, #31
     848:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     84a:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     84c:	2b02      	cmp	r3, #2
     84e:	d100      	bne.n	852 <udc_process_setup+0x3a>
     850:	e1cc      	b.n	bec <udc_process_setup+0x3d4>
#endif
}
     852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     854:	4a9d      	ldr	r2, [pc, #628]	; (acc <udc_process_setup+0x2b4>)
     856:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     858:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     85a:	2a00      	cmp	r2, #0
     85c:	d0f9      	beq.n	852 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     85e:	2160      	movs	r1, #96	; 0x60
     860:	4219      	tst	r1, r3
     862:	d1e7      	bne.n	834 <udc_process_setup+0x1c>
     864:	211f      	movs	r1, #31
     866:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     868:	d108      	bne.n	87c <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     86a:	4998      	ldr	r1, [pc, #608]	; (acc <udc_process_setup+0x2b4>)
     86c:	7849      	ldrb	r1, [r1, #1]
     86e:	2906      	cmp	r1, #6
     870:	d023      	beq.n	8ba <udc_process_setup+0xa2>
     872:	2908      	cmp	r1, #8
     874:	d100      	bne.n	878 <udc_process_setup+0x60>
     876:	e087      	b.n	988 <udc_process_setup+0x170>
     878:	2900      	cmp	r1, #0
     87a:	d017      	beq.n	8ac <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     87c:	2b01      	cmp	r3, #1
     87e:	d100      	bne.n	882 <udc_process_setup+0x6a>
     880:	e08a      	b.n	998 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     882:	2b02      	cmp	r3, #2
     884:	d1d6      	bne.n	834 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     886:	4b91      	ldr	r3, [pc, #580]	; (acc <udc_process_setup+0x2b4>)
     888:	785b      	ldrb	r3, [r3, #1]
	return false;
     88a:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     88c:	2b00      	cmp	r3, #0
     88e:	d000      	beq.n	892 <udc_process_setup+0x7a>
     890:	e1a8      	b.n	be4 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     892:	2a02      	cmp	r2, #2
     894:	d1d5      	bne.n	842 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     896:	4b8d      	ldr	r3, [pc, #564]	; (acc <udc_process_setup+0x2b4>)
     898:	7918      	ldrb	r0, [r3, #4]
     89a:	4b8d      	ldr	r3, [pc, #564]	; (ad0 <udc_process_setup+0x2b8>)
     89c:	4798      	blx	r3
     89e:	4b8d      	ldr	r3, [pc, #564]	; (ad4 <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     8a0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     8a2:	2102      	movs	r1, #2
     8a4:	0018      	movs	r0, r3
     8a6:	4b8c      	ldr	r3, [pc, #560]	; (ad8 <udc_process_setup+0x2c0>)
     8a8:	4798      	blx	r3
     8aa:	e0ff      	b.n	aac <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     8ac:	2a02      	cmp	r2, #2
     8ae:	d1c8      	bne.n	842 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     8b0:	3102      	adds	r1, #2
     8b2:	488a      	ldr	r0, [pc, #552]	; (adc <udc_process_setup+0x2c4>)
     8b4:	4b88      	ldr	r3, [pc, #544]	; (ad8 <udc_process_setup+0x2c0>)
     8b6:	4798      	blx	r3
     8b8:	e0f8      	b.n	aac <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     8ba:	4b84      	ldr	r3, [pc, #528]	; (acc <udc_process_setup+0x2b4>)
     8bc:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     8be:	0a13      	lsrs	r3, r2, #8
     8c0:	2b02      	cmp	r3, #2
     8c2:	d023      	beq.n	90c <udc_process_setup+0xf4>
     8c4:	b2d9      	uxtb	r1, r3
     8c6:	2902      	cmp	r1, #2
     8c8:	d90f      	bls.n	8ea <udc_process_setup+0xd2>
     8ca:	2b03      	cmp	r3, #3
     8cc:	d034      	beq.n	938 <udc_process_setup+0x120>
     8ce:	2b0f      	cmp	r3, #15
     8d0:	d000      	beq.n	8d4 <udc_process_setup+0xbc>
     8d2:	e184      	b.n	bde <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
     8d4:	4b82      	ldr	r3, [pc, #520]	; (ae0 <udc_process_setup+0x2c8>)
     8d6:	6898      	ldr	r0, [r3, #8]
     8d8:	2800      	cmp	r0, #0
     8da:	d0b2      	beq.n	842 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     8dc:	7883      	ldrb	r3, [r0, #2]
     8de:	78c1      	ldrb	r1, [r0, #3]
     8e0:	0209      	lsls	r1, r1, #8
     8e2:	4319      	orrs	r1, r3
     8e4:	4b7c      	ldr	r3, [pc, #496]	; (ad8 <udc_process_setup+0x2c0>)
     8e6:	4798      	blx	r3
     8e8:	e007      	b.n	8fa <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     8ea:	2b01      	cmp	r3, #1
     8ec:	d000      	beq.n	8f0 <udc_process_setup+0xd8>
     8ee:	e176      	b.n	bde <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
     8f0:	4b7b      	ldr	r3, [pc, #492]	; (ae0 <udc_process_setup+0x2c8>)
     8f2:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     8f4:	7801      	ldrb	r1, [r0, #0]
     8f6:	4b78      	ldr	r3, [pc, #480]	; (ad8 <udc_process_setup+0x2c0>)
     8f8:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     8fa:	4b74      	ldr	r3, [pc, #464]	; (acc <udc_process_setup+0x2b4>)
     8fc:	88da      	ldrh	r2, [r3, #6]
     8fe:	899b      	ldrh	r3, [r3, #12]
     900:	4293      	cmp	r3, r2
     902:	d800      	bhi.n	906 <udc_process_setup+0xee>
     904:	e0d2      	b.n	aac <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     906:	4b71      	ldr	r3, [pc, #452]	; (acc <udc_process_setup+0x2b4>)
     908:	819a      	strh	r2, [r3, #12]
     90a:	e0cf      	b.n	aac <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     90c:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     90e:	4b74      	ldr	r3, [pc, #464]	; (ae0 <udc_process_setup+0x2c8>)
     910:	681b      	ldr	r3, [r3, #0]
     912:	7c5b      	ldrb	r3, [r3, #17]
     914:	4293      	cmp	r3, r2
     916:	d800      	bhi.n	91a <udc_process_setup+0x102>
     918:	e793      	b.n	842 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     91a:	4b71      	ldr	r3, [pc, #452]	; (ae0 <udc_process_setup+0x2c8>)
     91c:	685b      	ldr	r3, [r3, #4]
     91e:	00d2      	lsls	r2, r2, #3
     920:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     922:	7883      	ldrb	r3, [r0, #2]
     924:	78c1      	ldrb	r1, [r0, #3]
     926:	0209      	lsls	r1, r1, #8
     928:	4319      	orrs	r1, r3
     92a:	4b6b      	ldr	r3, [pc, #428]	; (ad8 <udc_process_setup+0x2c0>)
     92c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     92e:	4b67      	ldr	r3, [pc, #412]	; (acc <udc_process_setup+0x2b4>)
     930:	689b      	ldr	r3, [r3, #8]
     932:	2202      	movs	r2, #2
     934:	705a      	strb	r2, [r3, #1]
     936:	e7e0      	b.n	8fa <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     938:	23ff      	movs	r3, #255	; 0xff
     93a:	401a      	ands	r2, r3
     93c:	2a01      	cmp	r2, #1
     93e:	d020      	beq.n	982 <udc_process_setup+0x16a>
     940:	2a00      	cmp	r2, #0
     942:	d019      	beq.n	978 <udc_process_setup+0x160>
     944:	2a02      	cmp	r2, #2
     946:	d100      	bne.n	94a <udc_process_setup+0x132>
     948:	e178      	b.n	c3c <udc_process_setup+0x424>
     94a:	2a03      	cmp	r2, #3
     94c:	d000      	beq.n	950 <udc_process_setup+0x138>
     94e:	e771      	b.n	834 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     950:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
     952:	4c64      	ldr	r4, [pc, #400]	; (ae4 <udc_process_setup+0x2cc>)
     954:	4a64      	ldr	r2, [pc, #400]	; (ae8 <udc_process_setup+0x2d0>)
     956:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     958:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     95a:	5ce0      	ldrb	r0, [r4, r3]
     95c:	8010      	strh	r0, [r2, #0]
     95e:	3301      	adds	r3, #1
     960:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     962:	b2d8      	uxtb	r0, r3
     964:	4281      	cmp	r1, r0
     966:	d8f8      	bhi.n	95a <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     968:	0049      	lsls	r1, r1, #1
     96a:	3102      	adds	r1, #2
     96c:	485e      	ldr	r0, [pc, #376]	; (ae8 <udc_process_setup+0x2d0>)
     96e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     970:	b289      	uxth	r1, r1
     972:	4b59      	ldr	r3, [pc, #356]	; (ad8 <udc_process_setup+0x2c0>)
     974:	4798      	blx	r3
     976:	e7c0      	b.n	8fa <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     978:	2104      	movs	r1, #4
     97a:	485c      	ldr	r0, [pc, #368]	; (aec <udc_process_setup+0x2d4>)
     97c:	4b56      	ldr	r3, [pc, #344]	; (ad8 <udc_process_setup+0x2c0>)
     97e:	4798      	blx	r3
     980:	e7bb      	b.n	8fa <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     982:	4c5b      	ldr	r4, [pc, #364]	; (af0 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     984:	2109      	movs	r1, #9
     986:	e7e5      	b.n	954 <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
     988:	2a01      	cmp	r2, #1
     98a:	d000      	beq.n	98e <udc_process_setup+0x176>
     98c:	e759      	b.n	842 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     98e:	2101      	movs	r1, #1
     990:	4858      	ldr	r0, [pc, #352]	; (af4 <udc_process_setup+0x2dc>)
     992:	4b51      	ldr	r3, [pc, #324]	; (ad8 <udc_process_setup+0x2c0>)
     994:	4798      	blx	r3
     996:	e089      	b.n	aac <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
     998:	494c      	ldr	r1, [pc, #304]	; (acc <udc_process_setup+0x2b4>)
     99a:	7849      	ldrb	r1, [r1, #1]
     99c:	290a      	cmp	r1, #10
     99e:	d000      	beq.n	9a2 <udc_process_setup+0x18a>
     9a0:	e76f      	b.n	882 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     9a2:	2a01      	cmp	r2, #1
     9a4:	d000      	beq.n	9a8 <udc_process_setup+0x190>
     9a6:	e0c3      	b.n	b30 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
     9a8:	4b52      	ldr	r3, [pc, #328]	; (af4 <udc_process_setup+0x2dc>)
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d100      	bne.n	9b2 <udc_process_setup+0x19a>
     9b0:	e0be      	b.n	b30 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     9b2:	4b46      	ldr	r3, [pc, #280]	; (acc <udc_process_setup+0x2b4>)
     9b4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     9b6:	4b50      	ldr	r3, [pc, #320]	; (af8 <udc_process_setup+0x2e0>)
     9b8:	681d      	ldr	r5, [r3, #0]
     9ba:	682b      	ldr	r3, [r5, #0]
     9bc:	791b      	ldrb	r3, [r3, #4]
     9be:	42a3      	cmp	r3, r4
     9c0:	d800      	bhi.n	9c4 <udc_process_setup+0x1ac>
     9c2:	e0b5      	b.n	b30 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
     9c4:	2100      	movs	r1, #0
     9c6:	0020      	movs	r0, r4
     9c8:	4b4c      	ldr	r3, [pc, #304]	; (afc <udc_process_setup+0x2e4>)
     9ca:	4798      	blx	r3
     9cc:	2800      	cmp	r0, #0
     9ce:	d100      	bne.n	9d2 <udc_process_setup+0x1ba>
     9d0:	e730      	b.n	834 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     9d2:	686b      	ldr	r3, [r5, #4]
     9d4:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     9d6:	58e3      	ldr	r3, [r4, r3]
     9d8:	68db      	ldr	r3, [r3, #12]
     9da:	4798      	blx	r3
     9dc:	4b48      	ldr	r3, [pc, #288]	; (b00 <udc_process_setup+0x2e8>)
     9de:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     9e0:	2101      	movs	r1, #1
     9e2:	0018      	movs	r0, r3
     9e4:	4b3c      	ldr	r3, [pc, #240]	; (ad8 <udc_process_setup+0x2c0>)
     9e6:	4798      	blx	r3
     9e8:	e060      	b.n	aac <udc_process_setup+0x294>
     9ea:	221f      	movs	r2, #31
     9ec:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     9ee:	d15f      	bne.n	ab0 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
     9f0:	4a36      	ldr	r2, [pc, #216]	; (acc <udc_process_setup+0x2b4>)
     9f2:	7852      	ldrb	r2, [r2, #1]
     9f4:	2a03      	cmp	r2, #3
     9f6:	d100      	bne.n	9fa <udc_process_setup+0x1e2>
     9f8:	e0f3      	b.n	be2 <udc_process_setup+0x3ca>
     9fa:	b2d1      	uxtb	r1, r2
     9fc:	2903      	cmp	r1, #3
     9fe:	d93b      	bls.n	a78 <udc_process_setup+0x260>
     a00:	2a05      	cmp	r2, #5
     a02:	d04b      	beq.n	a9c <udc_process_setup+0x284>
     a04:	2a09      	cmp	r2, #9
     a06:	d153      	bne.n	ab0 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
     a08:	4b30      	ldr	r3, [pc, #192]	; (acc <udc_process_setup+0x2b4>)
     a0a:	88db      	ldrh	r3, [r3, #6]
     a0c:	2b00      	cmp	r3, #0
     a0e:	d000      	beq.n	a12 <udc_process_setup+0x1fa>
     a10:	e717      	b.n	842 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     a12:	4b3c      	ldr	r3, [pc, #240]	; (b04 <udc_process_setup+0x2ec>)
     a14:	4798      	blx	r3
     a16:	2800      	cmp	r0, #0
     a18:	d100      	bne.n	a1c <udc_process_setup+0x204>
     a1a:	e70b      	b.n	834 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     a1c:	4b2b      	ldr	r3, [pc, #172]	; (acc <udc_process_setup+0x2b4>)
     a1e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     a20:	4b2f      	ldr	r3, [pc, #188]	; (ae0 <udc_process_setup+0x2c8>)
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     a26:	429a      	cmp	r2, r3
     a28:	dd00      	ble.n	a2c <udc_process_setup+0x214>
     a2a:	e703      	b.n	834 <udc_process_setup+0x1c>
	udc_reset();
     a2c:	4b36      	ldr	r3, [pc, #216]	; (b08 <udc_process_setup+0x2f0>)
     a2e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     a30:	4b26      	ldr	r3, [pc, #152]	; (acc <udc_process_setup+0x2b4>)
     a32:	789b      	ldrb	r3, [r3, #2]
     a34:	4a2f      	ldr	r2, [pc, #188]	; (af4 <udc_process_setup+0x2dc>)
     a36:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     a38:	2b00      	cmp	r3, #0
     a3a:	d037      	beq.n	aac <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     a3c:	4a33      	ldr	r2, [pc, #204]	; (b0c <udc_process_setup+0x2f4>)
     a3e:	4694      	mov	ip, r2
     a40:	4463      	add	r3, ip
     a42:	00db      	lsls	r3, r3, #3
     a44:	4a26      	ldr	r2, [pc, #152]	; (ae0 <udc_process_setup+0x2c8>)
     a46:	6852      	ldr	r2, [r2, #4]
     a48:	18d3      	adds	r3, r2, r3
     a4a:	4a2b      	ldr	r2, [pc, #172]	; (af8 <udc_process_setup+0x2e0>)
     a4c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a4e:	681b      	ldr	r3, [r3, #0]
     a50:	791b      	ldrb	r3, [r3, #4]
     a52:	2b00      	cmp	r3, #0
     a54:	d02a      	beq.n	aac <udc_process_setup+0x294>
     a56:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     a58:	4d2d      	ldr	r5, [pc, #180]	; (b10 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a5a:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     a5c:	2100      	movs	r1, #0
     a5e:	0020      	movs	r0, r4
     a60:	47a8      	blx	r5
     a62:	2800      	cmp	r0, #0
     a64:	d100      	bne.n	a68 <udc_process_setup+0x250>
     a66:	e6e5      	b.n	834 <udc_process_setup+0x1c>
			iface_num++) {
     a68:	3401      	adds	r4, #1
     a6a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a6c:	6833      	ldr	r3, [r6, #0]
     a6e:	681b      	ldr	r3, [r3, #0]
     a70:	791b      	ldrb	r3, [r3, #4]
     a72:	42a3      	cmp	r3, r4
     a74:	d8f2      	bhi.n	a5c <udc_process_setup+0x244>
     a76:	e019      	b.n	aac <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
     a78:	2a01      	cmp	r2, #1
     a7a:	d119      	bne.n	ab0 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
     a7c:	4b13      	ldr	r3, [pc, #76]	; (acc <udc_process_setup+0x2b4>)
     a7e:	88db      	ldrh	r3, [r3, #6]
     a80:	2b00      	cmp	r3, #0
     a82:	d000      	beq.n	a86 <udc_process_setup+0x26e>
     a84:	e6dd      	b.n	842 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     a86:	4b11      	ldr	r3, [pc, #68]	; (acc <udc_process_setup+0x2b4>)
     a88:	885b      	ldrh	r3, [r3, #2]
     a8a:	2b01      	cmp	r3, #1
     a8c:	d000      	beq.n	a90 <udc_process_setup+0x278>
     a8e:	e6d8      	b.n	842 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     a90:	4a12      	ldr	r2, [pc, #72]	; (adc <udc_process_setup+0x2c4>)
     a92:	8813      	ldrh	r3, [r2, #0]
     a94:	2102      	movs	r1, #2
     a96:	438b      	bics	r3, r1
     a98:	8013      	strh	r3, [r2, #0]
     a9a:	e007      	b.n	aac <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
     a9c:	4b0b      	ldr	r3, [pc, #44]	; (acc <udc_process_setup+0x2b4>)
     a9e:	88db      	ldrh	r3, [r3, #6]
     aa0:	2b00      	cmp	r3, #0
     aa2:	d000      	beq.n	aa6 <udc_process_setup+0x28e>
     aa4:	e6cd      	b.n	842 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     aa6:	4a1b      	ldr	r2, [pc, #108]	; (b14 <udc_process_setup+0x2fc>)
     aa8:	4b08      	ldr	r3, [pc, #32]	; (acc <udc_process_setup+0x2b4>)
     aaa:	611a      	str	r2, [r3, #16]
			return true;
     aac:	2001      	movs	r0, #1
     aae:	e6d0      	b.n	852 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     ab0:	2b01      	cmp	r3, #1
     ab2:	d031      	beq.n	b18 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     ab4:	2b02      	cmp	r3, #2
     ab6:	d000      	beq.n	aba <udc_process_setup+0x2a2>
     ab8:	e6bc      	b.n	834 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     aba:	4b04      	ldr	r3, [pc, #16]	; (acc <udc_process_setup+0x2b4>)
     abc:	785b      	ldrb	r3, [r3, #1]
     abe:	2b01      	cmp	r3, #1
     ac0:	d06c      	beq.n	b9c <udc_process_setup+0x384>
     ac2:	2b03      	cmp	r3, #3
     ac4:	d100      	bne.n	ac8 <udc_process_setup+0x2b0>
     ac6:	e078      	b.n	bba <udc_process_setup+0x3a2>
	return false;
     ac8:	2000      	movs	r0, #0
     aca:	e08b      	b.n	be4 <udc_process_setup+0x3cc>
     acc:	20002f28 	.word	0x20002f28
     ad0:	00002389 	.word	0x00002389
     ad4:	200002d0 	.word	0x200002d0
     ad8:	00002709 	.word	0x00002709
     adc:	200002ce 	.word	0x200002ce
     ae0:	20000048 	.word	0x20000048
     ae4:	0000a69c 	.word	0x0000a69c
     ae8:	20000094 	.word	0x20000094
     aec:	200000b0 	.word	0x200000b0
     af0:	200000b4 	.word	0x200000b4
     af4:	200002d8 	.word	0x200002d8
     af8:	200002dc 	.word	0x200002dc
     afc:	00000645 	.word	0x00000645
     b00:	200002d4 	.word	0x200002d4
     b04:	000026f9 	.word	0x000026f9
     b08:	00000789 	.word	0x00000789
     b0c:	1fffffff 	.word	0x1fffffff
     b10:	00000725 	.word	0x00000725
     b14:	0000062d 	.word	0x0000062d
			switch (udd_g_ctrlreq.req.bRequest) {
     b18:	4a4a      	ldr	r2, [pc, #296]	; (c44 <udc_process_setup+0x42c>)
     b1a:	7852      	ldrb	r2, [r2, #1]
     b1c:	2a0b      	cmp	r2, #11
     b1e:	d1c9      	bne.n	ab4 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
     b20:	4b48      	ldr	r3, [pc, #288]	; (c44 <udc_process_setup+0x42c>)
     b22:	88db      	ldrh	r3, [r3, #6]
     b24:	2b00      	cmp	r3, #0
     b26:	d103      	bne.n	b30 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
     b28:	4b47      	ldr	r3, [pc, #284]	; (c48 <udc_process_setup+0x430>)
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d127      	bne.n	b80 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
     b30:	4b45      	ldr	r3, [pc, #276]	; (c48 <udc_process_setup+0x430>)
     b32:	781b      	ldrb	r3, [r3, #0]
	return false;
     b34:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     b36:	2b00      	cmp	r3, #0
     b38:	d100      	bne.n	b3c <udc_process_setup+0x324>
     b3a:	e68a      	b.n	852 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b3c:	4b41      	ldr	r3, [pc, #260]	; (c44 <udc_process_setup+0x42c>)
     b3e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b40:	4b42      	ldr	r3, [pc, #264]	; (c4c <udc_process_setup+0x434>)
     b42:	681d      	ldr	r5, [r3, #0]
     b44:	682b      	ldr	r3, [r5, #0]
     b46:	791b      	ldrb	r3, [r3, #4]
     b48:	42a3      	cmp	r3, r4
     b4a:	d800      	bhi.n	b4e <udc_process_setup+0x336>
     b4c:	e681      	b.n	852 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     b4e:	2100      	movs	r1, #0
     b50:	0020      	movs	r0, r4
     b52:	4b3f      	ldr	r3, [pc, #252]	; (c50 <udc_process_setup+0x438>)
     b54:	4798      	blx	r3
     b56:	2800      	cmp	r0, #0
     b58:	d100      	bne.n	b5c <udc_process_setup+0x344>
     b5a:	e672      	b.n	842 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b5c:	686b      	ldr	r3, [r5, #4]
     b5e:	00a2      	lsls	r2, r4, #2
     b60:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b62:	68eb      	ldr	r3, [r5, #12]
     b64:	4798      	blx	r3
     b66:	0001      	movs	r1, r0
     b68:	0020      	movs	r0, r4
     b6a:	4b39      	ldr	r3, [pc, #228]	; (c50 <udc_process_setup+0x438>)
     b6c:	4798      	blx	r3
     b6e:	2800      	cmp	r0, #0
     b70:	d100      	bne.n	b74 <udc_process_setup+0x35c>
     b72:	e666      	b.n	842 <udc_process_setup+0x2a>
	return udi_api->setup();
     b74:	68ab      	ldr	r3, [r5, #8]
     b76:	4798      	blx	r3
		if (udc_req_iface()) {
     b78:	2800      	cmp	r0, #0
     b7a:	d000      	beq.n	b7e <udc_process_setup+0x366>
     b7c:	e669      	b.n	852 <udc_process_setup+0x3a>
     b7e:	e660      	b.n	842 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b80:	4b30      	ldr	r3, [pc, #192]	; (c44 <udc_process_setup+0x42c>)
     b82:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     b84:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     b86:	0028      	movs	r0, r5
     b88:	4b32      	ldr	r3, [pc, #200]	; (c54 <udc_process_setup+0x43c>)
     b8a:	4798      	blx	r3
     b8c:	2800      	cmp	r0, #0
     b8e:	d100      	bne.n	b92 <udc_process_setup+0x37a>
     b90:	e650      	b.n	834 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     b92:	b2e1      	uxtb	r1, r4
     b94:	0028      	movs	r0, r5
     b96:	4b30      	ldr	r3, [pc, #192]	; (c58 <udc_process_setup+0x440>)
     b98:	4798      	blx	r3
     b9a:	e023      	b.n	be4 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
     b9c:	4b29      	ldr	r3, [pc, #164]	; (c44 <udc_process_setup+0x42c>)
     b9e:	88db      	ldrh	r3, [r3, #6]
     ba0:	2b00      	cmp	r3, #0
     ba2:	d000      	beq.n	ba6 <udc_process_setup+0x38e>
     ba4:	e64d      	b.n	842 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ba6:	4b27      	ldr	r3, [pc, #156]	; (c44 <udc_process_setup+0x42c>)
     ba8:	885b      	ldrh	r3, [r3, #2]
     baa:	2b00      	cmp	r3, #0
     bac:	d000      	beq.n	bb0 <udc_process_setup+0x398>
     bae:	e648      	b.n	842 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     bb0:	4b24      	ldr	r3, [pc, #144]	; (c44 <udc_process_setup+0x42c>)
     bb2:	7918      	ldrb	r0, [r3, #4]
     bb4:	4b29      	ldr	r3, [pc, #164]	; (c5c <udc_process_setup+0x444>)
     bb6:	4798      	blx	r3
     bb8:	e014      	b.n	be4 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
     bba:	4b22      	ldr	r3, [pc, #136]	; (c44 <udc_process_setup+0x42c>)
     bbc:	88db      	ldrh	r3, [r3, #6]
     bbe:	2b00      	cmp	r3, #0
     bc0:	d000      	beq.n	bc4 <udc_process_setup+0x3ac>
     bc2:	e63e      	b.n	842 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     bc4:	4b1f      	ldr	r3, [pc, #124]	; (c44 <udc_process_setup+0x42c>)
     bc6:	885b      	ldrh	r3, [r3, #2]
     bc8:	2b00      	cmp	r3, #0
     bca:	d000      	beq.n	bce <udc_process_setup+0x3b6>
     bcc:	e639      	b.n	842 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     bce:	4c1d      	ldr	r4, [pc, #116]	; (c44 <udc_process_setup+0x42c>)
     bd0:	7920      	ldrb	r0, [r4, #4]
     bd2:	4b23      	ldr	r3, [pc, #140]	; (c60 <udc_process_setup+0x448>)
     bd4:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     bd6:	7920      	ldrb	r0, [r4, #4]
     bd8:	4b22      	ldr	r3, [pc, #136]	; (c64 <udc_process_setup+0x44c>)
     bda:	4798      	blx	r3
     bdc:	e002      	b.n	be4 <udc_process_setup+0x3cc>
		return false;
     bde:	2000      	movs	r0, #0
     be0:	e000      	b.n	be4 <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
     be2:	2000      	movs	r0, #0
		if (udc_reqstd()) {
     be4:	2800      	cmp	r0, #0
     be6:	d000      	beq.n	bea <udc_process_setup+0x3d2>
     be8:	e633      	b.n	852 <udc_process_setup+0x3a>
     bea:	e623      	b.n	834 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
     bec:	4b16      	ldr	r3, [pc, #88]	; (c48 <udc_process_setup+0x430>)
     bee:	781b      	ldrb	r3, [r3, #0]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d100      	bne.n	bf6 <udc_process_setup+0x3de>
     bf4:	e62d      	b.n	852 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bf6:	4b15      	ldr	r3, [pc, #84]	; (c4c <udc_process_setup+0x434>)
     bf8:	681b      	ldr	r3, [r3, #0]
     bfa:	681a      	ldr	r2, [r3, #0]
     bfc:	7912      	ldrb	r2, [r2, #4]
     bfe:	2a00      	cmp	r2, #0
     c00:	d01a      	beq.n	c38 <udc_process_setup+0x420>
     c02:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c04:	4e12      	ldr	r6, [pc, #72]	; (c50 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c06:	4f11      	ldr	r7, [pc, #68]	; (c4c <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     c08:	685b      	ldr	r3, [r3, #4]
     c0a:	00aa      	lsls	r2, r5, #2
     c0c:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c0e:	68e3      	ldr	r3, [r4, #12]
     c10:	4798      	blx	r3
     c12:	0001      	movs	r1, r0
     c14:	0028      	movs	r0, r5
     c16:	47b0      	blx	r6
     c18:	2800      	cmp	r0, #0
     c1a:	d100      	bne.n	c1e <udc_process_setup+0x406>
     c1c:	e619      	b.n	852 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     c1e:	68a3      	ldr	r3, [r4, #8]
     c20:	4798      	blx	r3
     c22:	2800      	cmp	r0, #0
     c24:	d000      	beq.n	c28 <udc_process_setup+0x410>
     c26:	e614      	b.n	852 <udc_process_setup+0x3a>
			iface_num++) {
     c28:	3501      	adds	r5, #1
     c2a:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c2c:	683b      	ldr	r3, [r7, #0]
     c2e:	681a      	ldr	r2, [r3, #0]
     c30:	7912      	ldrb	r2, [r2, #4]
     c32:	42aa      	cmp	r2, r5
     c34:	d8e8      	bhi.n	c08 <udc_process_setup+0x3f0>
     c36:	e60c      	b.n	852 <udc_process_setup+0x3a>
	return false;
     c38:	2000      	movs	r0, #0
     c3a:	e60a      	b.n	852 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     c3c:	210d      	movs	r1, #13
		str = udc_string_product_name;
     c3e:	4c0a      	ldr	r4, [pc, #40]	; (c68 <udc_process_setup+0x450>)
     c40:	e688      	b.n	954 <udc_process_setup+0x13c>
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	20002f28 	.word	0x20002f28
     c48:	200002d8 	.word	0x200002d8
     c4c:	200002dc 	.word	0x200002dc
     c50:	00000645 	.word	0x00000645
     c54:	000006b9 	.word	0x000006b9
     c58:	00000725 	.word	0x00000725
     c5c:	000024cd 	.word	0x000024cd
     c60:	000021dd 	.word	0x000021dd
     c64:	0000239d 	.word	0x0000239d
     c68:	200000c0 	.word	0x200000c0

00000c6c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     c6c:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     c6e:	4b26      	ldr	r3, [pc, #152]	; (d08 <DMAC_Handler+0x9c>)
     c70:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     c72:	4926      	ldr	r1, [pc, #152]	; (d0c <DMAC_Handler+0xa0>)
     c74:	8c0b      	ldrh	r3, [r1, #32]
     c76:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     c78:	4013      	ands	r3, r2
     c7a:	009b      	lsls	r3, r3, #2
     c7c:	4824      	ldr	r0, [pc, #144]	; (d10 <DMAC_Handler+0xa4>)
     c7e:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     c80:	7803      	ldrb	r3, [r0, #0]
     c82:	401a      	ands	r2, r3
     c84:	233f      	movs	r3, #63	; 0x3f
     c86:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     c88:	330f      	adds	r3, #15
     c8a:	5cca      	ldrb	r2, [r1, r3]
     c8c:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     c8e:	7803      	ldrb	r3, [r0, #0]
     c90:	011b      	lsls	r3, r3, #4
     c92:	4920      	ldr	r1, [pc, #128]	; (d14 <DMAC_Handler+0xa8>)
     c94:	18c9      	adds	r1, r1, r3
     c96:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     c98:	4c1f      	ldr	r4, [pc, #124]	; (d18 <DMAC_Handler+0xac>)
     c9a:	18e3      	adds	r3, r4, r3
     c9c:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     c9e:	1acb      	subs	r3, r1, r3
     ca0:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     ca2:	07d3      	lsls	r3, r2, #31
     ca4:	d50f      	bpl.n	cc6 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     ca6:	2101      	movs	r1, #1
     ca8:	234e      	movs	r3, #78	; 0x4e
     caa:	4a18      	ldr	r2, [pc, #96]	; (d0c <DMAC_Handler+0xa0>)
     cac:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     cae:	3b3e      	subs	r3, #62	; 0x3e
     cb0:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     cb2:	7c03      	ldrb	r3, [r0, #16]
     cb4:	07db      	lsls	r3, r3, #31
     cb6:	d503      	bpl.n	cc0 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     cb8:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     cba:	2b00      	cmp	r3, #0
     cbc:	d000      	beq.n	cc0 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     cbe:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     cc0:	4b16      	ldr	r3, [pc, #88]	; (d1c <DMAC_Handler+0xb0>)
     cc2:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     cc4:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     cc6:	0793      	lsls	r3, r2, #30
     cc8:	d50d      	bpl.n	ce6 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     cca:	2102      	movs	r1, #2
     ccc:	234e      	movs	r3, #78	; 0x4e
     cce:	4a0f      	ldr	r2, [pc, #60]	; (d0c <DMAC_Handler+0xa0>)
     cd0:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     cd2:	2300      	movs	r3, #0
     cd4:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     cd6:	7c03      	ldrb	r3, [r0, #16]
     cd8:	079b      	lsls	r3, r3, #30
     cda:	d5f1      	bpl.n	cc0 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     cdc:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     cde:	2b00      	cmp	r3, #0
     ce0:	d0ee      	beq.n	cc0 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     ce2:	4798      	blx	r3
     ce4:	e7ec      	b.n	cc0 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     ce6:	0753      	lsls	r3, r2, #29
     ce8:	d5ea      	bpl.n	cc0 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     cea:	2104      	movs	r1, #4
     cec:	234e      	movs	r3, #78	; 0x4e
     cee:	4a07      	ldr	r2, [pc, #28]	; (d0c <DMAC_Handler+0xa0>)
     cf0:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     cf2:	3b48      	subs	r3, #72	; 0x48
     cf4:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     cf6:	7c03      	ldrb	r3, [r0, #16]
     cf8:	075b      	lsls	r3, r3, #29
     cfa:	d5e1      	bpl.n	cc0 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     cfc:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     cfe:	2b00      	cmp	r3, #0
     d00:	d0de      	beq.n	cc0 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     d02:	4798      	blx	r3
     d04:	e7dc      	b.n	cc0 <DMAC_Handler+0x54>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00004205 	.word	0x00004205
     d0c:	41004800 	.word	0x41004800
     d10:	200002e4 	.word	0x200002e4
     d14:	20002c90 	.word	0x20002c90
     d18:	20000300 	.word	0x20000300
     d1c:	00004245 	.word	0x00004245

00000d20 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     d20:	4a04      	ldr	r2, [pc, #16]	; (d34 <_extint_enable+0x14>)
     d22:	7813      	ldrb	r3, [r2, #0]
     d24:	2102      	movs	r1, #2
     d26:	430b      	orrs	r3, r1
     d28:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d2a:	7853      	ldrb	r3, [r2, #1]
     d2c:	b25b      	sxtb	r3, r3
     d2e:	2b00      	cmp	r3, #0
     d30:	dbfb      	blt.n	d2a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     d32:	4770      	bx	lr
     d34:	40001800 	.word	0x40001800

00000d38 <_system_extint_init>:
{
     d38:	b500      	push	{lr}
     d3a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d3c:	4a12      	ldr	r2, [pc, #72]	; (d88 <_system_extint_init+0x50>)
     d3e:	6993      	ldr	r3, [r2, #24]
     d40:	2140      	movs	r1, #64	; 0x40
     d42:	430b      	orrs	r3, r1
     d44:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d46:	a901      	add	r1, sp, #4
     d48:	2300      	movs	r3, #0
     d4a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     d4c:	2005      	movs	r0, #5
     d4e:	4b0f      	ldr	r3, [pc, #60]	; (d8c <_system_extint_init+0x54>)
     d50:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     d52:	2005      	movs	r0, #5
     d54:	4b0e      	ldr	r3, [pc, #56]	; (d90 <_system_extint_init+0x58>)
     d56:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     d58:	4a0e      	ldr	r2, [pc, #56]	; (d94 <_system_extint_init+0x5c>)
     d5a:	7813      	ldrb	r3, [r2, #0]
     d5c:	2101      	movs	r1, #1
     d5e:	430b      	orrs	r3, r1
     d60:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d62:	7853      	ldrb	r3, [r2, #1]
     d64:	b25b      	sxtb	r3, r3
     d66:	2b00      	cmp	r3, #0
     d68:	dbfb      	blt.n	d62 <_system_extint_init+0x2a>
     d6a:	4b0b      	ldr	r3, [pc, #44]	; (d98 <_system_extint_init+0x60>)
     d6c:	0019      	movs	r1, r3
     d6e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     d70:	2200      	movs	r2, #0
     d72:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     d74:	4299      	cmp	r1, r3
     d76:	d1fc      	bne.n	d72 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d78:	2210      	movs	r2, #16
     d7a:	4b08      	ldr	r3, [pc, #32]	; (d9c <_system_extint_init+0x64>)
     d7c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     d7e:	4b08      	ldr	r3, [pc, #32]	; (da0 <_system_extint_init+0x68>)
     d80:	4798      	blx	r3
}
     d82:	b003      	add	sp, #12
     d84:	bd00      	pop	{pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	40000400 	.word	0x40000400
     d8c:	000048ed 	.word	0x000048ed
     d90:	00004861 	.word	0x00004861
     d94:	40001800 	.word	0x40001800
     d98:	20002ce0 	.word	0x20002ce0
     d9c:	e000e100 	.word	0xe000e100
     da0:	00000d21 	.word	0x00000d21

00000da4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     da4:	b5f0      	push	{r4, r5, r6, r7, lr}
     da6:	b083      	sub	sp, #12
     da8:	0005      	movs	r5, r0
     daa:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dac:	a901      	add	r1, sp, #4
     dae:	2300      	movs	r3, #0
     db0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     db2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     db4:	7923      	ldrb	r3, [r4, #4]
     db6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     db8:	7a23      	ldrb	r3, [r4, #8]
     dba:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     dbc:	7820      	ldrb	r0, [r4, #0]
     dbe:	4b15      	ldr	r3, [pc, #84]	; (e14 <extint_chan_set_config+0x70>)
     dc0:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     dc2:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     dc4:	2d1f      	cmp	r5, #31
     dc6:	d800      	bhi.n	dca <extint_chan_set_config+0x26>
		return eics[eic_index];
     dc8:	4813      	ldr	r0, [pc, #76]	; (e18 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     dca:	2207      	movs	r2, #7
     dcc:	402a      	ands	r2, r5
     dce:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     dd0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     dd2:	7aa3      	ldrb	r3, [r4, #10]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d001      	beq.n	ddc <extint_chan_set_config+0x38>
     dd8:	2308      	movs	r3, #8
     dda:	431f      	orrs	r7, r3
     ddc:	08eb      	lsrs	r3, r5, #3
     dde:	009b      	lsls	r3, r3, #2
     de0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     de2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     de4:	260f      	movs	r6, #15
     de6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     de8:	43b1      	bics	r1, r6
			(new_config << config_pos);
     dea:	4097      	lsls	r7, r2
     dec:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     dee:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     df0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     df2:	7a63      	ldrb	r3, [r4, #9]
     df4:	2b00      	cmp	r3, #0
     df6:	d106      	bne.n	e06 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     df8:	6943      	ldr	r3, [r0, #20]
     dfa:	2201      	movs	r2, #1
     dfc:	40aa      	lsls	r2, r5
     dfe:	4393      	bics	r3, r2
     e00:	6143      	str	r3, [r0, #20]
	}
}
     e02:	b003      	add	sp, #12
     e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     e06:	6942      	ldr	r2, [r0, #20]
     e08:	2301      	movs	r3, #1
     e0a:	40ab      	lsls	r3, r5
     e0c:	4313      	orrs	r3, r2
     e0e:	6143      	str	r3, [r0, #20]
     e10:	e7f7      	b.n	e02 <extint_chan_set_config+0x5e>
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	000049e5 	.word	0x000049e5
     e18:	40001800 	.word	0x40001800

00000e1c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e1c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     e1e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e20:	2340      	movs	r3, #64	; 0x40
     e22:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     e24:	4281      	cmp	r1, r0
     e26:	d202      	bcs.n	e2e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     e28:	0018      	movs	r0, r3
     e2a:	bd10      	pop	{r4, pc}
		baud_calculated++;
     e2c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     e2e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     e30:	1c63      	adds	r3, r4, #1
     e32:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     e34:	4288      	cmp	r0, r1
     e36:	d9f9      	bls.n	e2c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e38:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     e3a:	2cff      	cmp	r4, #255	; 0xff
     e3c:	d8f4      	bhi.n	e28 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     e3e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e40:	2300      	movs	r3, #0
     e42:	e7f1      	b.n	e28 <_sercom_get_sync_baud_val+0xc>

00000e44 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e44:	b510      	push	{r4, lr}
     e46:	b082      	sub	sp, #8
     e48:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     e4a:	4b0e      	ldr	r3, [pc, #56]	; (e84 <sercom_set_gclk_generator+0x40>)
     e4c:	781b      	ldrb	r3, [r3, #0]
     e4e:	2b00      	cmp	r3, #0
     e50:	d007      	beq.n	e62 <sercom_set_gclk_generator+0x1e>
     e52:	2900      	cmp	r1, #0
     e54:	d105      	bne.n	e62 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     e56:	4b0b      	ldr	r3, [pc, #44]	; (e84 <sercom_set_gclk_generator+0x40>)
     e58:	785b      	ldrb	r3, [r3, #1]
     e5a:	4283      	cmp	r3, r0
     e5c:	d010      	beq.n	e80 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e5e:	201d      	movs	r0, #29
     e60:	e00c      	b.n	e7c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     e62:	a901      	add	r1, sp, #4
     e64:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e66:	2013      	movs	r0, #19
     e68:	4b07      	ldr	r3, [pc, #28]	; (e88 <sercom_set_gclk_generator+0x44>)
     e6a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e6c:	2013      	movs	r0, #19
     e6e:	4b07      	ldr	r3, [pc, #28]	; (e8c <sercom_set_gclk_generator+0x48>)
     e70:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     e72:	4b04      	ldr	r3, [pc, #16]	; (e84 <sercom_set_gclk_generator+0x40>)
     e74:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e76:	2201      	movs	r2, #1
     e78:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     e7a:	2000      	movs	r0, #0
}
     e7c:	b002      	add	sp, #8
     e7e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     e80:	2000      	movs	r0, #0
     e82:	e7fb      	b.n	e7c <sercom_set_gclk_generator+0x38>
     e84:	20000350 	.word	0x20000350
     e88:	000048ed 	.word	0x000048ed
     e8c:	00004861 	.word	0x00004861

00000e90 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e90:	4b2b      	ldr	r3, [pc, #172]	; (f40 <_sercom_get_default_pad+0xb0>)
     e92:	4298      	cmp	r0, r3
     e94:	d023      	beq.n	ede <_sercom_get_default_pad+0x4e>
     e96:	d90f      	bls.n	eb8 <_sercom_get_default_pad+0x28>
     e98:	4b2a      	ldr	r3, [pc, #168]	; (f44 <_sercom_get_default_pad+0xb4>)
     e9a:	4298      	cmp	r0, r3
     e9c:	d02f      	beq.n	efe <_sercom_get_default_pad+0x6e>
     e9e:	4b2a      	ldr	r3, [pc, #168]	; (f48 <_sercom_get_default_pad+0xb8>)
     ea0:	4298      	cmp	r0, r3
     ea2:	d142      	bne.n	f2a <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ea4:	2901      	cmp	r1, #1
     ea6:	d03a      	beq.n	f1e <_sercom_get_default_pad+0x8e>
     ea8:	2900      	cmp	r1, #0
     eaa:	d046      	beq.n	f3a <_sercom_get_default_pad+0xaa>
     eac:	2902      	cmp	r1, #2
     eae:	d038      	beq.n	f22 <_sercom_get_default_pad+0x92>
     eb0:	2903      	cmp	r1, #3
     eb2:	d038      	beq.n	f26 <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     eb4:	2000      	movs	r0, #0
     eb6:	e039      	b.n	f2c <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     eb8:	4b24      	ldr	r3, [pc, #144]	; (f4c <_sercom_get_default_pad+0xbc>)
     eba:	4298      	cmp	r0, r3
     ebc:	d135      	bne.n	f2a <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ebe:	2901      	cmp	r1, #1
     ec0:	d007      	beq.n	ed2 <_sercom_get_default_pad+0x42>
     ec2:	2900      	cmp	r1, #0
     ec4:	d033      	beq.n	f2e <_sercom_get_default_pad+0x9e>
     ec6:	2902      	cmp	r1, #2
     ec8:	d005      	beq.n	ed6 <_sercom_get_default_pad+0x46>
     eca:	2903      	cmp	r1, #3
     ecc:	d005      	beq.n	eda <_sercom_get_default_pad+0x4a>
	return 0;
     ece:	2000      	movs	r0, #0
     ed0:	e02c      	b.n	f2c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ed2:	481f      	ldr	r0, [pc, #124]	; (f50 <_sercom_get_default_pad+0xc0>)
     ed4:	e02a      	b.n	f2c <_sercom_get_default_pad+0x9c>
     ed6:	481f      	ldr	r0, [pc, #124]	; (f54 <_sercom_get_default_pad+0xc4>)
     ed8:	e028      	b.n	f2c <_sercom_get_default_pad+0x9c>
     eda:	481f      	ldr	r0, [pc, #124]	; (f58 <_sercom_get_default_pad+0xc8>)
     edc:	e026      	b.n	f2c <_sercom_get_default_pad+0x9c>
     ede:	2901      	cmp	r1, #1
     ee0:	d007      	beq.n	ef2 <_sercom_get_default_pad+0x62>
     ee2:	2900      	cmp	r1, #0
     ee4:	d025      	beq.n	f32 <_sercom_get_default_pad+0xa2>
     ee6:	2902      	cmp	r1, #2
     ee8:	d005      	beq.n	ef6 <_sercom_get_default_pad+0x66>
     eea:	2903      	cmp	r1, #3
     eec:	d005      	beq.n	efa <_sercom_get_default_pad+0x6a>
	return 0;
     eee:	2000      	movs	r0, #0
     ef0:	e01c      	b.n	f2c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ef2:	481a      	ldr	r0, [pc, #104]	; (f5c <_sercom_get_default_pad+0xcc>)
     ef4:	e01a      	b.n	f2c <_sercom_get_default_pad+0x9c>
     ef6:	481a      	ldr	r0, [pc, #104]	; (f60 <_sercom_get_default_pad+0xd0>)
     ef8:	e018      	b.n	f2c <_sercom_get_default_pad+0x9c>
     efa:	481a      	ldr	r0, [pc, #104]	; (f64 <_sercom_get_default_pad+0xd4>)
     efc:	e016      	b.n	f2c <_sercom_get_default_pad+0x9c>
     efe:	2901      	cmp	r1, #1
     f00:	d007      	beq.n	f12 <_sercom_get_default_pad+0x82>
     f02:	2900      	cmp	r1, #0
     f04:	d017      	beq.n	f36 <_sercom_get_default_pad+0xa6>
     f06:	2902      	cmp	r1, #2
     f08:	d005      	beq.n	f16 <_sercom_get_default_pad+0x86>
     f0a:	2903      	cmp	r1, #3
     f0c:	d005      	beq.n	f1a <_sercom_get_default_pad+0x8a>
	return 0;
     f0e:	2000      	movs	r0, #0
     f10:	e00c      	b.n	f2c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f12:	4815      	ldr	r0, [pc, #84]	; (f68 <_sercom_get_default_pad+0xd8>)
     f14:	e00a      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f16:	4815      	ldr	r0, [pc, #84]	; (f6c <_sercom_get_default_pad+0xdc>)
     f18:	e008      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f1a:	4815      	ldr	r0, [pc, #84]	; (f70 <_sercom_get_default_pad+0xe0>)
     f1c:	e006      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f1e:	4815      	ldr	r0, [pc, #84]	; (f74 <_sercom_get_default_pad+0xe4>)
     f20:	e004      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f22:	4815      	ldr	r0, [pc, #84]	; (f78 <_sercom_get_default_pad+0xe8>)
     f24:	e002      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f26:	4815      	ldr	r0, [pc, #84]	; (f7c <_sercom_get_default_pad+0xec>)
     f28:	e000      	b.n	f2c <_sercom_get_default_pad+0x9c>
	return 0;
     f2a:	2000      	movs	r0, #0
}
     f2c:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f2e:	4814      	ldr	r0, [pc, #80]	; (f80 <_sercom_get_default_pad+0xf0>)
     f30:	e7fc      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f32:	2003      	movs	r0, #3
     f34:	e7fa      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f36:	4813      	ldr	r0, [pc, #76]	; (f84 <_sercom_get_default_pad+0xf4>)
     f38:	e7f8      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f3a:	4813      	ldr	r0, [pc, #76]	; (f88 <_sercom_get_default_pad+0xf8>)
     f3c:	e7f6      	b.n	f2c <_sercom_get_default_pad+0x9c>
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	42000c00 	.word	0x42000c00
     f44:	42001000 	.word	0x42001000
     f48:	42001400 	.word	0x42001400
     f4c:	42000800 	.word	0x42000800
     f50:	00050003 	.word	0x00050003
     f54:	00060003 	.word	0x00060003
     f58:	00070003 	.word	0x00070003
     f5c:	00010003 	.word	0x00010003
     f60:	001e0003 	.word	0x001e0003
     f64:	001f0003 	.word	0x001f0003
     f68:	00090003 	.word	0x00090003
     f6c:	000a0003 	.word	0x000a0003
     f70:	000b0003 	.word	0x000b0003
     f74:	00110003 	.word	0x00110003
     f78:	00120003 	.word	0x00120003
     f7c:	00130003 	.word	0x00130003
     f80:	00040003 	.word	0x00040003
     f84:	00080003 	.word	0x00080003
     f88:	00100003 	.word	0x00100003

00000f8c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f8c:	b530      	push	{r4, r5, lr}
     f8e:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f90:	466a      	mov	r2, sp
     f92:	4b0f      	ldr	r3, [pc, #60]	; (fd0 <_sercom_get_sercom_inst_index+0x44>)
     f94:	cb32      	ldmia	r3!, {r1, r4, r5}
     f96:	c232      	stmia	r2!, {r1, r4, r5}
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f9c:	0003      	movs	r3, r0
     f9e:	9a00      	ldr	r2, [sp, #0]
     fa0:	4282      	cmp	r2, r0
     fa2:	d011      	beq.n	fc8 <_sercom_get_sercom_inst_index+0x3c>
     fa4:	9a01      	ldr	r2, [sp, #4]
     fa6:	4282      	cmp	r2, r0
     fa8:	d00a      	beq.n	fc0 <_sercom_get_sercom_inst_index+0x34>
     faa:	9a02      	ldr	r2, [sp, #8]
     fac:	4282      	cmp	r2, r0
     fae:	d009      	beq.n	fc4 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     fb0:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fb2:	9a03      	ldr	r2, [sp, #12]
     fb4:	429a      	cmp	r2, r3
     fb6:	d001      	beq.n	fbc <_sercom_get_sercom_inst_index+0x30>
}
     fb8:	b005      	add	sp, #20
     fba:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fbc:	3003      	adds	r0, #3
     fbe:	e004      	b.n	fca <_sercom_get_sercom_inst_index+0x3e>
     fc0:	2001      	movs	r0, #1
     fc2:	e002      	b.n	fca <_sercom_get_sercom_inst_index+0x3e>
     fc4:	2002      	movs	r0, #2
     fc6:	e000      	b.n	fca <_sercom_get_sercom_inst_index+0x3e>
     fc8:	2000      	movs	r0, #0
			return i;
     fca:	b2c0      	uxtb	r0, r0
     fcc:	e7f4      	b.n	fb8 <_sercom_get_sercom_inst_index+0x2c>
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	0000a6ac 	.word	0x0000a6ac

00000fd4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     fd4:	4770      	bx	lr
	...

00000fd8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fd8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     fda:	4b0b      	ldr	r3, [pc, #44]	; (1008 <_sercom_set_handler+0x30>)
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	2b00      	cmp	r3, #0
     fe0:	d10e      	bne.n	1000 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fe2:	4c0a      	ldr	r4, [pc, #40]	; (100c <_sercom_set_handler+0x34>)
     fe4:	4d0a      	ldr	r5, [pc, #40]	; (1010 <_sercom_set_handler+0x38>)
     fe6:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     fe8:	4b0a      	ldr	r3, [pc, #40]	; (1014 <_sercom_set_handler+0x3c>)
     fea:	2200      	movs	r2, #0
     fec:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fee:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     ff0:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ff2:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     ff4:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ff6:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
     ff8:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
     ffa:	3201      	adds	r2, #1
     ffc:	4b02      	ldr	r3, [pc, #8]	; (1008 <_sercom_set_handler+0x30>)
     ffe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1000:	0080      	lsls	r0, r0, #2
    1002:	4b02      	ldr	r3, [pc, #8]	; (100c <_sercom_set_handler+0x34>)
    1004:	50c1      	str	r1, [r0, r3]
}
    1006:	bd30      	pop	{r4, r5, pc}
    1008:	20000352 	.word	0x20000352
    100c:	20000354 	.word	0x20000354
    1010:	00000fd5 	.word	0x00000fd5
    1014:	20002d20 	.word	0x20002d20

00001018 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1018:	b510      	push	{r4, lr}
    101a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    101c:	ac01      	add	r4, sp, #4
    101e:	2309      	movs	r3, #9
    1020:	7023      	strb	r3, [r4, #0]
    1022:	3301      	adds	r3, #1
    1024:	7063      	strb	r3, [r4, #1]
    1026:	3301      	adds	r3, #1
    1028:	70a3      	strb	r3, [r4, #2]
    102a:	3301      	adds	r3, #1
    102c:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <_sercom_get_interrupt_vector+0x20>)
    1030:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1032:	5620      	ldrsb	r0, [r4, r0]
}
    1034:	b002      	add	sp, #8
    1036:	bd10      	pop	{r4, pc}
    1038:	00000f8d 	.word	0x00000f8d

0000103c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    103c:	b510      	push	{r4, lr}
    103e:	4b02      	ldr	r3, [pc, #8]	; (1048 <SERCOM0_Handler+0xc>)
    1040:	681b      	ldr	r3, [r3, #0]
    1042:	2000      	movs	r0, #0
    1044:	4798      	blx	r3
    1046:	bd10      	pop	{r4, pc}
    1048:	20000354 	.word	0x20000354

0000104c <SERCOM1_Handler>:
    104c:	b510      	push	{r4, lr}
    104e:	4b02      	ldr	r3, [pc, #8]	; (1058 <SERCOM1_Handler+0xc>)
    1050:	685b      	ldr	r3, [r3, #4]
    1052:	2001      	movs	r0, #1
    1054:	4798      	blx	r3
    1056:	bd10      	pop	{r4, pc}
    1058:	20000354 	.word	0x20000354

0000105c <SERCOM2_Handler>:
    105c:	b510      	push	{r4, lr}
    105e:	4b02      	ldr	r3, [pc, #8]	; (1068 <SERCOM2_Handler+0xc>)
    1060:	689b      	ldr	r3, [r3, #8]
    1062:	2002      	movs	r0, #2
    1064:	4798      	blx	r3
    1066:	bd10      	pop	{r4, pc}
    1068:	20000354 	.word	0x20000354

0000106c <SERCOM3_Handler>:
    106c:	b510      	push	{r4, lr}
    106e:	4b02      	ldr	r3, [pc, #8]	; (1078 <SERCOM3_Handler+0xc>)
    1070:	68db      	ldr	r3, [r3, #12]
    1072:	2003      	movs	r0, #3
    1074:	4798      	blx	r3
    1076:	bd10      	pop	{r4, pc}
    1078:	20000354 	.word	0x20000354

0000107c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    107c:	b570      	push	{r4, r5, r6, lr}
    107e:	b082      	sub	sp, #8
    1080:	0005      	movs	r5, r0
    1082:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1084:	2200      	movs	r2, #0
    1086:	466b      	mov	r3, sp
    1088:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    108a:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    108c:	0030      	movs	r0, r6
    108e:	4b24      	ldr	r3, [pc, #144]	; (1120 <spi_set_baudrate+0xa4>)
    1090:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1092:	231f      	movs	r3, #31
    1094:	4018      	ands	r0, r3
    1096:	3b1e      	subs	r3, #30
    1098:	4083      	lsls	r3, r0
    109a:	2280      	movs	r2, #128	; 0x80
    109c:	4921      	ldr	r1, [pc, #132]	; (1124 <spi_set_baudrate+0xa8>)
    109e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10a0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    10a2:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    10a4:	2b00      	cmp	r3, #0
    10a6:	d1fc      	bne.n	10a2 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    10a8:	338f      	adds	r3, #143	; 0x8f
    10aa:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    10ac:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    10ae:	6833      	ldr	r3, [r6, #0]
    10b0:	2202      	movs	r2, #2
    10b2:	4393      	bics	r3, r2
    10b4:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10b6:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    10b8:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    10ba:	2b00      	cmp	r3, #0
    10bc:	d1fc      	bne.n	10b8 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10be:	4b1a      	ldr	r3, [pc, #104]	; (1128 <spi_set_baudrate+0xac>)
    10c0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10c2:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    10c4:	b2c0      	uxtb	r0, r0
    10c6:	4b19      	ldr	r3, [pc, #100]	; (112c <spi_set_baudrate+0xb0>)
    10c8:	4798      	blx	r3
    10ca:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    10cc:	466b      	mov	r3, sp
    10ce:	1d9a      	adds	r2, r3, #6
    10d0:	0020      	movs	r0, r4
    10d2:	4b17      	ldr	r3, [pc, #92]	; (1130 <spi_set_baudrate+0xb4>)
    10d4:	4798      	blx	r3
    10d6:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    10d8:	d003      	beq.n	10e2 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    10da:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    10dc:	0020      	movs	r0, r4
    10de:	b002      	add	sp, #8
    10e0:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    10e2:	466b      	mov	r3, sp
    10e4:	3306      	adds	r3, #6
    10e6:	781b      	ldrb	r3, [r3, #0]
    10e8:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10ea:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    10ec:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    10ee:	2b00      	cmp	r3, #0
    10f0:	d1fc      	bne.n	10ec <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    10f2:	0030      	movs	r0, r6
    10f4:	4b0a      	ldr	r3, [pc, #40]	; (1120 <spi_set_baudrate+0xa4>)
    10f6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    10f8:	231f      	movs	r3, #31
    10fa:	4018      	ands	r0, r3
    10fc:	3b1e      	subs	r3, #30
    10fe:	4083      	lsls	r3, r0
    1100:	4a08      	ldr	r2, [pc, #32]	; (1124 <spi_set_baudrate+0xa8>)
    1102:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1104:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1106:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1108:	2b00      	cmp	r3, #0
    110a:	d1fc      	bne.n	1106 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    110c:	6833      	ldr	r3, [r6, #0]
    110e:	2202      	movs	r2, #2
    1110:	4313      	orrs	r3, r2
    1112:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1114:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1116:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1118:	2b00      	cmp	r3, #0
    111a:	d1fc      	bne.n	1116 <spi_set_baudrate+0x9a>
    111c:	e7de      	b.n	10dc <spi_set_baudrate+0x60>
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	00001019 	.word	0x00001019
    1124:	e000e100 	.word	0xe000e100
    1128:	00000f8d 	.word	0x00000f8d
    112c:	00004909 	.word	0x00004909
    1130:	00000e1d 	.word	0x00000e1d

00001134 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1134:	b5f0      	push	{r4, r5, r6, r7, lr}
    1136:	b08b      	sub	sp, #44	; 0x2c
    1138:	0005      	movs	r5, r0
    113a:	000c      	movs	r4, r1
    113c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    113e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1140:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1142:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1144:	079b      	lsls	r3, r3, #30
    1146:	d501      	bpl.n	114c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1148:	b00b      	add	sp, #44	; 0x2c
    114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    114c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    114e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1150:	07db      	lsls	r3, r3, #31
    1152:	d4f9      	bmi.n	1148 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1154:	0008      	movs	r0, r1
    1156:	4b6f      	ldr	r3, [pc, #444]	; (1314 <spi_init+0x1e0>)
    1158:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    115a:	4a6f      	ldr	r2, [pc, #444]	; (1318 <spi_init+0x1e4>)
    115c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    115e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1160:	2301      	movs	r3, #1
    1162:	40bb      	lsls	r3, r7
    1164:	430b      	orrs	r3, r1
    1166:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1168:	a909      	add	r1, sp, #36	; 0x24
    116a:	2724      	movs	r7, #36	; 0x24
    116c:	5df3      	ldrb	r3, [r6, r7]
    116e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1170:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1172:	b2c3      	uxtb	r3, r0
    1174:	9301      	str	r3, [sp, #4]
    1176:	0018      	movs	r0, r3
    1178:	4b68      	ldr	r3, [pc, #416]	; (131c <spi_init+0x1e8>)
    117a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    117c:	9801      	ldr	r0, [sp, #4]
    117e:	4b68      	ldr	r3, [pc, #416]	; (1320 <spi_init+0x1ec>)
    1180:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1182:	5df0      	ldrb	r0, [r6, r7]
    1184:	2100      	movs	r1, #0
    1186:	4b67      	ldr	r3, [pc, #412]	; (1324 <spi_init+0x1f0>)
    1188:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    118a:	7833      	ldrb	r3, [r6, #0]
    118c:	2b01      	cmp	r3, #1
    118e:	d03f      	beq.n	1210 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    1190:	7833      	ldrb	r3, [r6, #0]
    1192:	2b00      	cmp	r3, #0
    1194:	d103      	bne.n	119e <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1196:	6823      	ldr	r3, [r4, #0]
    1198:	2208      	movs	r2, #8
    119a:	4313      	orrs	r3, r2
    119c:	6023      	str	r3, [r4, #0]
    119e:	002b      	movs	r3, r5
    11a0:	330c      	adds	r3, #12
    11a2:	0029      	movs	r1, r5
    11a4:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    11a6:	2200      	movs	r2, #0
    11a8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    11aa:	428b      	cmp	r3, r1
    11ac:	d1fc      	bne.n	11a8 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    11ae:	2300      	movs	r3, #0
    11b0:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    11b2:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    11b4:	2400      	movs	r4, #0
    11b6:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    11b8:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    11ba:	3336      	adds	r3, #54	; 0x36
    11bc:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    11be:	3301      	adds	r3, #1
    11c0:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    11c2:	3301      	adds	r3, #1
    11c4:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    11c6:	3b35      	subs	r3, #53	; 0x35
    11c8:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    11ca:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    11cc:	6828      	ldr	r0, [r5, #0]
    11ce:	4b51      	ldr	r3, [pc, #324]	; (1314 <spi_init+0x1e0>)
    11d0:	4798      	blx	r3
    11d2:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    11d4:	4954      	ldr	r1, [pc, #336]	; (1328 <spi_init+0x1f4>)
    11d6:	4b55      	ldr	r3, [pc, #340]	; (132c <spi_init+0x1f8>)
    11d8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    11da:	00bf      	lsls	r7, r7, #2
    11dc:	4b54      	ldr	r3, [pc, #336]	; (1330 <spi_init+0x1fc>)
    11de:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    11e0:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11e2:	ab04      	add	r3, sp, #16
    11e4:	2280      	movs	r2, #128	; 0x80
    11e6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11e8:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11ea:	3a7f      	subs	r2, #127	; 0x7f
    11ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    11ee:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    11f0:	7833      	ldrb	r3, [r6, #0]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d102      	bne.n	11fc <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11f6:	2200      	movs	r2, #0
    11f8:	ab04      	add	r3, sp, #16
    11fa:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    11fc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    11fe:	9305      	str	r3, [sp, #20]
    1200:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1202:	9306      	str	r3, [sp, #24]
    1204:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1206:	9307      	str	r3, [sp, #28]
    1208:	6b73      	ldr	r3, [r6, #52]	; 0x34
    120a:	9308      	str	r3, [sp, #32]
    120c:	2400      	movs	r4, #0
    120e:	e00b      	b.n	1228 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1210:	6823      	ldr	r3, [r4, #0]
    1212:	220c      	movs	r2, #12
    1214:	4313      	orrs	r3, r2
    1216:	6023      	str	r3, [r4, #0]
    1218:	e7ba      	b.n	1190 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    121a:	0038      	movs	r0, r7
    121c:	4b45      	ldr	r3, [pc, #276]	; (1334 <spi_init+0x200>)
    121e:	4798      	blx	r3
    1220:	e00a      	b.n	1238 <spi_init+0x104>
    1222:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1224:	2c04      	cmp	r4, #4
    1226:	d010      	beq.n	124a <spi_init+0x116>
    1228:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    122a:	00a3      	lsls	r3, r4, #2
    122c:	aa02      	add	r2, sp, #8
    122e:	200c      	movs	r0, #12
    1230:	1812      	adds	r2, r2, r0
    1232:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1234:	2800      	cmp	r0, #0
    1236:	d0f0      	beq.n	121a <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1238:	1c43      	adds	r3, r0, #1
    123a:	d0f2      	beq.n	1222 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    123c:	a904      	add	r1, sp, #16
    123e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1240:	0c00      	lsrs	r0, r0, #16
    1242:	b2c0      	uxtb	r0, r0
    1244:	4b3c      	ldr	r3, [pc, #240]	; (1338 <spi_init+0x204>)
    1246:	4798      	blx	r3
    1248:	e7eb      	b.n	1222 <spi_init+0xee>
	module->mode             = config->mode;
    124a:	7833      	ldrb	r3, [r6, #0]
    124c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    124e:	7c33      	ldrb	r3, [r6, #16]
    1250:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1252:	7cb3      	ldrb	r3, [r6, #18]
    1254:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1256:	7d33      	ldrb	r3, [r6, #20]
    1258:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    125a:	2200      	movs	r2, #0
    125c:	ab02      	add	r3, sp, #8
    125e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1260:	7833      	ldrb	r3, [r6, #0]
    1262:	2b01      	cmp	r3, #1
    1264:	d012      	beq.n	128c <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    1266:	7833      	ldrb	r3, [r6, #0]
    1268:	2b00      	cmp	r3, #0
    126a:	d126      	bne.n	12ba <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    126c:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    126e:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    1270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1272:	7ff1      	ldrb	r1, [r6, #31]
    1274:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1276:	7fb4      	ldrb	r4, [r6, #30]
    1278:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    127a:	4319      	orrs	r1, r3
    127c:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    127e:	2320      	movs	r3, #32
    1280:	5cf3      	ldrb	r3, [r6, r3]
    1282:	2b00      	cmp	r3, #0
    1284:	d01b      	beq.n	12be <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1286:	2340      	movs	r3, #64	; 0x40
    1288:	431a      	orrs	r2, r3
    128a:	e018      	b.n	12be <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    128c:	6828      	ldr	r0, [r5, #0]
    128e:	4b21      	ldr	r3, [pc, #132]	; (1314 <spi_init+0x1e0>)
    1290:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1292:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1294:	b2c0      	uxtb	r0, r0
    1296:	4b29      	ldr	r3, [pc, #164]	; (133c <spi_init+0x208>)
    1298:	4798      	blx	r3
    129a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    129c:	ab02      	add	r3, sp, #8
    129e:	1d9a      	adds	r2, r3, #6
    12a0:	69b0      	ldr	r0, [r6, #24]
    12a2:	4b27      	ldr	r3, [pc, #156]	; (1340 <spi_init+0x20c>)
    12a4:	4798      	blx	r3
    12a6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    12a8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    12aa:	2b00      	cmp	r3, #0
    12ac:	d000      	beq.n	12b0 <spi_init+0x17c>
    12ae:	e74b      	b.n	1148 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    12b0:	ab02      	add	r3, sp, #8
    12b2:	3306      	adds	r3, #6
    12b4:	781b      	ldrb	r3, [r3, #0]
    12b6:	733b      	strb	r3, [r7, #12]
    12b8:	e7d5      	b.n	1266 <spi_init+0x132>
	uint32_t ctrlb = 0;
    12ba:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    12bc:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    12be:	6873      	ldr	r3, [r6, #4]
    12c0:	68b1      	ldr	r1, [r6, #8]
    12c2:	430b      	orrs	r3, r1
    12c4:	68f1      	ldr	r1, [r6, #12]
    12c6:	430b      	orrs	r3, r1
    12c8:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    12ca:	7c31      	ldrb	r1, [r6, #16]
    12cc:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    12ce:	7c71      	ldrb	r1, [r6, #17]
    12d0:	2900      	cmp	r1, #0
    12d2:	d103      	bne.n	12dc <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12d4:	491b      	ldr	r1, [pc, #108]	; (1344 <spi_init+0x210>)
    12d6:	7889      	ldrb	r1, [r1, #2]
    12d8:	0789      	lsls	r1, r1, #30
    12da:	d501      	bpl.n	12e0 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12dc:	2180      	movs	r1, #128	; 0x80
    12de:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    12e0:	7cb1      	ldrb	r1, [r6, #18]
    12e2:	2900      	cmp	r1, #0
    12e4:	d002      	beq.n	12ec <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12e6:	2180      	movs	r1, #128	; 0x80
    12e8:	0289      	lsls	r1, r1, #10
    12ea:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    12ec:	7cf1      	ldrb	r1, [r6, #19]
    12ee:	2900      	cmp	r1, #0
    12f0:	d002      	beq.n	12f8 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12f2:	2180      	movs	r1, #128	; 0x80
    12f4:	0089      	lsls	r1, r1, #2
    12f6:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    12f8:	7d31      	ldrb	r1, [r6, #20]
    12fa:	2900      	cmp	r1, #0
    12fc:	d002      	beq.n	1304 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    12fe:	2180      	movs	r1, #128	; 0x80
    1300:	0189      	lsls	r1, r1, #6
    1302:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1304:	6839      	ldr	r1, [r7, #0]
    1306:	430b      	orrs	r3, r1
    1308:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	431a      	orrs	r2, r3
    130e:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1310:	2000      	movs	r0, #0
    1312:	e719      	b.n	1148 <spi_init+0x14>
    1314:	00000f8d 	.word	0x00000f8d
    1318:	40000400 	.word	0x40000400
    131c:	000048ed 	.word	0x000048ed
    1320:	00004861 	.word	0x00004861
    1324:	00000e45 	.word	0x00000e45
    1328:	00001601 	.word	0x00001601
    132c:	00000fd9 	.word	0x00000fd9
    1330:	20002d20 	.word	0x20002d20
    1334:	00000e91 	.word	0x00000e91
    1338:	000049e5 	.word	0x000049e5
    133c:	00004909 	.word	0x00004909
    1340:	00000e1d 	.word	0x00000e1d
    1344:	41002000 	.word	0x41002000

00001348 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1348:	b5f0      	push	{r4, r5, r6, r7, lr}
    134a:	46de      	mov	lr, fp
    134c:	4657      	mov	r7, sl
    134e:	464e      	mov	r6, r9
    1350:	4645      	mov	r5, r8
    1352:	b5e0      	push	{r5, r6, r7, lr}
    1354:	b085      	sub	sp, #20
    1356:	4688      	mov	r8, r1
    1358:	9203      	str	r2, [sp, #12]
    135a:	4699      	mov	r9, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    135c:	2338      	movs	r3, #56	; 0x38
    135e:	5cc3      	ldrb	r3, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1360:	2405      	movs	r4, #5
	if (module->status == STATUS_BUSY) {
    1362:	2b05      	cmp	r3, #5
    1364:	d003      	beq.n	136e <spi_transceive_buffer_wait+0x26>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1366:	3412      	adds	r4, #18
	if (length == 0) {
    1368:	464b      	mov	r3, r9
    136a:	2b00      	cmp	r3, #0
    136c:	d107      	bne.n	137e <spi_transceive_buffer_wait+0x36>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    136e:	0020      	movs	r0, r4
    1370:	b005      	add	sp, #20
    1372:	bc3c      	pop	{r2, r3, r4, r5}
    1374:	4690      	mov	r8, r2
    1376:	4699      	mov	r9, r3
    1378:	46a2      	mov	sl, r4
    137a:	46ab      	mov	fp, r5
    137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    137e:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
    1380:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    1382:	2b00      	cmp	r3, #0
    1384:	d0f3      	beq.n	136e <spi_transceive_buffer_wait+0x26>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1386:	7943      	ldrb	r3, [r0, #5]
    1388:	2b00      	cmp	r3, #0
    138a:	d103      	bne.n	1394 <spi_transceive_buffer_wait+0x4c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    138c:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    138e:	7e1a      	ldrb	r2, [r3, #24]
    1390:	0792      	lsls	r2, r2, #30
    1392:	d407      	bmi.n	13a4 <spi_transceive_buffer_wait+0x5c>
	while (length--) {
    1394:	464b      	mov	r3, r9
    1396:	1e59      	subs	r1, r3, #1
    1398:	b289      	uxth	r1, r1
    139a:	2300      	movs	r3, #0
    139c:	469a      	mov	sl, r3
				if (spi_is_ready_to_write(module)) {
    139e:	2201      	movs	r2, #1
				if (spi_is_ready_to_read(module)) {
    13a0:	2704      	movs	r7, #4
    13a2:	e075      	b.n	1490 <spi_transceive_buffer_wait+0x148>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13a4:	2202      	movs	r2, #2
    13a6:	761a      	strb	r2, [r3, #24]
    13a8:	e7f4      	b.n	1394 <spi_transceive_buffer_wait+0x4c>
    13aa:	2302      	movs	r3, #2
    13ac:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    13ae:	2404      	movs	r4, #4
    13b0:	e7dd      	b.n	136e <spi_transceive_buffer_wait+0x26>
			data_to_send |= (tx_data[tx_pos++] << 8);
    13b2:	3302      	adds	r3, #2
    13b4:	b29b      	uxth	r3, r3
    13b6:	4644      	mov	r4, r8
    13b8:	5da6      	ldrb	r6, [r4, r6]
    13ba:	0236      	lsls	r6, r6, #8
    13bc:	465c      	mov	r4, fp
    13be:	4334      	orrs	r4, r6
    13c0:	e08f      	b.n	14e2 <spi_transceive_buffer_wait+0x19a>
						data_to_send |= (tx_data[tx_pos++] << 8);
    13c2:	3302      	adds	r3, #2
    13c4:	b29b      	uxth	r3, r3
    13c6:	4641      	mov	r1, r8
    13c8:	4666      	mov	r6, ip
    13ca:	5d89      	ldrb	r1, [r1, r6]
    13cc:	0209      	lsls	r1, r1, #8
    13ce:	9e02      	ldr	r6, [sp, #8]
    13d0:	430e      	orrs	r6, r1
    13d2:	e01a      	b.n	140a <spi_transceive_buffer_wait+0xc2>
					length--;
    13d4:	9901      	ldr	r1, [sp, #4]
    13d6:	3901      	subs	r1, #1
    13d8:	b289      	uxth	r1, r1
    13da:	9101      	str	r1, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13dc:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13de:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_read(module)) {
    13e0:	423e      	tst	r6, r7
    13e2:	d119      	bne.n	1418 <spi_transceive_buffer_wait+0xd0>
    13e4:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    13e6:	2d00      	cmp	r5, #0
    13e8:	d016      	beq.n	1418 <spi_transceive_buffer_wait+0xd0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13ea:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13ec:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_write(module)) {
    13ee:	4216      	tst	r6, r2
    13f0:	d0f4      	beq.n	13dc <spi_transceive_buffer_wait+0x94>
					data_to_send = tx_data[tx_pos++];
    13f2:	1c5e      	adds	r6, r3, #1
    13f4:	b2b6      	uxth	r6, r6
    13f6:	46b4      	mov	ip, r6
    13f8:	4646      	mov	r6, r8
    13fa:	5cf1      	ldrb	r1, [r6, r3]
    13fc:	000e      	movs	r6, r1
    13fe:	9102      	str	r1, [sp, #8]
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1400:	7981      	ldrb	r1, [r0, #6]
    1402:	2901      	cmp	r1, #1
    1404:	d0dd      	beq.n	13c2 <spi_transceive_buffer_wait+0x7a>
					data_to_send = tx_data[tx_pos++];
    1406:	b2b6      	uxth	r6, r6
    1408:	4663      	mov	r3, ip
    140a:	7e21      	ldrb	r1, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    140c:	4211      	tst	r1, r2
    140e:	d0e1      	beq.n	13d4 <spi_transceive_buffer_wait+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1410:	05f6      	lsls	r6, r6, #23
    1412:	0df6      	lsrs	r6, r6, #23
    1414:	62a6      	str	r6, [r4, #40]	; 0x28
    1416:	e7dd      	b.n	13d4 <spi_transceive_buffer_wait+0x8c>
    1418:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    141a:	7e25      	ldrb	r5, [r4, #24]
			if (spi_is_write_complete(module)) {
    141c:	2602      	movs	r6, #2
    141e:	4235      	tst	r5, r6
    1420:	d105      	bne.n	142e <spi_transceive_buffer_wait+0xe6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1422:	7e24      	ldrb	r4, [r4, #24]
			if (!spi_is_ready_to_read(module)) {
    1424:	423c      	tst	r4, r7
    1426:	d100      	bne.n	142a <spi_transceive_buffer_wait+0xe2>
    1428:	e0ce      	b.n	15c8 <spi_transceive_buffer_wait+0x280>
    142a:	000e      	movs	r6, r1
    142c:	e004      	b.n	1438 <spi_transceive_buffer_wait+0xf0>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    142e:	2302      	movs	r3, #2
    1430:	7623      	strb	r3, [r4, #24]
				return STATUS_ABORTED;
    1432:	2404      	movs	r4, #4
    1434:	e79b      	b.n	136e <spi_transceive_buffer_wait+0x26>
    1436:	000e      	movs	r6, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
    1438:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    143a:	7e29      	ldrb	r1, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    143c:	4239      	tst	r1, r7
    143e:	d0fc      	beq.n	143a <spi_transceive_buffer_wait+0xf2>
		rx_length--;
    1440:	4649      	mov	r1, r9
    1442:	3901      	subs	r1, #1
    1444:	b289      	uxth	r1, r1
    1446:	4689      	mov	r9, r1
    1448:	7e29      	ldrb	r1, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    144a:	4239      	tst	r1, r7
    144c:	d100      	bne.n	1450 <spi_transceive_buffer_wait+0x108>
    144e:	e0bd      	b.n	15cc <spi_transceive_buffer_wait+0x284>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1450:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
    1452:	2400      	movs	r4, #0
    1454:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1456:	4239      	tst	r1, r7
    1458:	d002      	beq.n	1460 <spi_transceive_buffer_wait+0x118>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    145a:	836f      	strh	r7, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    145c:	211e      	movs	r1, #30
    145e:	9101      	str	r1, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1460:	7981      	ldrb	r1, [r0, #6]
    1462:	2901      	cmp	r1, #1
    1464:	d049      	beq.n	14fa <spi_transceive_buffer_wait+0x1b2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1466:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1468:	b2ed      	uxtb	r5, r5
		if (retval != STATUS_OK) {
    146a:	9901      	ldr	r1, [sp, #4]
    146c:	2900      	cmp	r1, #0
    146e:	d000      	beq.n	1472 <spi_transceive_buffer_wait+0x12a>
    1470:	e0b4      	b.n	15dc <spi_transceive_buffer_wait+0x294>
		rx_data[rx_pos++] = received_data;
    1472:	4651      	mov	r1, sl
    1474:	3101      	adds	r1, #1
    1476:	b289      	uxth	r1, r1
    1478:	468b      	mov	fp, r1
    147a:	9c03      	ldr	r4, [sp, #12]
    147c:	4651      	mov	r1, sl
    147e:	5465      	strb	r5, [r4, r1]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1480:	7984      	ldrb	r4, [r0, #6]
    1482:	2c01      	cmp	r4, #1
    1484:	d03d      	beq.n	1502 <spi_transceive_buffer_wait+0x1ba>
		rx_data[rx_pos++] = received_data;
    1486:	46da      	mov	sl, fp
	while (length--) {
    1488:	1e71      	subs	r1, r6, #1
    148a:	b289      	uxth	r1, r1
    148c:	2e00      	cmp	r6, #0
    148e:	d045      	beq.n	151c <spi_transceive_buffer_wait+0x1d4>
		if (module->mode == SPI_MODE_SLAVE) {
    1490:	7944      	ldrb	r4, [r0, #5]
    1492:	2c00      	cmp	r4, #0
    1494:	d113      	bne.n	14be <spi_transceive_buffer_wait+0x176>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1496:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1498:	7e34      	ldrb	r4, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    149a:	4214      	tst	r4, r2
    149c:	d106      	bne.n	14ac <spi_transceive_buffer_wait+0x164>
    149e:	4c50      	ldr	r4, [pc, #320]	; (15e0 <spi_transceive_buffer_wait+0x298>)
    14a0:	7e35      	ldrb	r5, [r6, #24]
    14a2:	4215      	tst	r5, r2
    14a4:	d102      	bne.n	14ac <spi_transceive_buffer_wait+0x164>
    14a6:	3c01      	subs	r4, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    14a8:	2c00      	cmp	r4, #0
    14aa:	d1f9      	bne.n	14a0 <spi_transceive_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14ac:	7e34      	ldrb	r4, [r6, #24]
			if (spi_is_write_complete(module)) {
    14ae:	2502      	movs	r5, #2
    14b0:	422c      	tst	r4, r5
    14b2:	d000      	beq.n	14b6 <spi_transceive_buffer_wait+0x16e>
    14b4:	e779      	b.n	13aa <spi_transceive_buffer_wait+0x62>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14b6:	7e34      	ldrb	r4, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    14b8:	4214      	tst	r4, r2
    14ba:	d100      	bne.n	14be <spi_transceive_buffer_wait+0x176>
    14bc:	e082      	b.n	15c4 <spi_transceive_buffer_wait+0x27c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14be:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14c0:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_write(module)) {
    14c2:	4214      	tst	r4, r2
    14c4:	d0fc      	beq.n	14c0 <spi_transceive_buffer_wait+0x178>
		uint16_t data_to_send = tx_data[tx_pos++];
    14c6:	1c5e      	adds	r6, r3, #1
    14c8:	b2b6      	uxth	r6, r6
    14ca:	4644      	mov	r4, r8
    14cc:	5ce4      	ldrb	r4, [r4, r3]
    14ce:	46a3      	mov	fp, r4
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14d0:	7984      	ldrb	r4, [r0, #6]
    14d2:	2c01      	cmp	r4, #1
    14d4:	d100      	bne.n	14d8 <spi_transceive_buffer_wait+0x190>
    14d6:	e76c      	b.n	13b2 <spi_transceive_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    14d8:	465b      	mov	r3, fp
    14da:	466c      	mov	r4, sp
    14dc:	80a3      	strh	r3, [r4, #4]
    14de:	88a4      	ldrh	r4, [r4, #4]
    14e0:	0033      	movs	r3, r6
    14e2:	7e2e      	ldrb	r6, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    14e4:	4216      	tst	r6, r2
    14e6:	d002      	beq.n	14ee <spi_transceive_buffer_wait+0x1a6>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14e8:	05e4      	lsls	r4, r4, #23
    14ea:	0de4      	lsrs	r4, r4, #23
    14ec:	62ac      	str	r4, [r5, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    14ee:	7944      	ldrb	r4, [r0, #5]
    14f0:	2c00      	cmp	r4, #0
    14f2:	d1a0      	bne.n	1436 <spi_transceive_buffer_wait+0xee>
    14f4:	4d3b      	ldr	r5, [pc, #236]	; (15e4 <spi_transceive_buffer_wait+0x29c>)
    14f6:	9101      	str	r1, [sp, #4]
    14f8:	e777      	b.n	13ea <spi_transceive_buffer_wait+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14fa:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14fc:	05ed      	lsls	r5, r5, #23
    14fe:	0ded      	lsrs	r5, r5, #23
    1500:	e7b3      	b.n	146a <spi_transceive_buffer_wait+0x122>
			rx_data[rx_pos++] = (received_data >> 8);
    1502:	2102      	movs	r1, #2
    1504:	468c      	mov	ip, r1
    1506:	44e2      	add	sl, ip
    1508:	4651      	mov	r1, sl
    150a:	466c      	mov	r4, sp
    150c:	8121      	strh	r1, [r4, #8]
    150e:	8921      	ldrh	r1, [r4, #8]
    1510:	468a      	mov	sl, r1
    1512:	0a2d      	lsrs	r5, r5, #8
    1514:	9903      	ldr	r1, [sp, #12]
    1516:	465c      	mov	r4, fp
    1518:	550d      	strb	r5, [r1, r4]
    151a:	e7b5      	b.n	1488 <spi_transceive_buffer_wait+0x140>
    151c:	9c01      	ldr	r4, [sp, #4]
	if (module->mode == SPI_MODE_MASTER) {
    151e:	7943      	ldrb	r3, [r0, #5]
    1520:	2b01      	cmp	r3, #1
    1522:	d010      	beq.n	1546 <spi_transceive_buffer_wait+0x1fe>
	if (module->mode == SPI_MODE_SLAVE) {
    1524:	2b00      	cmp	r3, #0
    1526:	d000      	beq.n	152a <spi_transceive_buffer_wait+0x1e2>
    1528:	e721      	b.n	136e <spi_transceive_buffer_wait+0x26>
		while (rx_length) {
    152a:	464b      	mov	r3, r9
    152c:	2b00      	cmp	r3, #0
    152e:	d100      	bne.n	1532 <spi_transceive_buffer_wait+0x1ea>
    1530:	e71d      	b.n	136e <spi_transceive_buffer_wait+0x26>
				if (spi_is_ready_to_read(module)) {
    1532:	2704      	movs	r7, #4
	enum status_code retval = STATUS_OK;
    1534:	0021      	movs	r1, r4
		retval = STATUS_ERR_OVERFLOW;
    1536:	251e      	movs	r5, #30
    1538:	0004      	movs	r4, r0
    153a:	4650      	mov	r0, sl
    153c:	9b03      	ldr	r3, [sp, #12]
    153e:	4698      	mov	r8, r3
    1540:	9102      	str	r1, [sp, #8]
    1542:	4649      	mov	r1, r9
    1544:	e026      	b.n	1594 <spi_transceive_buffer_wait+0x24c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1546:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    1548:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    154a:	7e0b      	ldrb	r3, [r1, #24]
    154c:	4213      	tst	r3, r2
    154e:	d0fc      	beq.n	154a <spi_transceive_buffer_wait+0x202>
    1550:	e70d      	b.n	136e <spi_transceive_buffer_wait+0x26>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1552:	7e33      	ldrb	r3, [r6, #24]
			if (!spi_is_ready_to_read(module)) {
    1554:	423b      	tst	r3, r7
    1556:	d03b      	beq.n	15d0 <spi_transceive_buffer_wait+0x288>
			rx_length--;
    1558:	3901      	subs	r1, #1
    155a:	b289      	uxth	r1, r1
    155c:	7e33      	ldrb	r3, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    155e:	423b      	tst	r3, r7
    1560:	d038      	beq.n	15d4 <spi_transceive_buffer_wait+0x28c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1562:	8b73      	ldrh	r3, [r6, #26]
	enum status_code retval = STATUS_OK;
    1564:	9a02      	ldr	r2, [sp, #8]
    1566:	9201      	str	r2, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1568:	423b      	tst	r3, r7
    156a:	d001      	beq.n	1570 <spi_transceive_buffer_wait+0x228>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    156c:	8377      	strh	r7, [r6, #26]
		retval = STATUS_ERR_OVERFLOW;
    156e:	9501      	str	r5, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1570:	79a3      	ldrb	r3, [r4, #6]
    1572:	2b01      	cmp	r3, #1
    1574:	d01a      	beq.n	15ac <spi_transceive_buffer_wait+0x264>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1576:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1578:	b2f6      	uxtb	r6, r6
			if (retval != STATUS_OK) {
    157a:	9b01      	ldr	r3, [sp, #4]
    157c:	2b00      	cmp	r3, #0
    157e:	d12b      	bne.n	15d8 <spi_transceive_buffer_wait+0x290>
			rx_data[rx_pos++] = received_data;
    1580:	1c43      	adds	r3, r0, #1
    1582:	b29b      	uxth	r3, r3
    1584:	4642      	mov	r2, r8
    1586:	5416      	strb	r6, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1588:	79a2      	ldrb	r2, [r4, #6]
    158a:	2a01      	cmp	r2, #1
    158c:	d012      	beq.n	15b4 <spi_transceive_buffer_wait+0x26c>
			rx_data[rx_pos++] = received_data;
    158e:	0018      	movs	r0, r3
		while (rx_length) {
    1590:	2900      	cmp	r1, #0
    1592:	d015      	beq.n	15c0 <spi_transceive_buffer_wait+0x278>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1594:	6826      	ldr	r6, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1596:	7e33      	ldrb	r3, [r6, #24]
				if (spi_is_ready_to_read(module)) {
    1598:	423b      	tst	r3, r7
    159a:	d1da      	bne.n	1552 <spi_transceive_buffer_wait+0x20a>
    159c:	4b10      	ldr	r3, [pc, #64]	; (15e0 <spi_transceive_buffer_wait+0x298>)
    159e:	7e32      	ldrb	r2, [r6, #24]
    15a0:	423a      	tst	r2, r7
    15a2:	d1d6      	bne.n	1552 <spi_transceive_buffer_wait+0x20a>
    15a4:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    15a6:	2b00      	cmp	r3, #0
    15a8:	d1f9      	bne.n	159e <spi_transceive_buffer_wait+0x256>
    15aa:	e7d2      	b.n	1552 <spi_transceive_buffer_wait+0x20a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    15ac:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    15ae:	05f6      	lsls	r6, r6, #23
    15b0:	0df6      	lsrs	r6, r6, #23
    15b2:	e7e2      	b.n	157a <spi_transceive_buffer_wait+0x232>
				rx_data[rx_pos++] = (received_data >> 8);
    15b4:	3002      	adds	r0, #2
    15b6:	b280      	uxth	r0, r0
    15b8:	0a36      	lsrs	r6, r6, #8
    15ba:	4642      	mov	r2, r8
    15bc:	54d6      	strb	r6, [r2, r3]
    15be:	e7e7      	b.n	1590 <spi_transceive_buffer_wait+0x248>
    15c0:	9c01      	ldr	r4, [sp, #4]
    15c2:	e6d4      	b.n	136e <spi_transceive_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    15c4:	2412      	movs	r4, #18
    15c6:	e6d2      	b.n	136e <spi_transceive_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    15c8:	2412      	movs	r4, #18
    15ca:	e6d0      	b.n	136e <spi_transceive_buffer_wait+0x26>
		return STATUS_ERR_IO;
    15cc:	2410      	movs	r4, #16
    15ce:	e6ce      	b.n	136e <spi_transceive_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    15d0:	2412      	movs	r4, #18
    15d2:	e6cc      	b.n	136e <spi_transceive_buffer_wait+0x26>
    15d4:	2410      	movs	r4, #16
    15d6:	e6ca      	b.n	136e <spi_transceive_buffer_wait+0x26>
    15d8:	9c01      	ldr	r4, [sp, #4]
    15da:	e6c8      	b.n	136e <spi_transceive_buffer_wait+0x26>
    15dc:	9c01      	ldr	r4, [sp, #4]
    15de:	e6c6      	b.n	136e <spi_transceive_buffer_wait+0x26>
    15e0:	00002710 	.word	0x00002710
    15e4:	00002711 	.word	0x00002711

000015e8 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    15e8:	1c93      	adds	r3, r2, #2
    15ea:	009b      	lsls	r3, r3, #2
    15ec:	18c3      	adds	r3, r0, r3
    15ee:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    15f0:	2136      	movs	r1, #54	; 0x36
    15f2:	2301      	movs	r3, #1
    15f4:	4093      	lsls	r3, r2
    15f6:	001a      	movs	r2, r3
    15f8:	5c43      	ldrb	r3, [r0, r1]
    15fa:	4313      	orrs	r3, r2
    15fc:	5443      	strb	r3, [r0, r1]
}
    15fe:	4770      	bx	lr

00001600 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1602:	0080      	lsls	r0, r0, #2
    1604:	4b85      	ldr	r3, [pc, #532]	; (181c <_spi_interrupt_handler+0x21c>)
    1606:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1608:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    160a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    160c:	5ce3      	ldrb	r3, [r4, r3]
    160e:	2236      	movs	r2, #54	; 0x36
    1610:	5ca7      	ldrb	r7, [r4, r2]
    1612:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1614:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1616:	7db5      	ldrb	r5, [r6, #22]
    1618:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    161a:	07eb      	lsls	r3, r5, #31
    161c:	d52e      	bpl.n	167c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    161e:	7963      	ldrb	r3, [r4, #5]
    1620:	2b01      	cmp	r3, #1
    1622:	d025      	beq.n	1670 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1624:	2b00      	cmp	r3, #0
    1626:	d129      	bne.n	167c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    1628:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    162a:	2b00      	cmp	r3, #0
    162c:	d026      	beq.n	167c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    162e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1632:	7813      	ldrb	r3, [r2, #0]
    1634:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1636:	1c50      	adds	r0, r2, #1
    1638:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    163a:	79a0      	ldrb	r0, [r4, #6]
    163c:	2801      	cmp	r0, #1
    163e:	d100      	bne.n	1642 <_spi_interrupt_handler+0x42>
    1640:	e069      	b.n	1716 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1642:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1644:	05db      	lsls	r3, r3, #23
    1646:	0ddb      	lsrs	r3, r3, #23
    1648:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    164a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    164c:	3b01      	subs	r3, #1
    164e:	b29b      	uxth	r3, r3
    1650:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1652:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1654:	b29b      	uxth	r3, r3
    1656:	2b00      	cmp	r3, #0
    1658:	d110      	bne.n	167c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    165a:	3301      	adds	r3, #1
    165c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    165e:	7a63      	ldrb	r3, [r4, #9]
    1660:	2b01      	cmp	r3, #1
    1662:	d10b      	bne.n	167c <_spi_interrupt_handler+0x7c>
    1664:	79e3      	ldrb	r3, [r4, #7]
    1666:	2b00      	cmp	r3, #0
    1668:	d108      	bne.n	167c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    166a:	3302      	adds	r3, #2
    166c:	75b3      	strb	r3, [r6, #22]
    166e:	e005      	b.n	167c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1670:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1672:	2b00      	cmp	r3, #0
    1674:	d03e      	beq.n	16f4 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    1676:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1678:	2b00      	cmp	r3, #0
    167a:	d1d8      	bne.n	162e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    167c:	076b      	lsls	r3, r5, #29
    167e:	d511      	bpl.n	16a4 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1680:	8b73      	ldrh	r3, [r6, #26]
    1682:	075b      	lsls	r3, r3, #29
    1684:	d551      	bpl.n	172a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1686:	7a63      	ldrb	r3, [r4, #9]
    1688:	2b01      	cmp	r3, #1
    168a:	d008      	beq.n	169e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    168c:	221e      	movs	r2, #30
    168e:	2338      	movs	r3, #56	; 0x38
    1690:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1692:	3b35      	subs	r3, #53	; 0x35
    1694:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1696:	3302      	adds	r3, #2
    1698:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    169a:	073b      	lsls	r3, r7, #28
    169c:	d441      	bmi.n	1722 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    169e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    16a0:	2304      	movs	r3, #4
    16a2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    16a4:	07ab      	lsls	r3, r5, #30
    16a6:	d515      	bpl.n	16d4 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    16a8:	7963      	ldrb	r3, [r4, #5]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d10e      	bne.n	16cc <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    16ae:	3307      	adds	r3, #7
    16b0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16b2:	3b05      	subs	r3, #5
    16b4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    16b6:	3301      	adds	r3, #1
    16b8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    16ba:	2300      	movs	r3, #0
    16bc:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    16be:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    16c0:	3338      	adds	r3, #56	; 0x38
    16c2:	2200      	movs	r2, #0
    16c4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    16c6:	06fb      	lsls	r3, r7, #27
    16c8:	d500      	bpl.n	16cc <_spi_interrupt_handler+0xcc>
    16ca:	e07f      	b.n	17cc <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    16cc:	7963      	ldrb	r3, [r4, #5]
    16ce:	2b01      	cmp	r3, #1
    16d0:	d100      	bne.n	16d4 <_spi_interrupt_handler+0xd4>
    16d2:	e07f      	b.n	17d4 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    16d4:	072b      	lsls	r3, r5, #28
    16d6:	d508      	bpl.n	16ea <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    16d8:	7963      	ldrb	r3, [r4, #5]
    16da:	2b00      	cmp	r3, #0
    16dc:	d105      	bne.n	16ea <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    16de:	3308      	adds	r3, #8
    16e0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    16e2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    16e4:	06bb      	lsls	r3, r7, #26
    16e6:	d500      	bpl.n	16ea <_spi_interrupt_handler+0xea>
    16e8:	e08a      	b.n	1800 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    16ea:	b26d      	sxtb	r5, r5
    16ec:	2d00      	cmp	r5, #0
    16ee:	da00      	bge.n	16f2 <_spi_interrupt_handler+0xf2>
    16f0:	e08a      	b.n	1808 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    16f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    16f4:	4b4a      	ldr	r3, [pc, #296]	; (1820 <_spi_interrupt_handler+0x220>)
    16f6:	881b      	ldrh	r3, [r3, #0]
    16f8:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    16fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    16fc:	3b01      	subs	r3, #1
    16fe:	b29b      	uxth	r3, r3
    1700:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1702:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1704:	b29b      	uxth	r3, r3
    1706:	2b00      	cmp	r3, #0
    1708:	d101      	bne.n	170e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    170a:	3301      	adds	r3, #1
    170c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    170e:	7963      	ldrb	r3, [r4, #5]
		if (0
    1710:	2b01      	cmp	r3, #1
    1712:	d0b0      	beq.n	1676 <_spi_interrupt_handler+0x76>
    1714:	e786      	b.n	1624 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1716:	7850      	ldrb	r0, [r2, #1]
    1718:	0200      	lsls	r0, r0, #8
    171a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    171c:	3202      	adds	r2, #2
    171e:	62e2      	str	r2, [r4, #44]	; 0x2c
    1720:	e790      	b.n	1644 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1722:	0020      	movs	r0, r4
    1724:	69a3      	ldr	r3, [r4, #24]
    1726:	4798      	blx	r3
    1728:	e7b9      	b.n	169e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    172a:	7a63      	ldrb	r3, [r4, #9]
    172c:	2b01      	cmp	r3, #1
    172e:	d027      	beq.n	1780 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1730:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	05db      	lsls	r3, r3, #23
    1736:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1738:	b2da      	uxtb	r2, r3
    173a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    173c:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    173e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1740:	1c51      	adds	r1, r2, #1
    1742:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1744:	79a1      	ldrb	r1, [r4, #6]
    1746:	2901      	cmp	r1, #1
    1748:	d033      	beq.n	17b2 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    174a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    174c:	3b01      	subs	r3, #1
    174e:	b29b      	uxth	r3, r3
    1750:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1752:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1754:	b29b      	uxth	r3, r3
    1756:	2b00      	cmp	r3, #0
    1758:	d1a4      	bne.n	16a4 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    175a:	2200      	movs	r2, #0
    175c:	3338      	adds	r3, #56	; 0x38
    175e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1760:	3b34      	subs	r3, #52	; 0x34
    1762:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1764:	7a63      	ldrb	r3, [r4, #9]
    1766:	2b02      	cmp	r3, #2
    1768:	d029      	beq.n	17be <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    176a:	7a63      	ldrb	r3, [r4, #9]
    176c:	2b00      	cmp	r3, #0
    176e:	d000      	beq.n	1772 <_spi_interrupt_handler+0x172>
    1770:	e798      	b.n	16a4 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1772:	07bb      	lsls	r3, r7, #30
    1774:	d400      	bmi.n	1778 <_spi_interrupt_handler+0x178>
    1776:	e795      	b.n	16a4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1778:	0020      	movs	r0, r4
    177a:	6923      	ldr	r3, [r4, #16]
    177c:	4798      	blx	r3
    177e:	e791      	b.n	16a4 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1780:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1784:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1786:	3b01      	subs	r3, #1
    1788:	b29b      	uxth	r3, r3
    178a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    178c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    178e:	b29b      	uxth	r3, r3
    1790:	2b00      	cmp	r3, #0
    1792:	d000      	beq.n	1796 <_spi_interrupt_handler+0x196>
    1794:	e786      	b.n	16a4 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1796:	3304      	adds	r3, #4
    1798:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    179a:	2200      	movs	r2, #0
    179c:	3334      	adds	r3, #52	; 0x34
    179e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    17a0:	3b35      	subs	r3, #53	; 0x35
    17a2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    17a4:	07fb      	lsls	r3, r7, #31
    17a6:	d400      	bmi.n	17aa <_spi_interrupt_handler+0x1aa>
    17a8:	e77c      	b.n	16a4 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    17aa:	0020      	movs	r0, r4
    17ac:	68e3      	ldr	r3, [r4, #12]
    17ae:	4798      	blx	r3
    17b0:	e778      	b.n	16a4 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    17b2:	0a1b      	lsrs	r3, r3, #8
    17b4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    17b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17b8:	3301      	adds	r3, #1
    17ba:	62a3      	str	r3, [r4, #40]	; 0x28
    17bc:	e7c5      	b.n	174a <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    17be:	077b      	lsls	r3, r7, #29
    17c0:	d400      	bmi.n	17c4 <_spi_interrupt_handler+0x1c4>
    17c2:	e76f      	b.n	16a4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    17c4:	0020      	movs	r0, r4
    17c6:	6963      	ldr	r3, [r4, #20]
    17c8:	4798      	blx	r3
    17ca:	e76b      	b.n	16a4 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    17cc:	0020      	movs	r0, r4
    17ce:	69e3      	ldr	r3, [r4, #28]
    17d0:	4798      	blx	r3
    17d2:	e77b      	b.n	16cc <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    17d4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    17d6:	2b01      	cmp	r3, #1
    17d8:	d000      	beq.n	17dc <_spi_interrupt_handler+0x1dc>
    17da:	e786      	b.n	16ea <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    17dc:	79e3      	ldrb	r3, [r4, #7]
    17de:	2b00      	cmp	r3, #0
    17e0:	d000      	beq.n	17e4 <_spi_interrupt_handler+0x1e4>
    17e2:	e782      	b.n	16ea <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    17e4:	3302      	adds	r3, #2
    17e6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    17e8:	3301      	adds	r3, #1
    17ea:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    17ec:	2200      	movs	r2, #0
    17ee:	3335      	adds	r3, #53	; 0x35
    17f0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    17f2:	07fb      	lsls	r3, r7, #31
    17f4:	d400      	bmi.n	17f8 <_spi_interrupt_handler+0x1f8>
    17f6:	e76d      	b.n	16d4 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    17f8:	0020      	movs	r0, r4
    17fa:	68e3      	ldr	r3, [r4, #12]
    17fc:	4798      	blx	r3
    17fe:	e769      	b.n	16d4 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1800:	0020      	movs	r0, r4
    1802:	6a23      	ldr	r3, [r4, #32]
    1804:	4798      	blx	r3
    1806:	e770      	b.n	16ea <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1808:	2380      	movs	r3, #128	; 0x80
    180a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    180c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    180e:	067b      	lsls	r3, r7, #25
    1810:	d400      	bmi.n	1814 <_spi_interrupt_handler+0x214>
    1812:	e76e      	b.n	16f2 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1814:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1816:	0020      	movs	r0, r4
    1818:	4798      	blx	r3
}
    181a:	e76a      	b.n	16f2 <_spi_interrupt_handler+0xf2>
    181c:	20002d20 	.word	0x20002d20
    1820:	20002d30 	.word	0x20002d30

00001824 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1824:	1c93      	adds	r3, r2, #2
    1826:	009b      	lsls	r3, r3, #2
    1828:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    182a:	2a02      	cmp	r2, #2
    182c:	d009      	beq.n	1842 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    182e:	2a03      	cmp	r2, #3
    1830:	d00c      	beq.n	184c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1832:	2301      	movs	r3, #1
    1834:	4093      	lsls	r3, r2
    1836:	001a      	movs	r2, r3
    1838:	7e03      	ldrb	r3, [r0, #24]
    183a:	4313      	orrs	r3, r2
    183c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    183e:	2000      	movs	r0, #0
    1840:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1842:	7e03      	ldrb	r3, [r0, #24]
    1844:	2210      	movs	r2, #16
    1846:	4313      	orrs	r3, r2
    1848:	7603      	strb	r3, [r0, #24]
    184a:	e7f8      	b.n	183e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    184c:	7e03      	ldrb	r3, [r0, #24]
    184e:	2220      	movs	r2, #32
    1850:	4313      	orrs	r3, r2
    1852:	7603      	strb	r3, [r0, #24]
    1854:	e7f3      	b.n	183e <tc_register_callback+0x1a>
	...

00001858 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1858:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    185a:	0080      	lsls	r0, r0, #2
    185c:	4b16      	ldr	r3, [pc, #88]	; (18b8 <_tc_interrupt_handler+0x60>)
    185e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1860:	6823      	ldr	r3, [r4, #0]
    1862:	7b9d      	ldrb	r5, [r3, #14]
    1864:	7e22      	ldrb	r2, [r4, #24]
    1866:	7e63      	ldrb	r3, [r4, #25]
    1868:	4013      	ands	r3, r2
    186a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    186c:	07eb      	lsls	r3, r5, #31
    186e:	d406      	bmi.n	187e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1870:	07ab      	lsls	r3, r5, #30
    1872:	d40b      	bmi.n	188c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1874:	06eb      	lsls	r3, r5, #27
    1876:	d410      	bmi.n	189a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1878:	06ab      	lsls	r3, r5, #26
    187a:	d415      	bmi.n	18a8 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    187c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    187e:	0020      	movs	r0, r4
    1880:	68a3      	ldr	r3, [r4, #8]
    1882:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1884:	2301      	movs	r3, #1
    1886:	6822      	ldr	r2, [r4, #0]
    1888:	7393      	strb	r3, [r2, #14]
    188a:	e7f1      	b.n	1870 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    188c:	0020      	movs	r0, r4
    188e:	68e3      	ldr	r3, [r4, #12]
    1890:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1892:	2302      	movs	r3, #2
    1894:	6822      	ldr	r2, [r4, #0]
    1896:	7393      	strb	r3, [r2, #14]
    1898:	e7ec      	b.n	1874 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    189a:	0020      	movs	r0, r4
    189c:	6923      	ldr	r3, [r4, #16]
    189e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    18a0:	2310      	movs	r3, #16
    18a2:	6822      	ldr	r2, [r4, #0]
    18a4:	7393      	strb	r3, [r2, #14]
    18a6:	e7e7      	b.n	1878 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    18a8:	0020      	movs	r0, r4
    18aa:	6963      	ldr	r3, [r4, #20]
    18ac:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    18ae:	6823      	ldr	r3, [r4, #0]
    18b0:	2220      	movs	r2, #32
    18b2:	739a      	strb	r2, [r3, #14]
}
    18b4:	e7e2      	b.n	187c <_tc_interrupt_handler+0x24>
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	20002d34 	.word	0x20002d34

000018bc <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    18bc:	b510      	push	{r4, lr}
    18be:	2000      	movs	r0, #0
    18c0:	4b01      	ldr	r3, [pc, #4]	; (18c8 <TC3_Handler+0xc>)
    18c2:	4798      	blx	r3
    18c4:	bd10      	pop	{r4, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	00001859 	.word	0x00001859

000018cc <TC4_Handler>:
    18cc:	b510      	push	{r4, lr}
    18ce:	2001      	movs	r0, #1
    18d0:	4b01      	ldr	r3, [pc, #4]	; (18d8 <TC4_Handler+0xc>)
    18d2:	4798      	blx	r3
    18d4:	bd10      	pop	{r4, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	00001859 	.word	0x00001859

000018dc <TC5_Handler>:
    18dc:	b510      	push	{r4, lr}
    18de:	2002      	movs	r0, #2
    18e0:	4b01      	ldr	r3, [pc, #4]	; (18e8 <TC5_Handler+0xc>)
    18e2:	4798      	blx	r3
    18e4:	bd10      	pop	{r4, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	00001859 	.word	0x00001859

000018ec <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    18ec:	b530      	push	{r4, r5, lr}
    18ee:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    18f0:	aa01      	add	r2, sp, #4
    18f2:	4b0b      	ldr	r3, [pc, #44]	; (1920 <_tc_get_inst_index+0x34>)
    18f4:	cb32      	ldmia	r3!, {r1, r4, r5}
    18f6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    18f8:	9b01      	ldr	r3, [sp, #4]
    18fa:	4298      	cmp	r0, r3
    18fc:	d00d      	beq.n	191a <_tc_get_inst_index+0x2e>
    18fe:	9b02      	ldr	r3, [sp, #8]
    1900:	4298      	cmp	r0, r3
    1902:	d008      	beq.n	1916 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1904:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1906:	9a03      	ldr	r2, [sp, #12]
    1908:	4282      	cmp	r2, r0
    190a:	d002      	beq.n	1912 <_tc_get_inst_index+0x26>
}
    190c:	0018      	movs	r0, r3
    190e:	b005      	add	sp, #20
    1910:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1912:	3302      	adds	r3, #2
    1914:	e002      	b.n	191c <_tc_get_inst_index+0x30>
    1916:	2301      	movs	r3, #1
    1918:	e000      	b.n	191c <_tc_get_inst_index+0x30>
    191a:	2300      	movs	r3, #0
			return i;
    191c:	b2db      	uxtb	r3, r3
    191e:	e7f5      	b.n	190c <_tc_get_inst_index+0x20>
    1920:	0000a6bc 	.word	0x0000a6bc

00001924 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1924:	b5f0      	push	{r4, r5, r6, r7, lr}
    1926:	b087      	sub	sp, #28
    1928:	0004      	movs	r4, r0
    192a:	000d      	movs	r5, r1
    192c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    192e:	0008      	movs	r0, r1
    1930:	4b85      	ldr	r3, [pc, #532]	; (1b48 <tc_init+0x224>)
    1932:	4798      	blx	r3
    1934:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1936:	ab05      	add	r3, sp, #20
    1938:	221b      	movs	r2, #27
    193a:	701a      	strb	r2, [r3, #0]
    193c:	3201      	adds	r2, #1
    193e:	705a      	strb	r2, [r3, #1]
    1940:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1942:	ab03      	add	r3, sp, #12
    1944:	2280      	movs	r2, #128	; 0x80
    1946:	0112      	lsls	r2, r2, #4
    1948:	801a      	strh	r2, [r3, #0]
    194a:	2280      	movs	r2, #128	; 0x80
    194c:	0152      	lsls	r2, r2, #5
    194e:	805a      	strh	r2, [r3, #2]
    1950:	2280      	movs	r2, #128	; 0x80
    1952:	0192      	lsls	r2, r2, #6
    1954:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1956:	2300      	movs	r3, #0
    1958:	60a3      	str	r3, [r4, #8]
    195a:	60e3      	str	r3, [r4, #12]
    195c:	6123      	str	r3, [r4, #16]
    195e:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1960:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1962:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1964:	0082      	lsls	r2, r0, #2
    1966:	4b79      	ldr	r3, [pc, #484]	; (1b4c <tc_init+0x228>)
    1968:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    196a:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    196c:	78b3      	ldrb	r3, [r6, #2]
    196e:	2b08      	cmp	r3, #8
    1970:	d006      	beq.n	1980 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1972:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1974:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1976:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1978:	07db      	lsls	r3, r3, #31
    197a:	d505      	bpl.n	1988 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    197c:	b007      	add	sp, #28
    197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1980:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1982:	07fa      	lsls	r2, r7, #31
    1984:	d5fa      	bpl.n	197c <tc_init+0x58>
    1986:	e7f4      	b.n	1972 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1988:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    198a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    198c:	06db      	lsls	r3, r3, #27
    198e:	d4f5      	bmi.n	197c <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1990:	882b      	ldrh	r3, [r5, #0]
    1992:	079b      	lsls	r3, r3, #30
    1994:	d4f2      	bmi.n	197c <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1996:	7c33      	ldrb	r3, [r6, #16]
    1998:	2b00      	cmp	r3, #0
    199a:	d179      	bne.n	1a90 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    199c:	7f33      	ldrb	r3, [r6, #28]
    199e:	2b00      	cmp	r3, #0
    19a0:	d000      	beq.n	19a4 <tc_init+0x80>
    19a2:	e081      	b.n	1aa8 <tc_init+0x184>
    19a4:	496a      	ldr	r1, [pc, #424]	; (1b50 <tc_init+0x22c>)
    19a6:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    19a8:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    19aa:	ab03      	add	r3, sp, #12
    19ac:	5ad3      	ldrh	r3, [r2, r3]
    19ae:	4303      	orrs	r3, r0
    19b0:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    19b2:	78b3      	ldrb	r3, [r6, #2]
    19b4:	2b08      	cmp	r3, #8
    19b6:	d100      	bne.n	19ba <tc_init+0x96>
    19b8:	e086      	b.n	1ac8 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    19ba:	a901      	add	r1, sp, #4
    19bc:	7833      	ldrb	r3, [r6, #0]
    19be:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    19c0:	ab05      	add	r3, sp, #20
    19c2:	5ddf      	ldrb	r7, [r3, r7]
    19c4:	0038      	movs	r0, r7
    19c6:	4b63      	ldr	r3, [pc, #396]	; (1b54 <tc_init+0x230>)
    19c8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    19ca:	0038      	movs	r0, r7
    19cc:	4b62      	ldr	r3, [pc, #392]	; (1b58 <tc_init+0x234>)
    19ce:	4798      	blx	r3
	ctrla_tmp =
    19d0:	8931      	ldrh	r1, [r6, #8]
    19d2:	88b3      	ldrh	r3, [r6, #4]
    19d4:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    19d6:	78b1      	ldrb	r1, [r6, #2]
    19d8:	79b2      	ldrb	r2, [r6, #6]
    19da:	4311      	orrs	r1, r2
	ctrla_tmp =
    19dc:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    19de:	7873      	ldrb	r3, [r6, #1]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d002      	beq.n	19ea <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    19e4:	2380      	movs	r3, #128	; 0x80
    19e6:	011b      	lsls	r3, r3, #4
    19e8:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19ea:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19ec:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    19ee:	b25b      	sxtb	r3, r3
    19f0:	2b00      	cmp	r3, #0
    19f2:	dbfb      	blt.n	19ec <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    19f4:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    19f6:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    19f8:	1e4b      	subs	r3, r1, #1
    19fa:	4199      	sbcs	r1, r3
    19fc:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    19fe:	7bb3      	ldrb	r3, [r6, #14]
    1a00:	2b00      	cmp	r3, #0
    1a02:	d001      	beq.n	1a08 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1a04:	2301      	movs	r3, #1
    1a06:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a08:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a0a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a0c:	b25b      	sxtb	r3, r3
    1a0e:	2b00      	cmp	r3, #0
    1a10:	dbfb      	blt.n	1a0a <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1a12:	23ff      	movs	r3, #255	; 0xff
    1a14:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1a16:	2900      	cmp	r1, #0
    1a18:	d005      	beq.n	1a26 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a1a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a1c:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1a1e:	b25b      	sxtb	r3, r3
    1a20:	2b00      	cmp	r3, #0
    1a22:	dbfb      	blt.n	1a1c <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1a24:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1a26:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1a28:	7af3      	ldrb	r3, [r6, #11]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d001      	beq.n	1a32 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a2e:	2310      	movs	r3, #16
    1a30:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1a32:	7b33      	ldrb	r3, [r6, #12]
    1a34:	2b00      	cmp	r3, #0
    1a36:	d001      	beq.n	1a3c <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a38:	2320      	movs	r3, #32
    1a3a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a3c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a3e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a40:	b25b      	sxtb	r3, r3
    1a42:	2b00      	cmp	r3, #0
    1a44:	dbfb      	blt.n	1a3e <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1a46:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a48:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a4a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a4c:	b25b      	sxtb	r3, r3
    1a4e:	2b00      	cmp	r3, #0
    1a50:	dbfb      	blt.n	1a4a <tc_init+0x126>
	switch (module_inst->counter_size) {
    1a52:	7923      	ldrb	r3, [r4, #4]
    1a54:	2b04      	cmp	r3, #4
    1a56:	d03f      	beq.n	1ad8 <tc_init+0x1b4>
    1a58:	2b08      	cmp	r3, #8
    1a5a:	d05e      	beq.n	1b1a <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1a5c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d000      	beq.n	1a64 <tc_init+0x140>
    1a62:	e78b      	b.n	197c <tc_init+0x58>
    1a64:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a66:	b25b      	sxtb	r3, r3
    1a68:	2b00      	cmp	r3, #0
    1a6a:	dbfb      	blt.n	1a64 <tc_init+0x140>
				= config->counter_16_bit.value;
    1a6c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1a6e:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a70:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a72:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a74:	b25b      	sxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	dbfb      	blt.n	1a72 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1a7a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1a7c:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a7e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a80:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a82:	b25b      	sxtb	r3, r3
    1a84:	2b00      	cmp	r3, #0
    1a86:	dbfb      	blt.n	1a80 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1a88:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1a8a:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1a8c:	2000      	movs	r0, #0
    1a8e:	e775      	b.n	197c <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a90:	a902      	add	r1, sp, #8
    1a92:	2301      	movs	r3, #1
    1a94:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1a96:	2200      	movs	r2, #0
    1a98:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1a9a:	7e32      	ldrb	r2, [r6, #24]
    1a9c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1a9e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1aa0:	7d30      	ldrb	r0, [r6, #20]
    1aa2:	4b2e      	ldr	r3, [pc, #184]	; (1b5c <tc_init+0x238>)
    1aa4:	4798      	blx	r3
    1aa6:	e779      	b.n	199c <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aa8:	a902      	add	r1, sp, #8
    1aaa:	2301      	movs	r3, #1
    1aac:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1aae:	2200      	movs	r2, #0
    1ab0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1ab2:	3224      	adds	r2, #36	; 0x24
    1ab4:	18b2      	adds	r2, r6, r2
    1ab6:	7812      	ldrb	r2, [r2, #0]
    1ab8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1aba:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1abc:	331f      	adds	r3, #31
    1abe:	18f3      	adds	r3, r6, r3
    1ac0:	7818      	ldrb	r0, [r3, #0]
    1ac2:	4b26      	ldr	r3, [pc, #152]	; (1b5c <tc_init+0x238>)
    1ac4:	4798      	blx	r3
    1ac6:	e76d      	b.n	19a4 <tc_init+0x80>
    1ac8:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1aca:	1c7a      	adds	r2, r7, #1
    1acc:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1ace:	ab03      	add	r3, sp, #12
    1ad0:	5ad3      	ldrh	r3, [r2, r3]
    1ad2:	4303      	orrs	r3, r0
    1ad4:	620b      	str	r3, [r1, #32]
    1ad6:	e770      	b.n	19ba <tc_init+0x96>
    1ad8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ada:	b25b      	sxtb	r3, r3
    1adc:	2b00      	cmp	r3, #0
    1ade:	dbfb      	blt.n	1ad8 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1ae0:	2328      	movs	r3, #40	; 0x28
    1ae2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1ae4:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ae6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ae8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1aea:	b25b      	sxtb	r3, r3
    1aec:	2b00      	cmp	r3, #0
    1aee:	dbfb      	blt.n	1ae8 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1af0:	2329      	movs	r3, #41	; 0x29
    1af2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1af4:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1af6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1af8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1afa:	b25b      	sxtb	r3, r3
    1afc:	2b00      	cmp	r3, #0
    1afe:	dbfb      	blt.n	1af8 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1b00:	232a      	movs	r3, #42	; 0x2a
    1b02:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1b04:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b06:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b08:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b0a:	b25b      	sxtb	r3, r3
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	dbfb      	blt.n	1b08 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1b10:	232b      	movs	r3, #43	; 0x2b
    1b12:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1b14:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1b16:	2000      	movs	r0, #0
    1b18:	e730      	b.n	197c <tc_init+0x58>
    1b1a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b1c:	b25b      	sxtb	r3, r3
    1b1e:	2b00      	cmp	r3, #0
    1b20:	dbfb      	blt.n	1b1a <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1b22:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b24:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b26:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b28:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b2a:	b25b      	sxtb	r3, r3
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	dbfb      	blt.n	1b28 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1b30:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1b32:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b34:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b36:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b38:	b25b      	sxtb	r3, r3
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	dbfb      	blt.n	1b36 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1b3e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1b40:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1b42:	2000      	movs	r0, #0
    1b44:	e71a      	b.n	197c <tc_init+0x58>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	000018ed 	.word	0x000018ed
    1b4c:	20002d34 	.word	0x20002d34
    1b50:	40000400 	.word	0x40000400
    1b54:	000048ed 	.word	0x000048ed
    1b58:	00004861 	.word	0x00004861
    1b5c:	000049e5 	.word	0x000049e5

00001b60 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    1b60:	b510      	push	{r4, lr}
    1b62:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    1b64:	ab03      	add	r3, sp, #12
    1b66:	2200      	movs	r2, #0
    1b68:	701a      	strb	r2, [r3, #0]
    1b6a:	3203      	adds	r2, #3
    1b6c:	705a      	strb	r2, [r3, #1]
    1b6e:	3a01      	subs	r2, #1
    1b70:	709a      	strb	r2, [r3, #2]
    1b72:	3a01      	subs	r2, #1
    1b74:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    1b76:	4b27      	ldr	r3, [pc, #156]	; (1c14 <udd_sleep_mode+0xb4>)
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	4283      	cmp	r3, r0
    1b7c:	d007      	beq.n	1b8e <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1b7e:	2800      	cmp	r0, #0
    1b80:	d107      	bne.n	1b92 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    1b82:	4b24      	ldr	r3, [pc, #144]	; (1c14 <udd_sleep_mode+0xb4>)
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	2b00      	cmp	r3, #0
    1b88:	d123      	bne.n	1bd2 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1b8a:	4b22      	ldr	r3, [pc, #136]	; (1c14 <udd_sleep_mode+0xb4>)
    1b8c:	7018      	strb	r0, [r3, #0]
}
    1b8e:	b004      	add	sp, #16
    1b90:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    1b92:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1b94:	5c1b      	ldrb	r3, [r3, r0]
    1b96:	4a20      	ldr	r2, [pc, #128]	; (1c18 <udd_sleep_mode+0xb8>)
    1b98:	5cd2      	ldrb	r2, [r2, r3]
    1b9a:	2aff      	cmp	r2, #255	; 0xff
    1b9c:	d100      	bne.n	1ba0 <udd_sleep_mode+0x40>
    1b9e:	e7fe      	b.n	1b9e <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ba0:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ba4:	4251      	negs	r1, r2
    1ba6:	414a      	adcs	r2, r1
    1ba8:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1baa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1bac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1bb0:	2100      	movs	r1, #0
    1bb2:	4a1a      	ldr	r2, [pc, #104]	; (1c1c <udd_sleep_mode+0xbc>)
    1bb4:	7011      	strb	r1, [r2, #0]
	return flags;
    1bb6:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1bb8:	4917      	ldr	r1, [pc, #92]	; (1c18 <udd_sleep_mode+0xb8>)
    1bba:	5cca      	ldrb	r2, [r1, r3]
    1bbc:	3201      	adds	r2, #1
    1bbe:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1bc0:	2c00      	cmp	r4, #0
    1bc2:	d0de      	beq.n	1b82 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    1bc4:	2201      	movs	r2, #1
    1bc6:	4b15      	ldr	r3, [pc, #84]	; (1c1c <udd_sleep_mode+0xbc>)
    1bc8:	701a      	strb	r2, [r3, #0]
    1bca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1bce:	b662      	cpsie	i
    1bd0:	e7d7      	b.n	1b82 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1bd2:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1bd4:	5cd3      	ldrb	r3, [r2, r3]
    1bd6:	4a10      	ldr	r2, [pc, #64]	; (1c18 <udd_sleep_mode+0xb8>)
    1bd8:	5cd2      	ldrb	r2, [r2, r3]
    1bda:	2a00      	cmp	r2, #0
    1bdc:	d100      	bne.n	1be0 <udd_sleep_mode+0x80>
    1bde:	e7fe      	b.n	1bde <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1be0:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1be4:	4251      	negs	r1, r2
    1be6:	414a      	adcs	r2, r1
    1be8:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1bea:	b672      	cpsid	i
    1bec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1bf0:	2100      	movs	r1, #0
    1bf2:	4a0a      	ldr	r2, [pc, #40]	; (1c1c <udd_sleep_mode+0xbc>)
    1bf4:	7011      	strb	r1, [r2, #0]
	return flags;
    1bf6:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1bf8:	4907      	ldr	r1, [pc, #28]	; (1c18 <udd_sleep_mode+0xb8>)
    1bfa:	5cca      	ldrb	r2, [r1, r3]
    1bfc:	3a01      	subs	r2, #1
    1bfe:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1c00:	2c00      	cmp	r4, #0
    1c02:	d0c2      	beq.n	1b8a <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    1c04:	2201      	movs	r2, #1
    1c06:	4b05      	ldr	r3, [pc, #20]	; (1c1c <udd_sleep_mode+0xbc>)
    1c08:	701a      	strb	r2, [r3, #0]
    1c0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c0e:	b662      	cpsie	i
    1c10:	e7bb      	b.n	1b8a <udd_sleep_mode+0x2a>
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	200003bc 	.word	0x200003bc
    1c18:	20002bf8 	.word	0x20002bf8
    1c1c:	200000d4 	.word	0x200000d4

00001c20 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    1c20:	0643      	lsls	r3, r0, #25
    1c22:	d00b      	beq.n	1c3c <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1c24:	230f      	movs	r3, #15
    1c26:	4003      	ands	r3, r0
    1c28:	005b      	lsls	r3, r3, #1
    1c2a:	09c0      	lsrs	r0, r0, #7
    1c2c:	1818      	adds	r0, r3, r0
    1c2e:	3802      	subs	r0, #2
    1c30:	0083      	lsls	r3, r0, #2
    1c32:	1818      	adds	r0, r3, r0
    1c34:	0080      	lsls	r0, r0, #2
    1c36:	4b02      	ldr	r3, [pc, #8]	; (1c40 <udd_ep_get_job+0x20>)
    1c38:	1818      	adds	r0, r3, r0
	}
}
    1c3a:	4770      	bx	lr
		return NULL;
    1c3c:	2000      	movs	r0, #0
    1c3e:	e7fc      	b.n	1c3a <udd_ep_get_job+0x1a>
    1c40:	2000036c 	.word	0x2000036c

00001c44 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    1c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c46:	46d6      	mov	lr, sl
    1c48:	464f      	mov	r7, r9
    1c4a:	4646      	mov	r6, r8
    1c4c:	b5c0      	push	{r6, r7, lr}
    1c4e:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1c50:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    1c52:	b26b      	sxtb	r3, r5
    1c54:	2b00      	cmp	r3, #0
    1c56:	db26      	blt.n	1ca6 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    1c58:	0028      	movs	r0, r5
    1c5a:	4b5e      	ldr	r3, [pc, #376]	; (1dd4 <udd_ep_transfer_process+0x190>)
    1c5c:	4798      	blx	r3
    1c5e:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1c60:	270f      	movs	r7, #15
    1c62:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1c64:	8a03      	ldrh	r3, [r0, #16]
    1c66:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    1c68:	464b      	mov	r3, r9
    1c6a:	881b      	ldrh	r3, [r3, #0]
    1c6c:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1c6e:	7c83      	ldrb	r3, [r0, #18]
    1c70:	075b      	lsls	r3, r3, #29
    1c72:	d46a      	bmi.n	1d4a <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    1c74:	68e3      	ldr	r3, [r4, #12]
    1c76:	4453      	add	r3, sl
    1c78:	001e      	movs	r6, r3
    1c7a:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1c7c:	68a3      	ldr	r3, [r4, #8]
    1c7e:	429e      	cmp	r6, r3
    1c80:	d800      	bhi.n	1c84 <udd_ep_transfer_process+0x40>
    1c82:	e074      	b.n	1d6e <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    1c84:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    1c86:	7ca3      	ldrb	r3, [r4, #18]
    1c88:	2201      	movs	r2, #1
    1c8a:	4393      	bics	r3, r2
    1c8c:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1c8e:	6823      	ldr	r3, [r4, #0]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d003      	beq.n	1c9c <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1c94:	68e1      	ldr	r1, [r4, #12]
    1c96:	002a      	movs	r2, r5
    1c98:	2000      	movs	r0, #0
    1c9a:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1c9c:	bc1c      	pop	{r2, r3, r4}
    1c9e:	4690      	mov	r8, r2
    1ca0:	4699      	mov	r9, r3
    1ca2:	46a2      	mov	sl, r4
    1ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    1ca6:	0028      	movs	r0, r5
    1ca8:	4b4a      	ldr	r3, [pc, #296]	; (1dd4 <udd_ep_transfer_process+0x190>)
    1caa:	4798      	blx	r3
    1cac:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1cae:	270f      	movs	r7, #15
    1cb0:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1cb2:	8a03      	ldrh	r3, [r0, #16]
    1cb4:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    1cb6:	464b      	mov	r3, r9
    1cb8:	885e      	ldrh	r6, [r3, #2]
    1cba:	68c3      	ldr	r3, [r0, #12]
    1cbc:	469c      	mov	ip, r3
    1cbe:	4466      	add	r6, ip
    1cc0:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1cc2:	6881      	ldr	r1, [r0, #8]
    1cc4:	428e      	cmp	r6, r1
    1cc6:	d025      	beq.n	1d14 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1cc8:	1b8d      	subs	r5, r1, r6
    1cca:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1ccc:	4b42      	ldr	r3, [pc, #264]	; (1dd8 <udd_ep_transfer_process+0x194>)
    1cce:	429d      	cmp	r5, r3
    1cd0:	d906      	bls.n	1ce0 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1cd2:	001d      	movs	r5, r3
    1cd4:	4641      	mov	r1, r8
    1cd6:	0018      	movs	r0, r3
    1cd8:	4b40      	ldr	r3, [pc, #256]	; (1ddc <udd_ep_transfer_process+0x198>)
    1cda:	4798      	blx	r3
    1cdc:	1a6d      	subs	r5, r5, r1
    1cde:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1ce0:	7ca2      	ldrb	r2, [r4, #18]
    1ce2:	2300      	movs	r3, #0
    1ce4:	0792      	lsls	r2, r2, #30
    1ce6:	d507      	bpl.n	1cf8 <udd_ep_transfer_process+0xb4>
    1ce8:	4641      	mov	r1, r8
    1cea:	0028      	movs	r0, r5
    1cec:	4b3c      	ldr	r3, [pc, #240]	; (1de0 <udd_ep_transfer_process+0x19c>)
    1cee:	4798      	blx	r3
    1cf0:	b289      	uxth	r1, r1
    1cf2:	424b      	negs	r3, r1
    1cf4:	414b      	adcs	r3, r1
    1cf6:	b2db      	uxtb	r3, r3
    1cf8:	005b      	lsls	r3, r3, #1
    1cfa:	7ca2      	ldrb	r2, [r4, #18]
    1cfc:	2102      	movs	r1, #2
    1cfe:	438a      	bics	r2, r1
    1d00:	4313      	orrs	r3, r2
    1d02:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1d04:	6862      	ldr	r2, [r4, #4]
    1d06:	1992      	adds	r2, r2, r6
    1d08:	002b      	movs	r3, r5
    1d0a:	0039      	movs	r1, r7
    1d0c:	4835      	ldr	r0, [pc, #212]	; (1de4 <udd_ep_transfer_process+0x1a0>)
    1d0e:	4c36      	ldr	r4, [pc, #216]	; (1de8 <udd_ep_transfer_process+0x1a4>)
    1d10:	47a0      	blx	r4
    1d12:	e7c3      	b.n	1c9c <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    1d14:	7c83      	ldrb	r3, [r0, #18]
    1d16:	079b      	lsls	r3, r3, #30
    1d18:	d40b      	bmi.n	1d32 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    1d1a:	7c83      	ldrb	r3, [r0, #18]
    1d1c:	2201      	movs	r2, #1
    1d1e:	4393      	bics	r3, r2
    1d20:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1d22:	6803      	ldr	r3, [r0, #0]
    1d24:	2b00      	cmp	r3, #0
    1d26:	d0b9      	beq.n	1c9c <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1d28:	002a      	movs	r2, r5
    1d2a:	0031      	movs	r1, r6
    1d2c:	2000      	movs	r0, #0
    1d2e:	4798      	blx	r3
    1d30:	e7b4      	b.n	1c9c <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    1d32:	7c83      	ldrb	r3, [r0, #18]
    1d34:	2202      	movs	r2, #2
    1d36:	4393      	bics	r3, r2
    1d38:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1d3a:	6842      	ldr	r2, [r0, #4]
    1d3c:	1992      	adds	r2, r2, r6
    1d3e:	2300      	movs	r3, #0
    1d40:	0039      	movs	r1, r7
    1d42:	4828      	ldr	r0, [pc, #160]	; (1de4 <udd_ep_transfer_process+0x1a0>)
    1d44:	4c28      	ldr	r4, [pc, #160]	; (1de8 <udd_ep_transfer_process+0x1a4>)
    1d46:	47a0      	blx	r4
    1d48:	e7a8      	b.n	1c9c <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1d4a:	6843      	ldr	r3, [r0, #4]
    1d4c:	68c2      	ldr	r2, [r0, #12]
    1d4e:	4694      	mov	ip, r2
    1d50:	4463      	add	r3, ip
    1d52:	001e      	movs	r6, r3
    1d54:	4641      	mov	r1, r8
    1d56:	6880      	ldr	r0, [r0, #8]
    1d58:	4b21      	ldr	r3, [pc, #132]	; (1de0 <udd_ep_transfer_process+0x19c>)
    1d5a:	4798      	blx	r3
    1d5c:	000a      	movs	r2, r1
    1d5e:	1e7b      	subs	r3, r7, #1
    1d60:	019b      	lsls	r3, r3, #6
    1d62:	4922      	ldr	r1, [pc, #136]	; (1dec <udd_ep_transfer_process+0x1a8>)
    1d64:	1859      	adds	r1, r3, r1
    1d66:	0030      	movs	r0, r6
    1d68:	4b21      	ldr	r3, [pc, #132]	; (1df0 <udd_ep_transfer_process+0x1ac>)
    1d6a:	4798      	blx	r3
    1d6c:	e782      	b.n	1c74 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1d6e:	464a      	mov	r2, r9
    1d70:	8892      	ldrh	r2, [r2, #4]
    1d72:	4552      	cmp	r2, sl
    1d74:	d000      	beq.n	1d78 <udd_ep_transfer_process+0x134>
    1d76:	e786      	b.n	1c86 <udd_ep_transfer_process+0x42>
    1d78:	429e      	cmp	r6, r3
    1d7a:	d100      	bne.n	1d7e <udd_ep_transfer_process+0x13a>
    1d7c:	e783      	b.n	1c86 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1d7e:	1b9b      	subs	r3, r3, r6
    1d80:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1d82:	4b15      	ldr	r3, [pc, #84]	; (1dd8 <udd_ep_transfer_process+0x194>)
    1d84:	429d      	cmp	r5, r3
    1d86:	d916      	bls.n	1db6 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1d88:	001d      	movs	r5, r3
    1d8a:	4641      	mov	r1, r8
    1d8c:	0018      	movs	r0, r3
    1d8e:	4b13      	ldr	r3, [pc, #76]	; (1ddc <udd_ep_transfer_process+0x198>)
    1d90:	4798      	blx	r3
    1d92:	1a6b      	subs	r3, r5, r1
    1d94:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    1d96:	4598      	cmp	r8, r3
    1d98:	d914      	bls.n	1dc4 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1d9a:	7ca3      	ldrb	r3, [r4, #18]
    1d9c:	2204      	movs	r2, #4
    1d9e:	4313      	orrs	r3, r2
    1da0:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1da2:	1e7a      	subs	r2, r7, #1
    1da4:	0192      	lsls	r2, r2, #6
    1da6:	4b11      	ldr	r3, [pc, #68]	; (1dec <udd_ep_transfer_process+0x1a8>)
    1da8:	18d2      	adds	r2, r2, r3
    1daa:	4643      	mov	r3, r8
    1dac:	0039      	movs	r1, r7
    1dae:	480d      	ldr	r0, [pc, #52]	; (1de4 <udd_ep_transfer_process+0x1a0>)
    1db0:	4c10      	ldr	r4, [pc, #64]	; (1df4 <udd_ep_transfer_process+0x1b0>)
    1db2:	47a0      	blx	r4
    1db4:	e772      	b.n	1c9c <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    1db6:	4641      	mov	r1, r8
    1db8:	0028      	movs	r0, r5
    1dba:	4b09      	ldr	r3, [pc, #36]	; (1de0 <udd_ep_transfer_process+0x19c>)
    1dbc:	4798      	blx	r3
    1dbe:	1a6b      	subs	r3, r5, r1
    1dc0:	b29b      	uxth	r3, r3
    1dc2:	e7e8      	b.n	1d96 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1dc4:	6862      	ldr	r2, [r4, #4]
    1dc6:	1992      	adds	r2, r2, r6
    1dc8:	0039      	movs	r1, r7
    1dca:	4806      	ldr	r0, [pc, #24]	; (1de4 <udd_ep_transfer_process+0x1a0>)
    1dcc:	4c09      	ldr	r4, [pc, #36]	; (1df4 <udd_ep_transfer_process+0x1b0>)
    1dce:	47a0      	blx	r4
    1dd0:	e764      	b.n	1c9c <udd_ep_transfer_process+0x58>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	00001c21 	.word	0x00001c21
    1dd8:	00001fff 	.word	0x00001fff
    1ddc:	00005545 	.word	0x00005545
    1de0:	00005371 	.word	0x00005371
    1de4:	20002dc0 	.word	0x20002dc0
    1de8:	0000385d 	.word	0x0000385d
    1dec:	20002d40 	.word	0x20002d40
    1df0:	000072b1 	.word	0x000072b1
    1df4:	000038b1 	.word	0x000038b1

00001df8 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1df8:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1dfa:	2205      	movs	r2, #5
    1dfc:	4b05      	ldr	r3, [pc, #20]	; (1e14 <udd_ctrl_stall_data+0x1c>)
    1dfe:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1e00:	4c05      	ldr	r4, [pc, #20]	; (1e18 <udd_ctrl_stall_data+0x20>)
    1e02:	2180      	movs	r1, #128	; 0x80
    1e04:	0020      	movs	r0, r4
    1e06:	4b05      	ldr	r3, [pc, #20]	; (1e1c <udd_ctrl_stall_data+0x24>)
    1e08:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1e0a:	2100      	movs	r1, #0
    1e0c:	0020      	movs	r0, r4
    1e0e:	4b04      	ldr	r3, [pc, #16]	; (1e20 <udd_ctrl_stall_data+0x28>)
    1e10:	4798      	blx	r3
}
    1e12:	bd10      	pop	{r4, pc}
    1e14:	2000036a 	.word	0x2000036a
    1e18:	20002dc0 	.word	0x20002dc0
    1e1c:	000037b1 	.word	0x000037b1
    1e20:	000037d7 	.word	0x000037d7

00001e24 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1e24:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1e26:	4c08      	ldr	r4, [pc, #32]	; (1e48 <_usb_device_lpm_suspend+0x24>)
    1e28:	2106      	movs	r1, #6
    1e2a:	0020      	movs	r0, r4
    1e2c:	4d07      	ldr	r5, [pc, #28]	; (1e4c <_usb_device_lpm_suspend+0x28>)
    1e2e:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1e30:	2104      	movs	r1, #4
    1e32:	0020      	movs	r0, r4
    1e34:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1e36:	2102      	movs	r1, #2
    1e38:	0020      	movs	r0, r4
    1e3a:	4b05      	ldr	r3, [pc, #20]	; (1e50 <_usb_device_lpm_suspend+0x2c>)
    1e3c:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    1e3e:	2002      	movs	r0, #2
    1e40:	4b04      	ldr	r3, [pc, #16]	; (1e54 <_usb_device_lpm_suspend+0x30>)
    1e42:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    1e44:	bd70      	pop	{r4, r5, r6, pc}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	20002dc0 	.word	0x20002dc0
    1e4c:	000032f1 	.word	0x000032f1
    1e50:	000032d1 	.word	0x000032d1
    1e54:	00001b61 	.word	0x00001b61

00001e58 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1e58:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1e5a:	4b13      	ldr	r3, [pc, #76]	; (1ea8 <_usb_on_wakeup+0x50>)
    1e5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1e5e:	069b      	lsls	r3, r3, #26
    1e60:	d41c      	bmi.n	1e9c <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1e62:	4911      	ldr	r1, [pc, #68]	; (1ea8 <_usb_on_wakeup+0x50>)
    1e64:	22d0      	movs	r2, #208	; 0xd0
    1e66:	68cb      	ldr	r3, [r1, #12]
    1e68:	4013      	ands	r3, r2
    1e6a:	2bd0      	cmp	r3, #208	; 0xd0
    1e6c:	d1fb      	bne.n	1e66 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1e6e:	4c0f      	ldr	r4, [pc, #60]	; (1eac <_usb_on_wakeup+0x54>)
    1e70:	2102      	movs	r1, #2
    1e72:	0020      	movs	r0, r4
    1e74:	4b0e      	ldr	r3, [pc, #56]	; (1eb0 <_usb_on_wakeup+0x58>)
    1e76:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1e78:	2104      	movs	r1, #4
    1e7a:	0020      	movs	r0, r4
    1e7c:	4d0d      	ldr	r5, [pc, #52]	; (1eb4 <_usb_on_wakeup+0x5c>)
    1e7e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1e80:	4a0d      	ldr	r2, [pc, #52]	; (1eb8 <_usb_on_wakeup+0x60>)
    1e82:	2106      	movs	r1, #6
    1e84:	0020      	movs	r0, r4
    1e86:	4b0d      	ldr	r3, [pc, #52]	; (1ebc <_usb_on_wakeup+0x64>)
    1e88:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1e8a:	2106      	movs	r1, #6
    1e8c:	0020      	movs	r0, r4
    1e8e:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1e90:	2003      	movs	r0, #3
    1e92:	4b0b      	ldr	r3, [pc, #44]	; (1ec0 <_usb_on_wakeup+0x68>)
    1e94:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    1e96:	4b0b      	ldr	r3, [pc, #44]	; (1ec4 <_usb_on_wakeup+0x6c>)
    1e98:	4798      	blx	r3
#endif
}
    1e9a:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1e9c:	4902      	ldr	r1, [pc, #8]	; (1ea8 <_usb_on_wakeup+0x50>)
    1e9e:	2210      	movs	r2, #16
    1ea0:	68cb      	ldr	r3, [r1, #12]
    1ea2:	421a      	tst	r2, r3
    1ea4:	d0fc      	beq.n	1ea0 <_usb_on_wakeup+0x48>
    1ea6:	e7e2      	b.n	1e6e <_usb_on_wakeup+0x16>
    1ea8:	40000800 	.word	0x40000800
    1eac:	20002dc0 	.word	0x20002dc0
    1eb0:	000032f1 	.word	0x000032f1
    1eb4:	000032d1 	.word	0x000032d1
    1eb8:	00001e25 	.word	0x00001e25
    1ebc:	000032ad 	.word	0x000032ad
    1ec0:	00001b61 	.word	0x00001b61
    1ec4:	00004e21 	.word	0x00004e21

00001ec8 <_usb_on_bus_reset>:
{
    1ec8:	b530      	push	{r4, r5, lr}
    1eca:	b083      	sub	sp, #12
    1ecc:	0004      	movs	r4, r0
	udc_reset();
    1ece:	4b1e      	ldr	r3, [pc, #120]	; (1f48 <_usb_on_bus_reset+0x80>)
    1ed0:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1ed2:	2380      	movs	r3, #128	; 0x80
    1ed4:	6822      	ldr	r2, [r4, #0]
    1ed6:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1ed8:	ad01      	add	r5, sp, #4
    1eda:	0028      	movs	r0, r5
    1edc:	4b1b      	ldr	r3, [pc, #108]	; (1f4c <_usb_on_bus_reset+0x84>)
    1ede:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1ee0:	2303      	movs	r3, #3
    1ee2:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1ee4:	0029      	movs	r1, r5
    1ee6:	0020      	movs	r0, r4
    1ee8:	4b19      	ldr	r3, [pc, #100]	; (1f50 <_usb_on_bus_reset+0x88>)
    1eea:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1eec:	4919      	ldr	r1, [pc, #100]	; (1f54 <_usb_on_bus_reset+0x8c>)
    1eee:	0020      	movs	r0, r4
    1ef0:	4b19      	ldr	r3, [pc, #100]	; (1f58 <_usb_on_bus_reset+0x90>)
    1ef2:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1ef4:	4b19      	ldr	r3, [pc, #100]	; (1f5c <_usb_on_bus_reset+0x94>)
    1ef6:	2202      	movs	r2, #2
    1ef8:	2100      	movs	r1, #0
    1efa:	0020      	movs	r0, r4
    1efc:	4d18      	ldr	r5, [pc, #96]	; (1f60 <_usb_on_bus_reset+0x98>)
    1efe:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1f00:	4b18      	ldr	r3, [pc, #96]	; (1f64 <_usb_on_bus_reset+0x9c>)
    1f02:	2200      	movs	r2, #0
    1f04:	2100      	movs	r1, #0
    1f06:	0020      	movs	r0, r4
    1f08:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1f0a:	4b17      	ldr	r3, [pc, #92]	; (1f68 <_usb_on_bus_reset+0xa0>)
    1f0c:	2201      	movs	r2, #1
    1f0e:	2100      	movs	r1, #0
    1f10:	0020      	movs	r0, r4
    1f12:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1f14:	2202      	movs	r2, #2
    1f16:	2100      	movs	r1, #0
    1f18:	0020      	movs	r0, r4
    1f1a:	4d14      	ldr	r5, [pc, #80]	; (1f6c <_usb_on_bus_reset+0xa4>)
    1f1c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1f1e:	2200      	movs	r2, #0
    1f20:	2100      	movs	r1, #0
    1f22:	0020      	movs	r0, r4
    1f24:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1f26:	2201      	movs	r2, #1
    1f28:	2100      	movs	r1, #0
    1f2a:	0020      	movs	r0, r4
    1f2c:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1f2e:	6821      	ldr	r1, [r4, #0]
    1f30:	890b      	ldrh	r3, [r1, #8]
    1f32:	4a0f      	ldr	r2, [pc, #60]	; (1f70 <_usb_on_bus_reset+0xa8>)
    1f34:	401a      	ands	r2, r3
    1f36:	2380      	movs	r3, #128	; 0x80
    1f38:	00db      	lsls	r3, r3, #3
    1f3a:	4313      	orrs	r3, r2
    1f3c:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1f3e:	2200      	movs	r2, #0
    1f40:	4b0c      	ldr	r3, [pc, #48]	; (1f74 <_usb_on_bus_reset+0xac>)
    1f42:	701a      	strb	r2, [r3, #0]
}
    1f44:	b003      	add	sp, #12
    1f46:	bd30      	pop	{r4, r5, pc}
    1f48:	00000789 	.word	0x00000789
    1f4c:	000034fd 	.word	0x000034fd
    1f50:	0000350d 	.word	0x0000350d
    1f54:	20002f40 	.word	0x20002f40
    1f58:	00003901 	.word	0x00003901
    1f5c:	000020b1 	.word	0x000020b1
    1f60:	0000330d 	.word	0x0000330d
    1f64:	000023cd 	.word	0x000023cd
    1f68:	00001fb5 	.word	0x00001fb5
    1f6c:	0000335d 	.word	0x0000335d
    1f70:	fffff3ff 	.word	0xfffff3ff
    1f74:	2000036a 	.word	0x2000036a

00001f78 <udd_ctrl_send_zlp_in>:
{
    1f78:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1f7a:	2203      	movs	r2, #3
    1f7c:	4b07      	ldr	r3, [pc, #28]	; (1f9c <udd_ctrl_send_zlp_in+0x24>)
    1f7e:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1f80:	4c07      	ldr	r4, [pc, #28]	; (1fa0 <udd_ctrl_send_zlp_in+0x28>)
    1f82:	4908      	ldr	r1, [pc, #32]	; (1fa4 <udd_ctrl_send_zlp_in+0x2c>)
    1f84:	0020      	movs	r0, r4
    1f86:	4b08      	ldr	r3, [pc, #32]	; (1fa8 <udd_ctrl_send_zlp_in+0x30>)
    1f88:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1f8a:	4b08      	ldr	r3, [pc, #32]	; (1fac <udd_ctrl_send_zlp_in+0x34>)
    1f8c:	689a      	ldr	r2, [r3, #8]
    1f8e:	2300      	movs	r3, #0
    1f90:	2100      	movs	r1, #0
    1f92:	0020      	movs	r0, r4
    1f94:	4c06      	ldr	r4, [pc, #24]	; (1fb0 <udd_ctrl_send_zlp_in+0x38>)
    1f96:	47a0      	blx	r4
}
    1f98:	bd10      	pop	{r4, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	2000036a 	.word	0x2000036a
    1fa0:	20002dc0 	.word	0x20002dc0
    1fa4:	20002f40 	.word	0x20002f40
    1fa8:	00003901 	.word	0x00003901
    1fac:	20002f28 	.word	0x20002f28
    1fb0:	0000385d 	.word	0x0000385d

00001fb4 <_usb_ep0_on_tansfer_fail>:
{
    1fb4:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1fb6:	7989      	ldrb	r1, [r1, #6]
    1fb8:	b24b      	sxtb	r3, r1
    1fba:	2b00      	cmp	r3, #0
    1fbc:	db06      	blt.n	1fcc <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1fbe:	4b0e      	ldr	r3, [pc, #56]	; (1ff8 <_usb_ep0_on_tansfer_fail+0x44>)
    1fc0:	781b      	ldrb	r3, [r3, #0]
    1fc2:	2b02      	cmp	r3, #2
    1fc4:	d00f      	beq.n	1fe6 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1fc6:	2b03      	cmp	r3, #3
    1fc8:	d011      	beq.n	1fee <_usb_ep0_on_tansfer_fail+0x3a>
}
    1fca:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1fcc:	4b0a      	ldr	r3, [pc, #40]	; (1ff8 <_usb_ep0_on_tansfer_fail+0x44>)
    1fce:	781b      	ldrb	r3, [r3, #0]
    1fd0:	2b01      	cmp	r3, #1
    1fd2:	d005      	beq.n	1fe0 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1fd4:	2b04      	cmp	r3, #4
    1fd6:	d1f8      	bne.n	1fca <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1fd8:	4808      	ldr	r0, [pc, #32]	; (1ffc <_usb_ep0_on_tansfer_fail+0x48>)
    1fda:	4b09      	ldr	r3, [pc, #36]	; (2000 <STACK_SIZE>)
    1fdc:	4798      	blx	r3
    1fde:	e7f4      	b.n	1fca <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1fe0:	4b08      	ldr	r3, [pc, #32]	; (2004 <STACK_SIZE+0x4>)
    1fe2:	4798      	blx	r3
    1fe4:	e7f1      	b.n	1fca <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1fe6:	2204      	movs	r2, #4
    1fe8:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <_usb_ep0_on_tansfer_fail+0x44>)
    1fea:	701a      	strb	r2, [r3, #0]
    1fec:	e7ed      	b.n	1fca <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1fee:	4803      	ldr	r0, [pc, #12]	; (1ffc <_usb_ep0_on_tansfer_fail+0x48>)
    1ff0:	4b03      	ldr	r3, [pc, #12]	; (2000 <STACK_SIZE>)
    1ff2:	4798      	blx	r3
}
    1ff4:	e7e9      	b.n	1fca <_usb_ep0_on_tansfer_fail+0x16>
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	2000036a 	.word	0x2000036a
    1ffc:	20002dc0 	.word	0x20002dc0
    2000:	000037b1 	.word	0x000037b1
    2004:	00001f79 	.word	0x00001f79

00002008 <udd_ctrl_in_sent>:
{
    2008:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    200a:	4b20      	ldr	r3, [pc, #128]	; (208c <udd_ctrl_in_sent+0x84>)
    200c:	881b      	ldrh	r3, [r3, #0]
    200e:	4a20      	ldr	r2, [pc, #128]	; (2090 <udd_ctrl_in_sent+0x88>)
    2010:	8994      	ldrh	r4, [r2, #12]
    2012:	1ae4      	subs	r4, r4, r3
    2014:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2016:	2c00      	cmp	r4, #0
    2018:	d118      	bne.n	204c <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    201a:	4a1e      	ldr	r2, [pc, #120]	; (2094 <udd_ctrl_in_sent+0x8c>)
    201c:	8811      	ldrh	r1, [r2, #0]
    201e:	185b      	adds	r3, r3, r1
    2020:	b29b      	uxth	r3, r3
    2022:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2024:	4a1a      	ldr	r2, [pc, #104]	; (2090 <udd_ctrl_in_sent+0x88>)
    2026:	88d2      	ldrh	r2, [r2, #6]
    2028:	429a      	cmp	r2, r3
    202a:	d023      	beq.n	2074 <udd_ctrl_in_sent+0x6c>
    202c:	4b1a      	ldr	r3, [pc, #104]	; (2098 <udd_ctrl_in_sent+0x90>)
    202e:	781b      	ldrb	r3, [r3, #0]
    2030:	2b00      	cmp	r3, #0
    2032:	d11f      	bne.n	2074 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2034:	4b16      	ldr	r3, [pc, #88]	; (2090 <udd_ctrl_in_sent+0x88>)
    2036:	695b      	ldr	r3, [r3, #20]
    2038:	2b00      	cmp	r3, #0
    203a:	d023      	beq.n	2084 <udd_ctrl_in_sent+0x7c>
    203c:	4798      	blx	r3
    203e:	2800      	cmp	r0, #0
    2040:	d020      	beq.n	2084 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2042:	2200      	movs	r2, #0
    2044:	4b11      	ldr	r3, [pc, #68]	; (208c <udd_ctrl_in_sent+0x84>)
    2046:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2048:	4b11      	ldr	r3, [pc, #68]	; (2090 <udd_ctrl_in_sent+0x88>)
    204a:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    204c:	2c3f      	cmp	r4, #63	; 0x3f
    204e:	d919      	bls.n	2084 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2050:	2200      	movs	r2, #0
    2052:	4b11      	ldr	r3, [pc, #68]	; (2098 <udd_ctrl_in_sent+0x90>)
    2054:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2056:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2058:	4d0c      	ldr	r5, [pc, #48]	; (208c <udd_ctrl_in_sent+0x84>)
    205a:	882b      	ldrh	r3, [r5, #0]
    205c:	4a0c      	ldr	r2, [pc, #48]	; (2090 <udd_ctrl_in_sent+0x88>)
    205e:	6892      	ldr	r2, [r2, #8]
    2060:	18d2      	adds	r2, r2, r3
    2062:	0023      	movs	r3, r4
    2064:	2100      	movs	r1, #0
    2066:	480d      	ldr	r0, [pc, #52]	; (209c <udd_ctrl_in_sent+0x94>)
    2068:	4e0d      	ldr	r6, [pc, #52]	; (20a0 <udd_ctrl_in_sent+0x98>)
    206a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    206c:	882b      	ldrh	r3, [r5, #0]
    206e:	18e4      	adds	r4, r4, r3
    2070:	802c      	strh	r4, [r5, #0]
}
    2072:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2074:	2204      	movs	r2, #4
    2076:	4b0b      	ldr	r3, [pc, #44]	; (20a4 <udd_ctrl_in_sent+0x9c>)
    2078:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    207a:	490b      	ldr	r1, [pc, #44]	; (20a8 <udd_ctrl_in_sent+0xa0>)
    207c:	4807      	ldr	r0, [pc, #28]	; (209c <udd_ctrl_in_sent+0x94>)
    207e:	4b0b      	ldr	r3, [pc, #44]	; (20ac <udd_ctrl_in_sent+0xa4>)
    2080:	4798      	blx	r3
			return;
    2082:	e7f6      	b.n	2072 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2084:	2201      	movs	r2, #1
    2086:	4b04      	ldr	r3, [pc, #16]	; (2098 <udd_ctrl_in_sent+0x90>)
    2088:	701a      	strb	r2, [r3, #0]
    208a:	e7e5      	b.n	2058 <udd_ctrl_in_sent+0x50>
    208c:	20000366 	.word	0x20000366
    2090:	20002f28 	.word	0x20002f28
    2094:	20000368 	.word	0x20000368
    2098:	20000364 	.word	0x20000364
    209c:	20002dc0 	.word	0x20002dc0
    20a0:	0000385d 	.word	0x0000385d
    20a4:	2000036a 	.word	0x2000036a
    20a8:	20002f40 	.word	0x20002f40
    20ac:	00003901 	.word	0x00003901

000020b0 <_usb_ep0_on_setup>:
{
    20b0:	b510      	push	{r4, lr}
    20b2:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    20b4:	4b2c      	ldr	r3, [pc, #176]	; (2168 <_usb_ep0_on_setup+0xb8>)
    20b6:	781b      	ldrb	r3, [r3, #0]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d007      	beq.n	20cc <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    20bc:	4b2b      	ldr	r3, [pc, #172]	; (216c <_usb_ep0_on_setup+0xbc>)
    20be:	691b      	ldr	r3, [r3, #16]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d000      	beq.n	20c6 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    20c4:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    20c6:	2200      	movs	r2, #0
    20c8:	4b27      	ldr	r3, [pc, #156]	; (2168 <_usb_ep0_on_setup+0xb8>)
    20ca:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    20cc:	8823      	ldrh	r3, [r4, #0]
    20ce:	2b08      	cmp	r3, #8
    20d0:	d002      	beq.n	20d8 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    20d2:	4b27      	ldr	r3, [pc, #156]	; (2170 <_usb_ep0_on_setup+0xc0>)
    20d4:	4798      	blx	r3
}
    20d6:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    20d8:	4a24      	ldr	r2, [pc, #144]	; (216c <_usb_ep0_on_setup+0xbc>)
    20da:	4b26      	ldr	r3, [pc, #152]	; (2174 <_usb_ep0_on_setup+0xc4>)
    20dc:	7819      	ldrb	r1, [r3, #0]
    20de:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    20e0:	7859      	ldrb	r1, [r3, #1]
    20e2:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    20e4:	78d8      	ldrb	r0, [r3, #3]
    20e6:	0200      	lsls	r0, r0, #8
    20e8:	7899      	ldrb	r1, [r3, #2]
    20ea:	1809      	adds	r1, r1, r0
    20ec:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    20ee:	7958      	ldrb	r0, [r3, #5]
    20f0:	0200      	lsls	r0, r0, #8
    20f2:	7919      	ldrb	r1, [r3, #4]
    20f4:	1809      	adds	r1, r1, r0
    20f6:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    20f8:	79d9      	ldrb	r1, [r3, #7]
    20fa:	0209      	lsls	r1, r1, #8
    20fc:	799b      	ldrb	r3, [r3, #6]
    20fe:	185b      	adds	r3, r3, r1
    2100:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2102:	4b1d      	ldr	r3, [pc, #116]	; (2178 <_usb_ep0_on_setup+0xc8>)
    2104:	4798      	blx	r3
    2106:	2800      	cmp	r0, #0
    2108:	d016      	beq.n	2138 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    210a:	4b18      	ldr	r3, [pc, #96]	; (216c <_usb_ep0_on_setup+0xbc>)
    210c:	781b      	ldrb	r3, [r3, #0]
    210e:	2b7f      	cmp	r3, #127	; 0x7f
    2110:	d815      	bhi.n	213e <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2112:	4b16      	ldr	r3, [pc, #88]	; (216c <_usb_ep0_on_setup+0xbc>)
    2114:	88db      	ldrh	r3, [r3, #6]
    2116:	2b00      	cmp	r3, #0
    2118:	d022      	beq.n	2160 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    211a:	2300      	movs	r3, #0
    211c:	4a17      	ldr	r2, [pc, #92]	; (217c <_usb_ep0_on_setup+0xcc>)
    211e:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2120:	4a17      	ldr	r2, [pc, #92]	; (2180 <_usb_ep0_on_setup+0xd0>)
    2122:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2124:	2201      	movs	r2, #1
    2126:	4b10      	ldr	r3, [pc, #64]	; (2168 <_usb_ep0_on_setup+0xb8>)
    2128:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    212a:	2340      	movs	r3, #64	; 0x40
    212c:	4a11      	ldr	r2, [pc, #68]	; (2174 <_usb_ep0_on_setup+0xc4>)
    212e:	2100      	movs	r1, #0
    2130:	4814      	ldr	r0, [pc, #80]	; (2184 <_usb_ep0_on_setup+0xd4>)
    2132:	4c15      	ldr	r4, [pc, #84]	; (2188 <_usb_ep0_on_setup+0xd8>)
    2134:	47a0      	blx	r4
    2136:	e7ce      	b.n	20d6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2138:	4b0d      	ldr	r3, [pc, #52]	; (2170 <_usb_ep0_on_setup+0xc0>)
    213a:	4798      	blx	r3
			return;
    213c:	e7cb      	b.n	20d6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    213e:	2300      	movs	r3, #0
    2140:	4a0e      	ldr	r2, [pc, #56]	; (217c <_usb_ep0_on_setup+0xcc>)
    2142:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2144:	4a0e      	ldr	r2, [pc, #56]	; (2180 <_usb_ep0_on_setup+0xd0>)
    2146:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2148:	2202      	movs	r2, #2
    214a:	4b07      	ldr	r3, [pc, #28]	; (2168 <_usb_ep0_on_setup+0xb8>)
    214c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    214e:	2340      	movs	r3, #64	; 0x40
    2150:	4a08      	ldr	r2, [pc, #32]	; (2174 <_usb_ep0_on_setup+0xc4>)
    2152:	2100      	movs	r1, #0
    2154:	480b      	ldr	r0, [pc, #44]	; (2184 <_usb_ep0_on_setup+0xd4>)
    2156:	4c0c      	ldr	r4, [pc, #48]	; (2188 <_usb_ep0_on_setup+0xd8>)
    2158:	47a0      	blx	r4
			udd_ctrl_in_sent();
    215a:	4b0c      	ldr	r3, [pc, #48]	; (218c <_usb_ep0_on_setup+0xdc>)
    215c:	4798      	blx	r3
    215e:	e7ba      	b.n	20d6 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2160:	4b0b      	ldr	r3, [pc, #44]	; (2190 <_usb_ep0_on_setup+0xe0>)
    2162:	4798      	blx	r3
				return;
    2164:	e7b7      	b.n	20d6 <_usb_ep0_on_setup+0x26>
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	2000036a 	.word	0x2000036a
    216c:	20002f28 	.word	0x20002f28
    2170:	00001df9 	.word	0x00001df9
    2174:	20002f40 	.word	0x20002f40
    2178:	00000819 	.word	0x00000819
    217c:	20000368 	.word	0x20000368
    2180:	20000366 	.word	0x20000366
    2184:	20002dc0 	.word	0x20002dc0
    2188:	000038b1 	.word	0x000038b1
    218c:	00002009 	.word	0x00002009
    2190:	00001f79 	.word	0x00001f79

00002194 <_usb_on_sof_notify>:
{
    2194:	b510      	push	{r4, lr}
	udc_sof_notify();
    2196:	4b02      	ldr	r3, [pc, #8]	; (21a0 <_usb_on_sof_notify+0xc>)
    2198:	4798      	blx	r3
	UDC_SOF_EVENT();
    219a:	4b02      	ldr	r3, [pc, #8]	; (21a4 <_usb_on_sof_notify+0x10>)
    219c:	4798      	blx	r3
}
    219e:	bd10      	pop	{r4, pc}
    21a0:	000007d5 	.word	0x000007d5
    21a4:	00004df1 	.word	0x00004df1

000021a8 <_usb_on_suspend>:
{
    21a8:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    21aa:	4c07      	ldr	r4, [pc, #28]	; (21c8 <_usb_on_suspend+0x20>)
    21ac:	2104      	movs	r1, #4
    21ae:	0020      	movs	r0, r4
    21b0:	4b06      	ldr	r3, [pc, #24]	; (21cc <_usb_on_suspend+0x24>)
    21b2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    21b4:	2102      	movs	r1, #2
    21b6:	0020      	movs	r0, r4
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <_usb_on_suspend+0x28>)
    21ba:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    21bc:	2001      	movs	r0, #1
    21be:	4b05      	ldr	r3, [pc, #20]	; (21d4 <_usb_on_suspend+0x2c>)
    21c0:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    21c2:	4b05      	ldr	r3, [pc, #20]	; (21d8 <_usb_on_suspend+0x30>)
    21c4:	4798      	blx	r3
}
    21c6:	bd10      	pop	{r4, pc}
    21c8:	20002dc0 	.word	0x20002dc0
    21cc:	000032f1 	.word	0x000032f1
    21d0:	000032d1 	.word	0x000032d1
    21d4:	00001b61 	.word	0x00001b61
    21d8:	00004e15 	.word	0x00004e15

000021dc <udd_ep_abort>:
{
    21dc:	b510      	push	{r4, lr}
    21de:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    21e0:	0001      	movs	r1, r0
    21e2:	480a      	ldr	r0, [pc, #40]	; (220c <udd_ep_abort+0x30>)
    21e4:	4b0a      	ldr	r3, [pc, #40]	; (2210 <udd_ep_abort+0x34>)
    21e6:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    21e8:	0020      	movs	r0, r4
    21ea:	4b0a      	ldr	r3, [pc, #40]	; (2214 <udd_ep_abort+0x38>)
    21ec:	4798      	blx	r3
	if (!ptr_job->busy) {
    21ee:	7c83      	ldrb	r3, [r0, #18]
    21f0:	07db      	lsls	r3, r3, #31
    21f2:	d50a      	bpl.n	220a <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    21f4:	7c83      	ldrb	r3, [r0, #18]
    21f6:	2201      	movs	r2, #1
    21f8:	4393      	bics	r3, r2
    21fa:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    21fc:	6803      	ldr	r3, [r0, #0]
    21fe:	2b00      	cmp	r3, #0
    2200:	d003      	beq.n	220a <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2202:	68c1      	ldr	r1, [r0, #12]
    2204:	0022      	movs	r2, r4
    2206:	2001      	movs	r0, #1
    2208:	4798      	blx	r3
}
    220a:	bd10      	pop	{r4, pc}
    220c:	20002dc0 	.word	0x20002dc0
    2210:	00003751 	.word	0x00003751
    2214:	00001c21 	.word	0x00001c21

00002218 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2218:	4b02      	ldr	r3, [pc, #8]	; (2224 <udd_get_frame_number+0xc>)
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	8a18      	ldrh	r0, [r3, #16]
    221e:	0480      	lsls	r0, r0, #18
    2220:	0d40      	lsrs	r0, r0, #21
}
    2222:	4770      	bx	lr
    2224:	20002dc0 	.word	0x20002dc0

00002228 <udd_ep_free>:
{
    2228:	b570      	push	{r4, r5, r6, lr}
    222a:	b082      	sub	sp, #8
    222c:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    222e:	ad01      	add	r5, sp, #4
    2230:	0028      	movs	r0, r5
    2232:	4b0d      	ldr	r3, [pc, #52]	; (2268 <udd_ep_free+0x40>)
    2234:	4798      	blx	r3
	udd_ep_abort(ep);
    2236:	0020      	movs	r0, r4
    2238:	4b0c      	ldr	r3, [pc, #48]	; (226c <udd_ep_free+0x44>)
    223a:	4798      	blx	r3
	config_ep.ep_address = ep;
    223c:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    223e:	2300      	movs	r3, #0
    2240:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2242:	4e0b      	ldr	r6, [pc, #44]	; (2270 <udd_ep_free+0x48>)
    2244:	0029      	movs	r1, r5
    2246:	0030      	movs	r0, r6
    2248:	4b0a      	ldr	r3, [pc, #40]	; (2274 <udd_ep_free+0x4c>)
    224a:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    224c:	210f      	movs	r1, #15
    224e:	4021      	ands	r1, r4
    2250:	2200      	movs	r2, #0
    2252:	0030      	movs	r0, r6
    2254:	4b08      	ldr	r3, [pc, #32]	; (2278 <udd_ep_free+0x50>)
    2256:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2258:	2200      	movs	r2, #0
    225a:	0021      	movs	r1, r4
    225c:	0030      	movs	r0, r6
    225e:	4b07      	ldr	r3, [pc, #28]	; (227c <udd_ep_free+0x54>)
    2260:	4798      	blx	r3
}
    2262:	b002      	add	sp, #8
    2264:	bd70      	pop	{r4, r5, r6, pc}
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	000034fd 	.word	0x000034fd
    226c:	000021dd 	.word	0x000021dd
    2270:	20002dc0 	.word	0x20002dc0
    2274:	0000350d 	.word	0x0000350d
    2278:	00003335 	.word	0x00003335
    227c:	0000342d 	.word	0x0000342d

00002280 <udd_ep_alloc>:
{
    2280:	b5f0      	push	{r4, r5, r6, r7, lr}
    2282:	b083      	sub	sp, #12
    2284:	0005      	movs	r5, r0
    2286:	000f      	movs	r7, r1
    2288:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    228a:	ae01      	add	r6, sp, #4
    228c:	0030      	movs	r0, r6
    228e:	4b36      	ldr	r3, [pc, #216]	; (2368 <udd_ep_alloc+0xe8>)
    2290:	4798      	blx	r3
	config_ep.ep_address = ep;
    2292:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2294:	2c08      	cmp	r4, #8
    2296:	d813      	bhi.n	22c0 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2298:	2200      	movs	r2, #0
    229a:	ab01      	add	r3, sp, #4
    229c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    229e:	0028      	movs	r0, r5
    22a0:	4b32      	ldr	r3, [pc, #200]	; (236c <udd_ep_alloc+0xec>)
    22a2:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    22a4:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    22a6:	2103      	movs	r1, #3
    22a8:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    22aa:	2901      	cmp	r1, #1
    22ac:	d038      	beq.n	2320 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    22ae:	2902      	cmp	r1, #2
    22b0:	d043      	beq.n	233a <udd_ep_alloc+0xba>
		return false;
    22b2:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    22b4:	2903      	cmp	r1, #3
    22b6:	d13d      	bne.n	2334 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    22b8:	2204      	movs	r2, #4
    22ba:	ab01      	add	r3, sp, #4
    22bc:	70da      	strb	r2, [r3, #3]
    22be:	e032      	b.n	2326 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    22c0:	2c10      	cmp	r4, #16
    22c2:	d803      	bhi.n	22cc <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    22c4:	2201      	movs	r2, #1
    22c6:	ab01      	add	r3, sp, #4
    22c8:	705a      	strb	r2, [r3, #1]
    22ca:	e7e8      	b.n	229e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    22cc:	2c20      	cmp	r4, #32
    22ce:	d803      	bhi.n	22d8 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    22d0:	2202      	movs	r2, #2
    22d2:	ab01      	add	r3, sp, #4
    22d4:	705a      	strb	r2, [r3, #1]
    22d6:	e7e2      	b.n	229e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    22d8:	2c40      	cmp	r4, #64	; 0x40
    22da:	d803      	bhi.n	22e4 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    22dc:	2203      	movs	r2, #3
    22de:	ab01      	add	r3, sp, #4
    22e0:	705a      	strb	r2, [r3, #1]
    22e2:	e7dc      	b.n	229e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    22e4:	2c80      	cmp	r4, #128	; 0x80
    22e6:	d803      	bhi.n	22f0 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    22e8:	2204      	movs	r2, #4
    22ea:	ab01      	add	r3, sp, #4
    22ec:	705a      	strb	r2, [r3, #1]
    22ee:	e7d6      	b.n	229e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    22f0:	2380      	movs	r3, #128	; 0x80
    22f2:	005b      	lsls	r3, r3, #1
    22f4:	429c      	cmp	r4, r3
    22f6:	d803      	bhi.n	2300 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    22f8:	2205      	movs	r2, #5
    22fa:	ab01      	add	r3, sp, #4
    22fc:	705a      	strb	r2, [r3, #1]
    22fe:	e7ce      	b.n	229e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2300:	2380      	movs	r3, #128	; 0x80
    2302:	009b      	lsls	r3, r3, #2
    2304:	429c      	cmp	r4, r3
    2306:	d803      	bhi.n	2310 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2308:	2206      	movs	r2, #6
    230a:	ab01      	add	r3, sp, #4
    230c:	705a      	strb	r2, [r3, #1]
    230e:	e7c6      	b.n	229e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2310:	4a17      	ldr	r2, [pc, #92]	; (2370 <udd_ep_alloc+0xf0>)
		return false;
    2312:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2314:	4294      	cmp	r4, r2
    2316:	d80d      	bhi.n	2334 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2318:	2207      	movs	r2, #7
    231a:	ab01      	add	r3, sp, #4
    231c:	705a      	strb	r2, [r3, #1]
    231e:	e7be      	b.n	229e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2320:	2202      	movs	r2, #2
    2322:	ab01      	add	r3, sp, #4
    2324:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2326:	a901      	add	r1, sp, #4
    2328:	4812      	ldr	r0, [pc, #72]	; (2374 <udd_ep_alloc+0xf4>)
    232a:	4b13      	ldr	r3, [pc, #76]	; (2378 <udd_ep_alloc+0xf8>)
    232c:	4798      	blx	r3
		return false;
    232e:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2330:	2800      	cmp	r0, #0
    2332:	d006      	beq.n	2342 <udd_ep_alloc+0xc2>
}
    2334:	0018      	movs	r0, r3
    2336:	b003      	add	sp, #12
    2338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    233a:	2203      	movs	r2, #3
    233c:	ab01      	add	r3, sp, #4
    233e:	70da      	strb	r2, [r3, #3]
    2340:	e7f1      	b.n	2326 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2342:	210f      	movs	r1, #15
    2344:	4029      	ands	r1, r5
    2346:	4c0b      	ldr	r4, [pc, #44]	; (2374 <udd_ep_alloc+0xf4>)
    2348:	4b0c      	ldr	r3, [pc, #48]	; (237c <udd_ep_alloc+0xfc>)
    234a:	2200      	movs	r2, #0
    234c:	0020      	movs	r0, r4
    234e:	4e0c      	ldr	r6, [pc, #48]	; (2380 <udd_ep_alloc+0x100>)
    2350:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2352:	2200      	movs	r2, #0
    2354:	0029      	movs	r1, r5
    2356:	0020      	movs	r0, r4
    2358:	4e0a      	ldr	r6, [pc, #40]	; (2384 <udd_ep_alloc+0x104>)
    235a:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    235c:	2201      	movs	r2, #1
    235e:	0029      	movs	r1, r5
    2360:	0020      	movs	r0, r4
    2362:	47b0      	blx	r6
	return true;
    2364:	2301      	movs	r3, #1
    2366:	e7e5      	b.n	2334 <udd_ep_alloc+0xb4>
    2368:	000034fd 	.word	0x000034fd
    236c:	00001c21 	.word	0x00001c21
    2370:	000003ff 	.word	0x000003ff
    2374:	20002dc0 	.word	0x20002dc0
    2378:	0000350d 	.word	0x0000350d
    237c:	00001c45 	.word	0x00001c45
    2380:	0000330d 	.word	0x0000330d
    2384:	0000335d 	.word	0x0000335d

00002388 <udd_ep_is_halted>:
{
    2388:	b510      	push	{r4, lr}
    238a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    238c:	4801      	ldr	r0, [pc, #4]	; (2394 <udd_ep_is_halted+0xc>)
    238e:	4b02      	ldr	r3, [pc, #8]	; (2398 <udd_ep_is_halted+0x10>)
    2390:	4798      	blx	r3
}
    2392:	bd10      	pop	{r4, pc}
    2394:	20002dc0 	.word	0x20002dc0
    2398:	00003787 	.word	0x00003787

0000239c <udd_ep_set_halt>:
{
    239c:	b510      	push	{r4, lr}
    239e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    23a0:	230f      	movs	r3, #15
    23a2:	4003      	ands	r3, r0
		return false;
    23a4:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    23a6:	2b02      	cmp	r3, #2
    23a8:	d900      	bls.n	23ac <udd_ep_set_halt+0x10>
}
    23aa:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    23ac:	0021      	movs	r1, r4
    23ae:	4804      	ldr	r0, [pc, #16]	; (23c0 <udd_ep_set_halt+0x24>)
    23b0:	4b04      	ldr	r3, [pc, #16]	; (23c4 <udd_ep_set_halt+0x28>)
    23b2:	4798      	blx	r3
	udd_ep_abort(ep);
    23b4:	0020      	movs	r0, r4
    23b6:	4b04      	ldr	r3, [pc, #16]	; (23c8 <udd_ep_set_halt+0x2c>)
    23b8:	4798      	blx	r3
	return true;
    23ba:	2001      	movs	r0, #1
    23bc:	e7f5      	b.n	23aa <udd_ep_set_halt+0xe>
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	20002dc0 	.word	0x20002dc0
    23c4:	000037b1 	.word	0x000037b1
    23c8:	000021dd 	.word	0x000021dd

000023cc <_usb_ep0_on_tansfer_ok>:
{
    23cc:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    23ce:	4b34      	ldr	r3, [pc, #208]	; (24a0 <_usb_ep0_on_tansfer_ok+0xd4>)
    23d0:	781b      	ldrb	r3, [r3, #0]
    23d2:	2b01      	cmp	r3, #1
    23d4:	d00a      	beq.n	23ec <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    23d6:	2b02      	cmp	r3, #2
    23d8:	d05f      	beq.n	249a <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    23da:	4b32      	ldr	r3, [pc, #200]	; (24a4 <_usb_ep0_on_tansfer_ok+0xd8>)
    23dc:	691b      	ldr	r3, [r3, #16]
    23de:	2b00      	cmp	r3, #0
    23e0:	d000      	beq.n	23e4 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    23e2:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    23e4:	2200      	movs	r2, #0
    23e6:	4b2e      	ldr	r3, [pc, #184]	; (24a0 <_usb_ep0_on_tansfer_ok+0xd4>)
    23e8:	701a      	strb	r2, [r3, #0]
}
    23ea:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    23ec:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    23ee:	4b2d      	ldr	r3, [pc, #180]	; (24a4 <_usb_ep0_on_tansfer_ok+0xd8>)
    23f0:	899b      	ldrh	r3, [r3, #12]
    23f2:	4a2d      	ldr	r2, [pc, #180]	; (24a8 <_usb_ep0_on_tansfer_ok+0xdc>)
    23f4:	8814      	ldrh	r4, [r2, #0]
    23f6:	1962      	adds	r2, r4, r5
    23f8:	4293      	cmp	r3, r2
    23fa:	da01      	bge.n	2400 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    23fc:	1b1d      	subs	r5, r3, r4
    23fe:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2400:	4b28      	ldr	r3, [pc, #160]	; (24a4 <_usb_ep0_on_tansfer_ok+0xd8>)
    2402:	6898      	ldr	r0, [r3, #8]
    2404:	1900      	adds	r0, r0, r4
    2406:	002a      	movs	r2, r5
    2408:	4928      	ldr	r1, [pc, #160]	; (24ac <_usb_ep0_on_tansfer_ok+0xe0>)
    240a:	4b29      	ldr	r3, [pc, #164]	; (24b0 <_usb_ep0_on_tansfer_ok+0xe4>)
    240c:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    240e:	1964      	adds	r4, r4, r5
    2410:	b2a4      	uxth	r4, r4
    2412:	4b25      	ldr	r3, [pc, #148]	; (24a8 <_usb_ep0_on_tansfer_ok+0xdc>)
    2414:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2416:	2d40      	cmp	r5, #64	; 0x40
    2418:	d00a      	beq.n	2430 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    241a:	4b22      	ldr	r3, [pc, #136]	; (24a4 <_usb_ep0_on_tansfer_ok+0xd8>)
    241c:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    241e:	695b      	ldr	r3, [r3, #20]
    2420:	2b00      	cmp	r3, #0
    2422:	d002      	beq.n	242a <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2424:	4798      	blx	r3
    2426:	2800      	cmp	r0, #0
    2428:	d014      	beq.n	2454 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    242a:	4b22      	ldr	r3, [pc, #136]	; (24b4 <_usb_ep0_on_tansfer_ok+0xe8>)
    242c:	4798      	blx	r3
    242e:	e7dc      	b.n	23ea <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2430:	4b1c      	ldr	r3, [pc, #112]	; (24a4 <_usb_ep0_on_tansfer_ok+0xd8>)
    2432:	88da      	ldrh	r2, [r3, #6]
    2434:	4b20      	ldr	r3, [pc, #128]	; (24b8 <_usb_ep0_on_tansfer_ok+0xec>)
    2436:	881b      	ldrh	r3, [r3, #0]
    2438:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    243a:	429a      	cmp	r2, r3
    243c:	dded      	ble.n	241a <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    243e:	4b19      	ldr	r3, [pc, #100]	; (24a4 <_usb_ep0_on_tansfer_ok+0xd8>)
    2440:	899b      	ldrh	r3, [r3, #12]
    2442:	42a3      	cmp	r3, r4
    2444:	d00c      	beq.n	2460 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2446:	2340      	movs	r3, #64	; 0x40
    2448:	4a18      	ldr	r2, [pc, #96]	; (24ac <_usb_ep0_on_tansfer_ok+0xe0>)
    244a:	2100      	movs	r1, #0
    244c:	481b      	ldr	r0, [pc, #108]	; (24bc <_usb_ep0_on_tansfer_ok+0xf0>)
    244e:	4c1c      	ldr	r4, [pc, #112]	; (24c0 <_usb_ep0_on_tansfer_ok+0xf4>)
    2450:	47a0      	blx	r4
    2452:	e7ca      	b.n	23ea <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2454:	2205      	movs	r2, #5
    2456:	4b12      	ldr	r3, [pc, #72]	; (24a0 <_usb_ep0_on_tansfer_ok+0xd4>)
    2458:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    245a:	4b1a      	ldr	r3, [pc, #104]	; (24c4 <_usb_ep0_on_tansfer_ok+0xf8>)
    245c:	4798      	blx	r3
    245e:	e7c4      	b.n	23ea <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    2460:	4b10      	ldr	r3, [pc, #64]	; (24a4 <_usb_ep0_on_tansfer_ok+0xd8>)
    2462:	695b      	ldr	r3, [r3, #20]
    2464:	2b00      	cmp	r3, #0
    2466:	d00b      	beq.n	2480 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2468:	4798      	blx	r3
    246a:	2800      	cmp	r0, #0
    246c:	d00f      	beq.n	248e <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    246e:	4912      	ldr	r1, [pc, #72]	; (24b8 <_usb_ep0_on_tansfer_ok+0xec>)
    2470:	4a0d      	ldr	r2, [pc, #52]	; (24a8 <_usb_ep0_on_tansfer_ok+0xdc>)
    2472:	880b      	ldrh	r3, [r1, #0]
    2474:	8810      	ldrh	r0, [r2, #0]
    2476:	181b      	adds	r3, r3, r0
    2478:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    247a:	2300      	movs	r3, #0
    247c:	8013      	strh	r3, [r2, #0]
    247e:	e7e2      	b.n	2446 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2480:	2205      	movs	r2, #5
    2482:	4b07      	ldr	r3, [pc, #28]	; (24a0 <_usb_ep0_on_tansfer_ok+0xd4>)
    2484:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2486:	2000      	movs	r0, #0
    2488:	4b0e      	ldr	r3, [pc, #56]	; (24c4 <_usb_ep0_on_tansfer_ok+0xf8>)
    248a:	4798      	blx	r3
    248c:	e7ad      	b.n	23ea <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    248e:	2205      	movs	r2, #5
    2490:	4b03      	ldr	r3, [pc, #12]	; (24a0 <_usb_ep0_on_tansfer_ok+0xd4>)
    2492:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2494:	4b0b      	ldr	r3, [pc, #44]	; (24c4 <_usb_ep0_on_tansfer_ok+0xf8>)
    2496:	4798      	blx	r3
    2498:	e7a7      	b.n	23ea <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    249a:	4b0b      	ldr	r3, [pc, #44]	; (24c8 <_usb_ep0_on_tansfer_ok+0xfc>)
    249c:	4798      	blx	r3
    249e:	e7a4      	b.n	23ea <_usb_ep0_on_tansfer_ok+0x1e>
    24a0:	2000036a 	.word	0x2000036a
    24a4:	20002f28 	.word	0x20002f28
    24a8:	20000366 	.word	0x20000366
    24ac:	20002f40 	.word	0x20002f40
    24b0:	000072b1 	.word	0x000072b1
    24b4:	00001f79 	.word	0x00001f79
    24b8:	20000368 	.word	0x20000368
    24bc:	20002dc0 	.word	0x20002dc0
    24c0:	000038b1 	.word	0x000038b1
    24c4:	0000239d 	.word	0x0000239d
    24c8:	00002009 	.word	0x00002009

000024cc <udd_ep_clear_halt>:
{
    24cc:	b570      	push	{r4, r5, r6, lr}
    24ce:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    24d0:	230f      	movs	r3, #15
    24d2:	4003      	ands	r3, r0
		return false;
    24d4:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    24d6:	2b02      	cmp	r3, #2
    24d8:	d900      	bls.n	24dc <udd_ep_clear_halt+0x10>
}
    24da:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    24dc:	0020      	movs	r0, r4
    24de:	4b09      	ldr	r3, [pc, #36]	; (2504 <udd_ep_clear_halt+0x38>)
    24e0:	4798      	blx	r3
    24e2:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    24e4:	0021      	movs	r1, r4
    24e6:	4808      	ldr	r0, [pc, #32]	; (2508 <udd_ep_clear_halt+0x3c>)
    24e8:	4b08      	ldr	r3, [pc, #32]	; (250c <udd_ep_clear_halt+0x40>)
    24ea:	4798      	blx	r3
	if (ptr_job->busy == true) {
    24ec:	7cab      	ldrb	r3, [r5, #18]
	return true;
    24ee:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    24f0:	07db      	lsls	r3, r3, #31
    24f2:	d5f2      	bpl.n	24da <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    24f4:	7cab      	ldrb	r3, [r5, #18]
    24f6:	2201      	movs	r2, #1
    24f8:	4393      	bics	r3, r2
    24fa:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    24fc:	682b      	ldr	r3, [r5, #0]
    24fe:	4798      	blx	r3
	return true;
    2500:	2001      	movs	r0, #1
    2502:	e7ea      	b.n	24da <udd_ep_clear_halt+0xe>
    2504:	00001c21 	.word	0x00001c21
    2508:	20002dc0 	.word	0x20002dc0
    250c:	000037d7 	.word	0x000037d7

00002510 <udd_ep_run>:
{
    2510:	b5f0      	push	{r4, r5, r6, r7, lr}
    2512:	b087      	sub	sp, #28
    2514:	0005      	movs	r5, r0
    2516:	9103      	str	r1, [sp, #12]
    2518:	9202      	str	r2, [sp, #8]
    251a:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    251c:	260f      	movs	r6, #15
    251e:	4006      	ands	r6, r0
		return false;
    2520:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2522:	2e02      	cmp	r6, #2
    2524:	d902      	bls.n	252c <udd_ep_run+0x1c>
}
    2526:	0020      	movs	r0, r4
    2528:	b007      	add	sp, #28
    252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    252c:	4b64      	ldr	r3, [pc, #400]	; (26c0 <udd_ep_run+0x1b0>)
    252e:	4798      	blx	r3
    2530:	1e04      	subs	r4, r0, #0
    2532:	d000      	beq.n	2536 <udd_ep_run+0x26>
    2534:	e0bd      	b.n	26b2 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    2536:	0028      	movs	r0, r5
    2538:	4b62      	ldr	r3, [pc, #392]	; (26c4 <udd_ep_run+0x1b4>)
    253a:	4798      	blx	r3
    253c:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    253e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2542:	425a      	negs	r2, r3
    2544:	4153      	adcs	r3, r2
    2546:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2548:	b672      	cpsid	i
    254a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    254e:	2200      	movs	r2, #0
    2550:	4b5d      	ldr	r3, [pc, #372]	; (26c8 <udd_ep_run+0x1b8>)
    2552:	701a      	strb	r2, [r3, #0]
	return flags;
    2554:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    2556:	7c83      	ldrb	r3, [r0, #18]
    2558:	07db      	lsls	r3, r3, #31
    255a:	d508      	bpl.n	256e <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    255c:	2a00      	cmp	r2, #0
    255e:	d0e2      	beq.n	2526 <udd_ep_run+0x16>
		cpu_irq_enable();
    2560:	2201      	movs	r2, #1
    2562:	4b59      	ldr	r3, [pc, #356]	; (26c8 <udd_ep_run+0x1b8>)
    2564:	701a      	strb	r2, [r3, #0]
    2566:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    256a:	b662      	cpsie	i
    256c:	e7db      	b.n	2526 <udd_ep_run+0x16>
	ptr_job->busy = true;
    256e:	7c83      	ldrb	r3, [r0, #18]
    2570:	2101      	movs	r1, #1
    2572:	430b      	orrs	r3, r1
    2574:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    2576:	2a00      	cmp	r2, #0
    2578:	d005      	beq.n	2586 <udd_ep_run+0x76>
		cpu_irq_enable();
    257a:	2201      	movs	r2, #1
    257c:	4b52      	ldr	r3, [pc, #328]	; (26c8 <udd_ep_run+0x1b8>)
    257e:	701a      	strb	r2, [r3, #0]
    2580:	f3bf 8f5f 	dmb	sy
    2584:	b662      	cpsie	i
	ptr_job->buf = buf;
    2586:	9b02      	ldr	r3, [sp, #8]
    2588:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    258a:	9b01      	ldr	r3, [sp, #4]
    258c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    258e:	2300      	movs	r3, #0
    2590:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2594:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    2596:	2301      	movs	r3, #1
    2598:	9a03      	ldr	r2, [sp, #12]
    259a:	4013      	ands	r3, r2
    259c:	005a      	lsls	r2, r3, #1
    259e:	7cbb      	ldrb	r3, [r7, #18]
    25a0:	2102      	movs	r1, #2
    25a2:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    25a4:	4313      	orrs	r3, r2
    25a6:	2204      	movs	r2, #4
    25a8:	4393      	bics	r3, r2
    25aa:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    25ac:	b26b      	sxtb	r3, r5
    25ae:	2b00      	cmp	r3, #0
    25b0:	db20      	blt.n	25f4 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    25b2:	9b01      	ldr	r3, [sp, #4]
    25b4:	2b00      	cmp	r3, #0
    25b6:	d06f      	beq.n	2698 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    25b8:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    25ba:	4b44      	ldr	r3, [pc, #272]	; (26cc <udd_ep_run+0x1bc>)
    25bc:	429c      	cmp	r4, r3
    25be:	d95a      	bls.n	2676 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    25c0:	8a39      	ldrh	r1, [r7, #16]
    25c2:	001c      	movs	r4, r3
    25c4:	0018      	movs	r0, r3
    25c6:	4b42      	ldr	r3, [pc, #264]	; (26d0 <udd_ep_run+0x1c0>)
    25c8:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    25ca:	1a63      	subs	r3, r4, r1
    25cc:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    25ce:	8a3b      	ldrh	r3, [r7, #16]
    25d0:	429a      	cmp	r2, r3
    25d2:	d257      	bcs.n	2684 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    25d4:	7cba      	ldrb	r2, [r7, #18]
    25d6:	2104      	movs	r1, #4
    25d8:	430a      	orrs	r2, r1
    25da:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    25dc:	1e72      	subs	r2, r6, #1
    25de:	0192      	lsls	r2, r2, #6
    25e0:	493c      	ldr	r1, [pc, #240]	; (26d4 <udd_ep_run+0x1c4>)
    25e2:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    25e4:	0031      	movs	r1, r6
    25e6:	483c      	ldr	r0, [pc, #240]	; (26d8 <udd_ep_run+0x1c8>)
    25e8:	4c3c      	ldr	r4, [pc, #240]	; (26dc <udd_ep_run+0x1cc>)
    25ea:	47a0      	blx	r4
				return (STATUS_OK ==
    25ec:	4244      	negs	r4, r0
    25ee:	4144      	adcs	r4, r0
    25f0:	b2e4      	uxtb	r4, r4
    25f2:	e798      	b.n	2526 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    25f4:	9b01      	ldr	r3, [sp, #4]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d027      	beq.n	264a <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    25fa:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    25fc:	4b33      	ldr	r3, [pc, #204]	; (26cc <udd_ep_run+0x1bc>)
    25fe:	429d      	cmp	r5, r3
    2600:	d906      	bls.n	2610 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2602:	8a39      	ldrh	r1, [r7, #16]
    2604:	001d      	movs	r5, r3
    2606:	0018      	movs	r0, r3
    2608:	4b31      	ldr	r3, [pc, #196]	; (26d0 <udd_ep_run+0x1c0>)
    260a:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    260c:	1a6b      	subs	r3, r5, r1
    260e:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2610:	7cbb      	ldrb	r3, [r7, #18]
    2612:	079b      	lsls	r3, r3, #30
    2614:	d507      	bpl.n	2626 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    2616:	8a39      	ldrh	r1, [r7, #16]
    2618:	0028      	movs	r0, r5
    261a:	4b31      	ldr	r3, [pc, #196]	; (26e0 <udd_ep_run+0x1d0>)
    261c:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    261e:	b289      	uxth	r1, r1
    2620:	424c      	negs	r4, r1
    2622:	414c      	adcs	r4, r1
    2624:	b2e4      	uxtb	r4, r4
    2626:	2001      	movs	r0, #1
    2628:	4020      	ands	r0, r4
    262a:	0040      	lsls	r0, r0, #1
    262c:	7cbc      	ldrb	r4, [r7, #18]
    262e:	2302      	movs	r3, #2
    2630:	439c      	bics	r4, r3
    2632:	4304      	orrs	r4, r0
    2634:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    2636:	002b      	movs	r3, r5
    2638:	9a02      	ldr	r2, [sp, #8]
    263a:	0031      	movs	r1, r6
    263c:	4826      	ldr	r0, [pc, #152]	; (26d8 <udd_ep_run+0x1c8>)
    263e:	4c29      	ldr	r4, [pc, #164]	; (26e4 <udd_ep_run+0x1d4>)
    2640:	47a0      	blx	r4
		return (STATUS_OK ==
    2642:	4244      	negs	r4, r0
    2644:	4144      	adcs	r4, r0
    2646:	b2e4      	uxtb	r4, r4
    2648:	e76d      	b.n	2526 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    264a:	7cbb      	ldrb	r3, [r7, #18]
    264c:	079b      	lsls	r3, r3, #30
    264e:	d505      	bpl.n	265c <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2650:	7cbb      	ldrb	r3, [r7, #18]
    2652:	2202      	movs	r2, #2
    2654:	4393      	bics	r3, r2
    2656:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    2658:	2500      	movs	r5, #0
    265a:	e7ec      	b.n	2636 <udd_ep_run+0x126>
			ptr_job->busy = false;
    265c:	7cbb      	ldrb	r3, [r7, #18]
    265e:	2201      	movs	r2, #1
    2660:	4393      	bics	r3, r2
    2662:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2666:	2b00      	cmp	r3, #0
    2668:	d025      	beq.n	26b6 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    266a:	002a      	movs	r2, r5
    266c:	2100      	movs	r1, #0
    266e:	2000      	movs	r0, #0
    2670:	4798      	blx	r3
			return true;
    2672:	2401      	movs	r4, #1
    2674:	e757      	b.n	2526 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    2676:	8a39      	ldrh	r1, [r7, #16]
    2678:	0020      	movs	r0, r4
    267a:	4b19      	ldr	r3, [pc, #100]	; (26e0 <udd_ep_run+0x1d0>)
    267c:	4798      	blx	r3
    267e:	1a63      	subs	r3, r4, r1
    2680:	b29a      	uxth	r2, r3
    2682:	e7a4      	b.n	25ce <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2684:	0013      	movs	r3, r2
    2686:	9a02      	ldr	r2, [sp, #8]
    2688:	0031      	movs	r1, r6
    268a:	4813      	ldr	r0, [pc, #76]	; (26d8 <udd_ep_run+0x1c8>)
    268c:	4c13      	ldr	r4, [pc, #76]	; (26dc <udd_ep_run+0x1cc>)
    268e:	47a0      	blx	r4
				return (STATUS_OK ==
    2690:	4244      	negs	r4, r0
    2692:	4144      	adcs	r4, r0
    2694:	b2e4      	uxtb	r4, r4
    2696:	e746      	b.n	2526 <udd_ep_run+0x16>
			ptr_job->busy = false;
    2698:	7cbb      	ldrb	r3, [r7, #18]
    269a:	2201      	movs	r2, #1
    269c:	4393      	bics	r3, r2
    269e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    26a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26a2:	2b00      	cmp	r3, #0
    26a4:	d009      	beq.n	26ba <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    26a6:	002a      	movs	r2, r5
    26a8:	2100      	movs	r1, #0
    26aa:	2000      	movs	r0, #0
    26ac:	4798      	blx	r3
			return true;
    26ae:	2401      	movs	r4, #1
    26b0:	e739      	b.n	2526 <udd_ep_run+0x16>
		return false;
    26b2:	2400      	movs	r4, #0
    26b4:	e737      	b.n	2526 <udd_ep_run+0x16>
			return true;
    26b6:	2401      	movs	r4, #1
    26b8:	e735      	b.n	2526 <udd_ep_run+0x16>
			return true;
    26ba:	2401      	movs	r4, #1
    26bc:	e733      	b.n	2526 <udd_ep_run+0x16>
    26be:	46c0      	nop			; (mov r8, r8)
    26c0:	00002389 	.word	0x00002389
    26c4:	00001c21 	.word	0x00001c21
    26c8:	200000d4 	.word	0x200000d4
    26cc:	00001fff 	.word	0x00001fff
    26d0:	00005545 	.word	0x00005545
    26d4:	20002d40 	.word	0x20002d40
    26d8:	20002dc0 	.word	0x20002dc0
    26dc:	000038b1 	.word	0x000038b1
    26e0:	00005371 	.word	0x00005371
    26e4:	0000385d 	.word	0x0000385d

000026e8 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    26e8:	4b02      	ldr	r3, [pc, #8]	; (26f4 <udd_set_address+0xc>)
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	2280      	movs	r2, #128	; 0x80
    26ee:	4310      	orrs	r0, r2
    26f0:	7298      	strb	r0, [r3, #10]
}
    26f2:	4770      	bx	lr
    26f4:	20002dc0 	.word	0x20002dc0

000026f8 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    26f8:	4b02      	ldr	r3, [pc, #8]	; (2704 <udd_getaddress+0xc>)
    26fa:	681b      	ldr	r3, [r3, #0]
    26fc:	7a98      	ldrb	r0, [r3, #10]
    26fe:	0640      	lsls	r0, r0, #25
    2700:	0e40      	lsrs	r0, r0, #25
}
    2702:	4770      	bx	lr
    2704:	20002dc0 	.word	0x20002dc0

00002708 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    2708:	4b01      	ldr	r3, [pc, #4]	; (2710 <udd_set_setup_payload+0x8>)
    270a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    270c:	8199      	strh	r1, [r3, #12]
}
    270e:	4770      	bx	lr
    2710:	20002f28 	.word	0x20002f28

00002714 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    2714:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    2716:	2003      	movs	r0, #3
    2718:	4b16      	ldr	r3, [pc, #88]	; (2774 <udd_attach+0x60>)
    271a:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    271c:	4c16      	ldr	r4, [pc, #88]	; (2778 <udd_attach+0x64>)
    271e:	6822      	ldr	r2, [r4, #0]
    2720:	8913      	ldrh	r3, [r2, #8]
    2722:	2101      	movs	r1, #1
    2724:	438b      	bics	r3, r1
    2726:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    2728:	4a14      	ldr	r2, [pc, #80]	; (277c <udd_attach+0x68>)
    272a:	3103      	adds	r1, #3
    272c:	0020      	movs	r0, r4
    272e:	4e14      	ldr	r6, [pc, #80]	; (2780 <udd_attach+0x6c>)
    2730:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    2732:	4a14      	ldr	r2, [pc, #80]	; (2784 <udd_attach+0x70>)
    2734:	2100      	movs	r1, #0
    2736:	0020      	movs	r0, r4
    2738:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    273a:	4a13      	ldr	r2, [pc, #76]	; (2788 <udd_attach+0x74>)
    273c:	2101      	movs	r1, #1
    273e:	0020      	movs	r0, r4
    2740:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    2742:	4a12      	ldr	r2, [pc, #72]	; (278c <udd_attach+0x78>)
    2744:	2102      	movs	r1, #2
    2746:	0020      	movs	r0, r4
    2748:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    274a:	2104      	movs	r1, #4
    274c:	0020      	movs	r0, r4
    274e:	4d10      	ldr	r5, [pc, #64]	; (2790 <udd_attach+0x7c>)
    2750:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    2752:	2100      	movs	r1, #0
    2754:	0020      	movs	r0, r4
    2756:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    2758:	2101      	movs	r1, #1
    275a:	0020      	movs	r0, r4
    275c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    275e:	2102      	movs	r1, #2
    2760:	0020      	movs	r0, r4
    2762:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2764:	4a0b      	ldr	r2, [pc, #44]	; (2794 <udd_attach+0x80>)
    2766:	2106      	movs	r1, #6
    2768:	0020      	movs	r0, r4
    276a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    276c:	2106      	movs	r1, #6
    276e:	0020      	movs	r0, r4
    2770:	47a8      	blx	r5
#endif
}
    2772:	bd70      	pop	{r4, r5, r6, pc}
    2774:	00001b61 	.word	0x00001b61
    2778:	20002dc0 	.word	0x20002dc0
    277c:	000021a9 	.word	0x000021a9
    2780:	000032ad 	.word	0x000032ad
    2784:	00002195 	.word	0x00002195
    2788:	00001ec9 	.word	0x00001ec9
    278c:	00001e59 	.word	0x00001e59
    2790:	000032d1 	.word	0x000032d1
    2794:	00001e25 	.word	0x00001e25

00002798 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2798:	b570      	push	{r4, r5, r6, lr}
    279a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    279c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    27a0:	425a      	negs	r2, r3
    27a2:	4153      	adcs	r3, r2
    27a4:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    27a6:	b672      	cpsid	i
    27a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    27ac:	2600      	movs	r6, #0
    27ae:	4b18      	ldr	r3, [pc, #96]	; (2810 <udd_enable+0x78>)
    27b0:	701e      	strb	r6, [r3, #0]
	return flags;
    27b2:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    27b4:	ad01      	add	r5, sp, #4
    27b6:	0028      	movs	r0, r5
    27b8:	4b16      	ldr	r3, [pc, #88]	; (2814 <udd_enable+0x7c>)
    27ba:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    27bc:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    27be:	4e16      	ldr	r6, [pc, #88]	; (2818 <udd_enable+0x80>)
    27c0:	002a      	movs	r2, r5
    27c2:	4916      	ldr	r1, [pc, #88]	; (281c <udd_enable+0x84>)
    27c4:	0030      	movs	r0, r6
    27c6:	4b16      	ldr	r3, [pc, #88]	; (2820 <udd_enable+0x88>)
    27c8:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    27ca:	0030      	movs	r0, r6
    27cc:	4b15      	ldr	r3, [pc, #84]	; (2824 <udd_enable+0x8c>)
    27ce:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    27d0:	4b15      	ldr	r3, [pc, #84]	; (2828 <udd_enable+0x90>)
    27d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    27d4:	069b      	lsls	r3, r3, #26
    27d6:	d414      	bmi.n	2802 <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    27d8:	4913      	ldr	r1, [pc, #76]	; (2828 <udd_enable+0x90>)
    27da:	22d0      	movs	r2, #208	; 0xd0
    27dc:	68cb      	ldr	r3, [r1, #12]
    27de:	4013      	ands	r3, r2
    27e0:	2bd0      	cmp	r3, #208	; 0xd0
    27e2:	d1fb      	bne.n	27dc <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    27e4:	2001      	movs	r0, #1
    27e6:	4b11      	ldr	r3, [pc, #68]	; (282c <udd_enable+0x94>)
    27e8:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    27ea:	4b11      	ldr	r3, [pc, #68]	; (2830 <udd_enable+0x98>)
    27ec:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    27ee:	2c00      	cmp	r4, #0
    27f0:	d005      	beq.n	27fe <udd_enable+0x66>
		cpu_irq_enable();
    27f2:	2201      	movs	r2, #1
    27f4:	4b06      	ldr	r3, [pc, #24]	; (2810 <udd_enable+0x78>)
    27f6:	701a      	strb	r2, [r3, #0]
    27f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    27fc:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    27fe:	b002      	add	sp, #8
    2800:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2802:	4909      	ldr	r1, [pc, #36]	; (2828 <udd_enable+0x90>)
    2804:	2210      	movs	r2, #16
    2806:	68cb      	ldr	r3, [r1, #12]
    2808:	421a      	tst	r2, r3
    280a:	d0fc      	beq.n	2806 <udd_enable+0x6e>
    280c:	e7ea      	b.n	27e4 <udd_enable+0x4c>
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	200000d4 	.word	0x200000d4
    2814:	00003f0d 	.word	0x00003f0d
    2818:	20002dc0 	.word	0x20002dc0
    281c:	41005000 	.word	0x41005000
    2820:	00003f1d 	.word	0x00003f1d
    2824:	00003931 	.word	0x00003931
    2828:	40000800 	.word	0x40000800
    282c:	00001b61 	.word	0x00001b61
    2830:	00002715 	.word	0x00002715

00002834 <findCommand>:
 *
 * Description: Returns the string command that was input as a number.
 * Last Modified: 11/1/17
 *
 ******************************************************************/
cmd findCommand(char *command) {
    2834:	b510      	push	{r4, lr}
    2836:	0004      	movs	r4, r0
    if (0 == strcmp(command, RREG_CMD)) return CMD_RREG;
    2838:	491c      	ldr	r1, [pc, #112]	; (28ac <findCommand+0x78>)
    283a:	4b1d      	ldr	r3, [pc, #116]	; (28b0 <findCommand+0x7c>)
    283c:	4798      	blx	r3
    283e:	2301      	movs	r3, #1
    2840:	2800      	cmp	r0, #0
    2842:	d006      	beq.n	2852 <findCommand+0x1e>
    else if (0 == strcmp(command, ADD_CMD)) return CMD_ADD;
    2844:	491b      	ldr	r1, [pc, #108]	; (28b4 <findCommand+0x80>)
    2846:	0020      	movs	r0, r4
    2848:	4b19      	ldr	r3, [pc, #100]	; (28b0 <findCommand+0x7c>)
    284a:	4798      	blx	r3
    284c:	2302      	movs	r3, #2
    284e:	2800      	cmp	r0, #0
    2850:	d101      	bne.n	2856 <findCommand+0x22>
    else if (0 == strcmp(command, START_CMD)) return CMD_START;
    else if (0 == strcmp(command, QRY_CMD)) return CMD_QRY;
	else if (0 == strcmp(command, RST_CMD)) return CMD_RST;
    else if (0 == strcmp(command, CRPT_CMD)) return CMD_CRPT;
    else return CMD_ERR;
}
    2852:	0018      	movs	r0, r3
    2854:	bd10      	pop	{r4, pc}
    else if (0 == strcmp(command, RM_CMD)) return CMD_RM;
    2856:	4918      	ldr	r1, [pc, #96]	; (28b8 <findCommand+0x84>)
    2858:	0020      	movs	r0, r4
    285a:	4b15      	ldr	r3, [pc, #84]	; (28b0 <findCommand+0x7c>)
    285c:	4798      	blx	r3
    285e:	2303      	movs	r3, #3
    2860:	2800      	cmp	r0, #0
    2862:	d0f6      	beq.n	2852 <findCommand+0x1e>
    else if (0 == strcmp(command, STOP_CMD)) return CMD_STOP;
    2864:	4915      	ldr	r1, [pc, #84]	; (28bc <findCommand+0x88>)
    2866:	0020      	movs	r0, r4
    2868:	4b11      	ldr	r3, [pc, #68]	; (28b0 <findCommand+0x7c>)
    286a:	4798      	blx	r3
    286c:	2304      	movs	r3, #4
    286e:	2800      	cmp	r0, #0
    2870:	d0ef      	beq.n	2852 <findCommand+0x1e>
    else if (0 == strcmp(command, START_CMD)) return CMD_START;
    2872:	4913      	ldr	r1, [pc, #76]	; (28c0 <findCommand+0x8c>)
    2874:	0020      	movs	r0, r4
    2876:	4b0e      	ldr	r3, [pc, #56]	; (28b0 <findCommand+0x7c>)
    2878:	4798      	blx	r3
    287a:	2305      	movs	r3, #5
    287c:	2800      	cmp	r0, #0
    287e:	d0e8      	beq.n	2852 <findCommand+0x1e>
    else if (0 == strcmp(command, QRY_CMD)) return CMD_QRY;
    2880:	4910      	ldr	r1, [pc, #64]	; (28c4 <findCommand+0x90>)
    2882:	0020      	movs	r0, r4
    2884:	4b0a      	ldr	r3, [pc, #40]	; (28b0 <findCommand+0x7c>)
    2886:	4798      	blx	r3
    2888:	2306      	movs	r3, #6
    288a:	2800      	cmp	r0, #0
    288c:	d0e1      	beq.n	2852 <findCommand+0x1e>
	else if (0 == strcmp(command, RST_CMD)) return CMD_RST;
    288e:	490e      	ldr	r1, [pc, #56]	; (28c8 <findCommand+0x94>)
    2890:	0020      	movs	r0, r4
    2892:	4b07      	ldr	r3, [pc, #28]	; (28b0 <findCommand+0x7c>)
    2894:	4798      	blx	r3
    2896:	2307      	movs	r3, #7
    2898:	2800      	cmp	r0, #0
    289a:	d0da      	beq.n	2852 <findCommand+0x1e>
    else if (0 == strcmp(command, CRPT_CMD)) return CMD_CRPT;
    289c:	490b      	ldr	r1, [pc, #44]	; (28cc <findCommand+0x98>)
    289e:	0020      	movs	r0, r4
    28a0:	4b03      	ldr	r3, [pc, #12]	; (28b0 <findCommand+0x7c>)
    28a2:	4798      	blx	r3
    else return CMD_ERR;
    28a4:	4243      	negs	r3, r0
    28a6:	4143      	adcs	r3, r0
    28a8:	00db      	lsls	r3, r3, #3
    28aa:	e7d2      	b.n	2852 <findCommand+0x1e>
    28ac:	0000a6c8 	.word	0x0000a6c8
    28b0:	000074ad 	.word	0x000074ad
    28b4:	0000a6d0 	.word	0x0000a6d0
    28b8:	0000a6d4 	.word	0x0000a6d4
    28bc:	0000a6d8 	.word	0x0000a6d8
    28c0:	0000a6e0 	.word	0x0000a6e0
    28c4:	0000a6e8 	.word	0x0000a6e8
    28c8:	0000a6ec 	.word	0x0000a6ec
    28cc:	0000a6f0 	.word	0x0000a6f0

000028d0 <sampling_init>:
 * Description: Initializes all variables for sampline sets
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void sampling_init(void) {
	bufLen = 0;
    28d0:	2200      	movs	r2, #0
    28d2:	4b01      	ldr	r3, [pc, #4]	; (28d8 <sampling_init+0x8>)
    28d4:	601a      	str	r2, [r3, #0]
}
    28d6:	4770      	bx	lr
    28d8:	20002f80 	.word	0x20002f80

000028dc <interruptEnable>:
 *
 * Description: Enables the interrupts as needed
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void interruptEnable(bool en) {
    28dc:	b510      	push	{r4, lr}
    28de:	0004      	movs	r4, r0
	startADC(en);
    28e0:	4b08      	ldr	r3, [pc, #32]	; (2904 <interruptEnable+0x28>)
    28e2:	4798      	blx	r3
	enableDrdy(en);
    28e4:	0020      	movs	r0, r4
    28e6:	4b08      	ldr	r3, [pc, #32]	; (2908 <interruptEnable+0x2c>)
    28e8:	4798      	blx	r3
    if(en) ss = GO;
    28ea:	2c00      	cmp	r4, #0
    28ec:	d003      	beq.n	28f6 <interruptEnable+0x1a>
    28ee:	2202      	movs	r2, #2
    28f0:	4b06      	ldr	r3, [pc, #24]	; (290c <interruptEnable+0x30>)
    28f2:	701a      	strb	r2, [r3, #0]
    else {
        ss = STOP;
		disable_timer();
    }
}
    28f4:	bd10      	pop	{r4, pc}
        ss = STOP;
    28f6:	2201      	movs	r2, #1
    28f8:	4b04      	ldr	r3, [pc, #16]	; (290c <interruptEnable+0x30>)
    28fa:	701a      	strb	r2, [r3, #0]
		disable_timer();
    28fc:	4b04      	ldr	r3, [pc, #16]	; (2910 <interruptEnable+0x34>)
    28fe:	4798      	blx	r3
}
    2900:	e7f8      	b.n	28f4 <interruptEnable+0x18>
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	00000315 	.word	0x00000315
    2908:	000002f1 	.word	0x000002f1
    290c:	200000ce 	.word	0x200000ce
    2910:	00002ff9 	.word	0x00002ff9

00002914 <stop>:
startS stop(void) {
    2914:	b510      	push	{r4, lr}
	interruptEnable(false);
    2916:	2000      	movs	r0, #0
    2918:	4b03      	ldr	r3, [pc, #12]	; (2928 <stop+0x14>)
    291a:	4798      	blx	r3
    return ss = STOP;
    291c:	2201      	movs	r2, #1
    291e:	4b03      	ldr	r3, [pc, #12]	; (292c <stop+0x18>)
    2920:	701a      	strb	r2, [r3, #0]
}
    2922:	2001      	movs	r0, #1
    2924:	bd10      	pop	{r4, pc}
    2926:	46c0      	nop			; (mov r8, r8)
    2928:	000028dd 	.word	0x000028dd
    292c:	200000ce 	.word	0x200000ce

00002930 <setRate>:
void setRate(float rate) {
    2930:	b510      	push	{r4, lr}
    2932:	1c04      	adds	r4, r0, #0
    changeSampleRate(determineADCRate(rate));
    2934:	4b05      	ldr	r3, [pc, #20]	; (294c <setRate+0x1c>)
    2936:	4798      	blx	r3
    2938:	4b05      	ldr	r3, [pc, #20]	; (2950 <setRate+0x20>)
    293a:	4798      	blx	r3
    reconfig_timer(rate);
    293c:	1c20      	adds	r0, r4, #0
    293e:	4b05      	ldr	r3, [pc, #20]	; (2954 <setRate+0x24>)
    2940:	4798      	blx	r3
    interruptEnable(true);
    2942:	2001      	movs	r0, #1
    2944:	4b04      	ldr	r3, [pc, #16]	; (2958 <setRate+0x28>)
    2946:	4798      	blx	r3
}
    2948:	bd10      	pop	{r4, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	000003ed 	.word	0x000003ed
    2950:	00000115 	.word	0x00000115
    2954:	00003019 	.word	0x00003019
    2958:	000028dd 	.word	0x000028dd

0000295c <status_check>:
void status_check(void) {
    295c:	b510      	push	{r4, lr}
    295e:	b082      	sub	sp, #8
	uint8_t temp, s[2] = {STOP_ADC,START_ADC};
    2960:	4b0e      	ldr	r3, [pc, #56]	; (299c <status_check+0x40>)
    2962:	881a      	ldrh	r2, [r3, #0]
    2964:	ab01      	add	r3, sp, #4
    2966:	801a      	strh	r2, [r3, #0]
    if ((temp = dec()) == NULL) stop();
    2968:	4b0d      	ldr	r3, [pc, #52]	; (29a0 <status_check+0x44>)
    296a:	4798      	blx	r3
    296c:	2800      	cmp	r0, #0
    296e:	d003      	beq.n	2978 <status_check+0x1c>
    else if (temp == 2) {
    2970:	2802      	cmp	r0, #2
    2972:	d004      	beq.n	297e <status_check+0x22>
}
    2974:	b002      	add	sp, #8
    2976:	bd10      	pop	{r4, pc}
    if ((temp = dec()) == NULL) stop();
    2978:	4b0a      	ldr	r3, [pc, #40]	; (29a4 <status_check+0x48>)
    297a:	4798      	blx	r3
    297c:	e7fa      	b.n	2974 <status_check+0x18>
		setRate(queue->rate);
    297e:	4c0a      	ldr	r4, [pc, #40]	; (29a8 <status_check+0x4c>)
    2980:	6823      	ldr	r3, [r4, #0]
    2982:	6898      	ldr	r0, [r3, #8]
    2984:	4b09      	ldr	r3, [pc, #36]	; (29ac <status_check+0x50>)
    2986:	4798      	blx	r3
		change_channel(queue->channels);
    2988:	6823      	ldr	r3, [r4, #0]
    298a:	7818      	ldrb	r0, [r3, #0]
    298c:	4b08      	ldr	r3, [pc, #32]	; (29b0 <status_check+0x54>)
    298e:	4798      	blx	r3
		txrx_wait(s,2);
    2990:	2102      	movs	r1, #2
    2992:	a801      	add	r0, sp, #4
    2994:	4b07      	ldr	r3, [pc, #28]	; (29b4 <status_check+0x58>)
    2996:	4798      	blx	r3
}
    2998:	e7ec      	b.n	2974 <status_check+0x18>
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	0000a6f8 	.word	0x0000a6f8
    29a0:	00002e69 	.word	0x00002e69
    29a4:	00002915 	.word	0x00002915
    29a8:	20000408 	.word	0x20000408
    29ac:	00002931 	.word	0x00002931
    29b0:	0000012d 	.word	0x0000012d
    29b4:	00002cad 	.word	0x00002cad

000029b8 <start>:
startS start(void) {
    29b8:	b510      	push	{r4, lr}
    if (ss == STOP && queue != NULL) {
    29ba:	4b0a      	ldr	r3, [pc, #40]	; (29e4 <start+0x2c>)
    29bc:	7818      	ldrb	r0, [r3, #0]
    29be:	2801      	cmp	r0, #1
    29c0:	d000      	beq.n	29c4 <start+0xc>
}
    29c2:	bd10      	pop	{r4, pc}
    if (ss == STOP && queue != NULL) {
    29c4:	4b08      	ldr	r3, [pc, #32]	; (29e8 <start+0x30>)
    29c6:	681b      	ldr	r3, [r3, #0]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d0fa      	beq.n	29c2 <start+0xa>
        setRate(queue->rate);
    29cc:	6898      	ldr	r0, [r3, #8]
    29ce:	4b07      	ldr	r3, [pc, #28]	; (29ec <start+0x34>)
    29d0:	4798      	blx	r3
        timer_done = false;
    29d2:	2300      	movs	r3, #0
    29d4:	4a06      	ldr	r2, [pc, #24]	; (29f0 <start+0x38>)
    29d6:	7013      	strb	r3, [r2, #0]
        dataRdy = false;
    29d8:	4a06      	ldr	r2, [pc, #24]	; (29f4 <start+0x3c>)
    29da:	7013      	strb	r3, [r2, #0]
		bufLen = 0;
    29dc:	4a06      	ldr	r2, [pc, #24]	; (29f8 <start+0x40>)
    29de:	6013      	str	r3, [r2, #0]
        return START;
    29e0:	2000      	movs	r0, #0
    29e2:	e7ee      	b.n	29c2 <start+0xa>
    29e4:	200000ce 	.word	0x200000ce
    29e8:	20000408 	.word	0x20000408
    29ec:	00002931 	.word	0x00002931
    29f0:	200056ad 	.word	0x200056ad
    29f4:	200002cc 	.word	0x200002cc
    29f8:	20002f80 	.word	0x20002f80

000029fc <readData>:
 *
 * Description: Reads data from the ADC buffer to the data buffer
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint32_t readData(void) {
    29fc:	b510      	push	{r4, lr}
    uint32_t i;
    
	if (queue != NULL && ss != STOP) {
    29fe:	4b1f      	ldr	r3, [pc, #124]	; (2a7c <readData+0x80>)
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	2b00      	cmp	r3, #0
    2a04:	d036      	beq.n	2a74 <readData+0x78>
    2a06:	4a1e      	ldr	r2, [pc, #120]	; (2a80 <readData+0x84>)
    2a08:	7812      	ldrb	r2, [r2, #0]
    2a0a:	2a01      	cmp	r2, #1
    2a0c:	d034      	beq.n	2a78 <readData+0x7c>
        // Timer function checks if data is ready before setting the timer_done flag
        if (timer_done) {
    2a0e:	4a1d      	ldr	r2, [pc, #116]	; (2a84 <readData+0x88>)
    2a10:	7812      	ldrb	r2, [r2, #0]
    2a12:	2a00      	cmp	r2, #0
    2a14:	d101      	bne.n	2a1a <readData+0x1e>
            }
            for (i = 4; i < ADC_BYTES_PER_SAMPLE+4; i++) dataBuf[bufLen++] = adcData[i];
            status_check();
            system_interrupt_leave_critical_section();
        }
        return (queue != NULL) ? queue->num : 0;
    2a16:	6858      	ldr	r0, [r3, #4]
    }
    else return 0;
}
    2a18:	bd10      	pop	{r4, pc}
	cpu_irq_enter_critical();
    2a1a:	4b1b      	ldr	r3, [pc, #108]	; (2a88 <readData+0x8c>)
    2a1c:	4798      	blx	r3
            timer_done = false;
    2a1e:	2200      	movs	r2, #0
    2a20:	4b18      	ldr	r3, [pc, #96]	; (2a84 <readData+0x88>)
    2a22:	701a      	strb	r2, [r3, #0]
            if (bufLen > (BUFFER_LENGTH - ADC_BYTES_PER_SAMPLE)) {
    2a24:	4b19      	ldr	r3, [pc, #100]	; (2a8c <readData+0x90>)
    2a26:	681c      	ldr	r4, [r3, #0]
    2a28:	4b19      	ldr	r3, [pc, #100]	; (2a90 <readData+0x94>)
    2a2a:	429c      	cmp	r4, r3
    2a2c:	d817      	bhi.n	2a5e <readData+0x62>
    2a2e:	4b19      	ldr	r3, [pc, #100]	; (2a94 <readData+0x98>)
    2a30:	4a19      	ldr	r2, [pc, #100]	; (2a98 <readData+0x9c>)
    2a32:	18a2      	adds	r2, r4, r2
    2a34:	0018      	movs	r0, r3
    2a36:	3012      	adds	r0, #18
            for (i = 4; i < ADC_BYTES_PER_SAMPLE+4; i++) dataBuf[bufLen++] = adcData[i];
    2a38:	7819      	ldrb	r1, [r3, #0]
    2a3a:	7011      	strb	r1, [r2, #0]
    2a3c:	3301      	adds	r3, #1
    2a3e:	3201      	adds	r2, #1
    2a40:	4283      	cmp	r3, r0
    2a42:	d1f9      	bne.n	2a38 <readData+0x3c>
    2a44:	3412      	adds	r4, #18
    2a46:	4b11      	ldr	r3, [pc, #68]	; (2a8c <readData+0x90>)
    2a48:	601c      	str	r4, [r3, #0]
            status_check();
    2a4a:	4b14      	ldr	r3, [pc, #80]	; (2a9c <readData+0xa0>)
    2a4c:	4798      	blx	r3
	cpu_irq_leave_critical();
    2a4e:	4b14      	ldr	r3, [pc, #80]	; (2aa0 <readData+0xa4>)
    2a50:	4798      	blx	r3
        return (queue != NULL) ? queue->num : 0;
    2a52:	4b0a      	ldr	r3, [pc, #40]	; (2a7c <readData+0x80>)
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	2000      	movs	r0, #0
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d0dd      	beq.n	2a18 <readData+0x1c>
    2a5c:	e7db      	b.n	2a16 <readData+0x1a>
                corrupt_sample_set = true;
    2a5e:	3201      	adds	r2, #1
    2a60:	4b10      	ldr	r3, [pc, #64]	; (2aa4 <readData+0xa8>)
    2a62:	701a      	strb	r2, [r3, #0]
                corruption_amount += ADC_BYTES_PER_SAMPLE+4;
    2a64:	4a10      	ldr	r2, [pc, #64]	; (2aa8 <readData+0xac>)
    2a66:	6813      	ldr	r3, [r2, #0]
    2a68:	3316      	adds	r3, #22
    2a6a:	6013      	str	r3, [r2, #0]
                return queue->num;
    2a6c:	4b03      	ldr	r3, [pc, #12]	; (2a7c <readData+0x80>)
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	6858      	ldr	r0, [r3, #4]
    2a72:	e7d1      	b.n	2a18 <readData+0x1c>
    else return 0;
    2a74:	2000      	movs	r0, #0
    2a76:	e7cf      	b.n	2a18 <readData+0x1c>
    2a78:	2000      	movs	r0, #0
    2a7a:	e7cd      	b.n	2a18 <readData+0x1c>
    2a7c:	20000408 	.word	0x20000408
    2a80:	200000ce 	.word	0x200000ce
    2a84:	200056ad 	.word	0x200056ad
    2a88:	00004205 	.word	0x00004205
    2a8c:	20002f80 	.word	0x20002f80
    2a90:	000026fe 	.word	0x000026fe
    2a94:	20002be4 	.word	0x20002be4
    2a98:	20002f84 	.word	0x20002f84
    2a9c:	0000295d 	.word	0x0000295d
    2aa0:	00004245 	.word	0x00004245
    2aa4:	200003bd 	.word	0x200003bd
    2aa8:	200003c0 	.word	0x200003c0

00002aac <send_ADC_data>:
 *
 * Description: Gets data ready to send over USB
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint32_t send_ADC_data(void* dest, uint16_t numBytes) {
    2aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aae:	0003      	movs	r3, r0
	uint8_t* destPtr = (uint8_t*) dest;
	uint32_t i;
	
	if (bufLen < ADC_BYTES_PER_SAMPLE || numBytes < bufLen) return 0;
    2ab0:	4a1e      	ldr	r2, [pc, #120]	; (2b2c <send_ADC_data+0x80>)
    2ab2:	6810      	ldr	r0, [r2, #0]
    2ab4:	2811      	cmp	r0, #17
    2ab6:	d934      	bls.n	2b22 <send_ADC_data+0x76>
    2ab8:	4288      	cmp	r0, r1
    2aba:	d834      	bhi.n	2b26 <send_ADC_data+0x7a>
	
    for (i = 0; numBytes >= ADC_BYTES_PER_SAMPLE && i < bufLen; numBytes--) *destPtr++ = dataBuf[i++];
    2abc:	2911      	cmp	r1, #17
    2abe:	d923      	bls.n	2b08 <send_ADC_data+0x5c>
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d024      	beq.n	2b0e <send_ADC_data+0x62>
    2ac4:	2200      	movs	r2, #0
    2ac6:	4d1a      	ldr	r5, [pc, #104]	; (2b30 <send_ADC_data+0x84>)
    2ac8:	4e18      	ldr	r6, [pc, #96]	; (2b2c <send_ADC_data+0x80>)
    2aca:	1c5c      	adds	r4, r3, #1
    2acc:	1c50      	adds	r0, r2, #1
    2ace:	5caa      	ldrb	r2, [r5, r2]
    2ad0:	701a      	strb	r2, [r3, #0]
    2ad2:	3901      	subs	r1, #1
    2ad4:	b289      	uxth	r1, r1
    2ad6:	2911      	cmp	r1, #17
    2ad8:	d004      	beq.n	2ae4 <send_ADC_data+0x38>
    2ada:	0023      	movs	r3, r4
    2adc:	0002      	movs	r2, r0
    2ade:	6837      	ldr	r7, [r6, #0]
    2ae0:	4287      	cmp	r7, r0
    2ae2:	d8f2      	bhi.n	2aca <send_ADC_data+0x1e>
    bufLen = 0;
    2ae4:	2200      	movs	r2, #0
    2ae6:	4b11      	ldr	r3, [pc, #68]	; (2b2c <send_ADC_data+0x80>)
    2ae8:	601a      	str	r2, [r3, #0]
    
    if (corrupt_sample_set) {
    2aea:	4b12      	ldr	r3, [pc, #72]	; (2b34 <send_ADC_data+0x88>)
    2aec:	781b      	ldrb	r3, [r3, #0]
    2aee:	2b00      	cmp	r3, #0
    2af0:	d018      	beq.n	2b24 <send_ADC_data+0x78>
        if (numBytes <= corruption_amount) {
    2af2:	4b11      	ldr	r3, [pc, #68]	; (2b38 <send_ADC_data+0x8c>)
    2af4:	681b      	ldr	r3, [r3, #0]
    2af6:	4299      	cmp	r1, r3
    2af8:	dd0b      	ble.n	2b12 <send_ADC_data+0x66>
            corruption_amount -= numBytes;
            numBytes = 0;
            i += numBytes;
        }
        else {
            *destPtr += corruption_amount;
    2afa:	7822      	ldrb	r2, [r4, #0]
    2afc:	18d3      	adds	r3, r2, r3
    2afe:	7023      	strb	r3, [r4, #0]
            numBytes -= corruption_amount;
            corruption_amount = 0;
    2b00:	2200      	movs	r2, #0
    2b02:	4b0d      	ldr	r3, [pc, #52]	; (2b38 <send_ADC_data+0x8c>)
    2b04:	601a      	str	r2, [r3, #0]
    2b06:	e00d      	b.n	2b24 <send_ADC_data+0x78>
    for (i = 0; numBytes >= ADC_BYTES_PER_SAMPLE && i < bufLen; numBytes--) *destPtr++ = dataBuf[i++];
    2b08:	001c      	movs	r4, r3
    2b0a:	2000      	movs	r0, #0
    2b0c:	e7ea      	b.n	2ae4 <send_ADC_data+0x38>
    2b0e:	001c      	movs	r4, r3
    2b10:	e7e8      	b.n	2ae4 <send_ADC_data+0x38>
            *destPtr += numBytes;
    2b12:	7823      	ldrb	r3, [r4, #0]
    2b14:	185b      	adds	r3, r3, r1
    2b16:	7023      	strb	r3, [r4, #0]
            corruption_amount -= numBytes;
    2b18:	4b07      	ldr	r3, [pc, #28]	; (2b38 <send_ADC_data+0x8c>)
    2b1a:	681a      	ldr	r2, [r3, #0]
    2b1c:	1a51      	subs	r1, r2, r1
    2b1e:	6019      	str	r1, [r3, #0]
    2b20:	e000      	b.n	2b24 <send_ADC_data+0x78>
	if (bufLen < ADC_BYTES_PER_SAMPLE || numBytes < bufLen) return 0;
    2b22:	2000      	movs	r0, #0
            i += corruption_amount;
        }
    }

	return i;
}
    2b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bufLen < ADC_BYTES_PER_SAMPLE || numBytes < bufLen) return 0;
    2b26:	2000      	movs	r0, #0
    2b28:	e7fc      	b.n	2b24 <send_ADC_data+0x78>
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	20002f80 	.word	0x20002f80
    2b30:	20002f84 	.word	0x20002f84
    2b34:	200003bd 	.word	0x200003bd
    2b38:	200003c0 	.word	0x200003c0

00002b3c <is_corrupt>:

bool is_corrupt(void) {
    return corrupt_sample_set;
    2b3c:	4b01      	ldr	r3, [pc, #4]	; (2b44 <is_corrupt+0x8>)
    2b3e:	7818      	ldrb	r0, [r3, #0]
}
    2b40:	4770      	bx	lr
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	200003bd 	.word	0x200003bd

00002b48 <spi_lock>:
{
    2b48:	b570      	push	{r4, r5, r6, lr}
    2b4a:	0005      	movs	r5, r0
	cpu_irq_enter_critical();
    2b4c:	4b06      	ldr	r3, [pc, #24]	; (2b68 <spi_lock+0x20>)
    2b4e:	4798      	blx	r3
	if (module->locked) {
    2b50:	792b      	ldrb	r3, [r5, #4]
		status = STATUS_BUSY;
    2b52:	2405      	movs	r4, #5
	if (module->locked) {
    2b54:	2b00      	cmp	r3, #0
    2b56:	d003      	beq.n	2b60 <spi_lock+0x18>
	cpu_irq_leave_critical();
    2b58:	4b04      	ldr	r3, [pc, #16]	; (2b6c <spi_lock+0x24>)
    2b5a:	4798      	blx	r3
}
    2b5c:	0020      	movs	r0, r4
    2b5e:	bd70      	pop	{r4, r5, r6, pc}
		module->locked = true;
    2b60:	3301      	adds	r3, #1
    2b62:	712b      	strb	r3, [r5, #4]
		status = STATUS_OK;
    2b64:	2400      	movs	r4, #0
    2b66:	e7f7      	b.n	2b58 <spi_lock+0x10>
    2b68:	00004205 	.word	0x00004205
    2b6c:	00004245 	.word	0x00004245

00002b70 <spi_unlock>:
	module->locked = false;
    2b70:	2300      	movs	r3, #0
    2b72:	7103      	strb	r3, [r0, #4]
}
    2b74:	4770      	bx	lr
	...

00002b78 <configure_spi_master>:
 *
 * Description: Configures the SPI
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void configure_spi_master(void) {
    2b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b7a:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    2b7c:	4c2e      	ldr	r4, [pc, #184]	; (2c38 <configure_spi_master+0xc0>)
    2b7e:	2305      	movs	r3, #5
    2b80:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2b82:	2300      	movs	r3, #0
    2b84:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2b86:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2b88:	a901      	add	r1, sp, #4
    2b8a:	2201      	movs	r2, #1
    2b8c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2b8e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2b90:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2b92:	2005      	movs	r0, #5
    2b94:	4b29      	ldr	r3, [pc, #164]	; (2c3c <configure_spi_master+0xc4>)
    2b96:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2b98:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b9a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2b9c:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    2b9e:	2900      	cmp	r1, #0
    2ba0:	d104      	bne.n	2bac <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    2ba2:	095a      	lsrs	r2, r3, #5
    2ba4:	01d2      	lsls	r2, r2, #7
    2ba6:	4926      	ldr	r1, [pc, #152]	; (2c40 <configure_spi_master+0xc8>)
    2ba8:	468c      	mov	ip, r1
    2baa:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2bac:	271f      	movs	r7, #31
    2bae:	403b      	ands	r3, r7
    2bb0:	2501      	movs	r5, #1
    2bb2:	0029      	movs	r1, r5
    2bb4:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    2bb6:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    2bb8:	ac02      	add	r4, sp, #8
    2bba:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2bbc:	2300      	movs	r3, #0
    2bbe:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2bc0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2bc2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2bc4:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2bc6:	74e5      	strb	r5, [r4, #19]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2bc8:	220c      	movs	r2, #12
    2bca:	2100      	movs	r1, #0
    2bcc:	a808      	add	r0, sp, #32
    2bce:	4b1d      	ldr	r3, [pc, #116]	; (2c44 <configure_spi_master+0xcc>)
    2bd0:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    2bd2:	4b1d      	ldr	r3, [pc, #116]	; (2c48 <configure_spi_master+0xd0>)
    2bd4:	61a3      	str	r3, [r4, #24]
    spi_attach_slave(&slave, &slave_dev_config);
    
    /* Configure, initialize and enable SERCOM SPI module */
    // PA4 - MOSI, PA5 - SS, PA6 - MISO, PA7 - SCK, 
    spi_get_config_defaults(&config_spi_master);
    config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_O;
    2bd6:	238c      	movs	r3, #140	; 0x8c
    2bd8:	039b      	lsls	r3, r3, #14
    2bda:	60e3      	str	r3, [r4, #12]
    config_spi_master.pinmux_pad0 = PINMUX_PA04D_SERCOM0_PAD0;
    2bdc:	4b1b      	ldr	r3, [pc, #108]	; (2c4c <configure_spi_master+0xd4>)
    2bde:	62a3      	str	r3, [r4, #40]	; 0x28
    config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    2be0:	2301      	movs	r3, #1
    2be2:	425b      	negs	r3, r3
    2be4:	62e3      	str	r3, [r4, #44]	; 0x2c
    config_spi_master.pinmux_pad2 = PINMUX_PA06D_SERCOM0_PAD2;
    2be6:	4b1a      	ldr	r3, [pc, #104]	; (2c50 <configure_spi_master+0xd8>)
    2be8:	6323      	str	r3, [r4, #48]	; 0x30
    config_spi_master.pinmux_pad3 = PINMUX_PA07D_SERCOM0_PAD3;
    2bea:	4b1a      	ldr	r3, [pc, #104]	; (2c54 <configure_spi_master+0xdc>)
    2bec:	6363      	str	r3, [r4, #52]	; 0x34
    config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    2bee:	2380      	movs	r3, #128	; 0x80
    2bf0:	055b      	lsls	r3, r3, #21
    2bf2:	60a3      	str	r3, [r4, #8]
	config_spi_master.receiver_enable = true;
	config_spi_master.master_slave_select_enable = true;
    2bf4:	7525      	strb	r5, [r4, #20]
	config_spi_master.generator_source = GCLK_GENERATOR_3;
    2bf6:	2203      	movs	r2, #3
    2bf8:	2324      	movs	r3, #36	; 0x24
    2bfa:	54e2      	strb	r2, [r4, r3]
    
    spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    2bfc:	4e16      	ldr	r6, [pc, #88]	; (2c58 <configure_spi_master+0xe0>)
    2bfe:	0022      	movs	r2, r4
    2c00:	4916      	ldr	r1, [pc, #88]	; (2c5c <configure_spi_master+0xe4>)
    2c02:	0030      	movs	r0, r6
    2c04:	4b16      	ldr	r3, [pc, #88]	; (2c60 <configure_spi_master+0xe8>)
    2c06:	4798      	blx	r3
    spi_set_baudrate(&spi_master_instance, SPI_SPEED);
    2c08:	4916      	ldr	r1, [pc, #88]	; (2c64 <configure_spi_master+0xec>)
    2c0a:	0030      	movs	r0, r6
    2c0c:	4b16      	ldr	r3, [pc, #88]	; (2c68 <configure_spi_master+0xf0>)
    2c0e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2c10:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2c12:	0020      	movs	r0, r4
    2c14:	4b15      	ldr	r3, [pc, #84]	; (2c6c <configure_spi_master+0xf4>)
    2c16:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2c18:	4007      	ands	r7, r0
    2c1a:	40bd      	lsls	r5, r7
    2c1c:	4b14      	ldr	r3, [pc, #80]	; (2c70 <configure_spi_master+0xf8>)
    2c1e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2c20:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    2c22:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2c24:	2b00      	cmp	r3, #0
    2c26:	d1fc      	bne.n	2c22 <configure_spi_master+0xaa>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2c28:	6823      	ldr	r3, [r4, #0]
    2c2a:	2202      	movs	r2, #2
    2c2c:	4313      	orrs	r3, r2
    2c2e:	6023      	str	r3, [r4, #0]
    spi_enable(&spi_master_instance);
	configure_spi_master_callbacks(); //For callback mode
    2c30:	4b10      	ldr	r3, [pc, #64]	; (2c74 <configure_spi_master+0xfc>)
    2c32:	4798      	blx	r3
}
    2c34:	b011      	add	sp, #68	; 0x44
    2c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c38:	200003c4 	.word	0x200003c4
    2c3c:	000041dd 	.word	0x000041dd
    2c40:	41004400 	.word	0x41004400
    2c44:	000072c3 	.word	0x000072c3
    2c48:	000186a0 	.word	0x000186a0
    2c4c:	00040003 	.word	0x00040003
    2c50:	00060003 	.word	0x00060003
    2c54:	00070003 	.word	0x00070003
    2c58:	200003c8 	.word	0x200003c8
    2c5c:	42000800 	.word	0x42000800
    2c60:	00001135 	.word	0x00001135
    2c64:	00b71b00 	.word	0x00b71b00
    2c68:	0000107d 	.word	0x0000107d
    2c6c:	00001019 	.word	0x00001019
    2c70:	e000e100 	.word	0xe000e100
    2c74:	00002c79 	.word	0x00002c79

00002c78 <configure_spi_master_callbacks>:
 * Description: Configures the SPI callback funciton.  For txrx
 *  function only
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void configure_spi_master_callbacks(void) {
    2c78:	b510      	push	{r4, lr}
	spi_register_callback(&spi_master_instance, callback_spi_master, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    2c7a:	4c06      	ldr	r4, [pc, #24]	; (2c94 <configure_spi_master_callbacks+0x1c>)
    2c7c:	2202      	movs	r2, #2
    2c7e:	4906      	ldr	r1, [pc, #24]	; (2c98 <configure_spi_master_callbacks+0x20>)
    2c80:	0020      	movs	r0, r4
    2c82:	4b06      	ldr	r3, [pc, #24]	; (2c9c <configure_spi_master_callbacks+0x24>)
    2c84:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    2c86:	2237      	movs	r2, #55	; 0x37
    2c88:	5ca3      	ldrb	r3, [r4, r2]
    2c8a:	2104      	movs	r1, #4
    2c8c:	430b      	orrs	r3, r1
    2c8e:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_master_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
}
    2c90:	bd10      	pop	{r4, pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	200003c8 	.word	0x200003c8
    2c98:	00002ca1 	.word	0x00002ca1
    2c9c:	000015e9 	.word	0x000015e9

00002ca0 <callback_spi_master>:
 * Description: SPI callback function.  For txrx function only
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void callback_spi_master(struct spi_module *const module) {
	trx_complete = true;
    2ca0:	2201      	movs	r2, #1
    2ca2:	4b01      	ldr	r3, [pc, #4]	; (2ca8 <callback_spi_master+0x8>)
    2ca4:	701a      	strb	r2, [r3, #0]
}
    2ca6:	4770      	bx	lr
    2ca8:	20000404 	.word	0x20000404

00002cac <txrx_wait>:
 *
 * Description: SPI transfer, waits for completion
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t* __attribute__((optimize("O0"))) txrx_wait(uint8_t *tx, uint8_t num_bytes) {
    2cac:	b590      	push	{r4, r7, lr}
    2cae:	b083      	sub	sp, #12
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	6078      	str	r0, [r7, #4]
    2cb4:	000a      	movs	r2, r1
    2cb6:	1cfb      	adds	r3, r7, #3
    2cb8:	701a      	strb	r2, [r3, #0]
	if (num_bytes > BUF_SIZE) return NULL;
    2cba:	1cfb      	adds	r3, r7, #3
    2cbc:	781b      	ldrb	r3, [r3, #0]
    2cbe:	2b19      	cmp	r3, #25
    2cc0:	d901      	bls.n	2cc6 <txrx_wait+0x1a>
    2cc2:	2300      	movs	r3, #0
    2cc4:	e020      	b.n	2d08 <txrx_wait+0x5c>
    
	spi_lock(&spi_master_instance);
    2cc6:	4b12      	ldr	r3, [pc, #72]	; (2d10 <txrx_wait+0x64>)
    2cc8:	0018      	movs	r0, r3
    2cca:	4b12      	ldr	r3, [pc, #72]	; (2d14 <txrx_wait+0x68>)
    2ccc:	4798      	blx	r3
    spi_transceive_buffer_wait(&spi_master_instance, tx, rx_buf, 1);
    2cce:	4a12      	ldr	r2, [pc, #72]	; (2d18 <txrx_wait+0x6c>)
    2cd0:	6879      	ldr	r1, [r7, #4]
    2cd2:	480f      	ldr	r0, [pc, #60]	; (2d10 <txrx_wait+0x64>)
    2cd4:	2301      	movs	r3, #1
    2cd6:	4c11      	ldr	r4, [pc, #68]	; (2d1c <txrx_wait+0x70>)
    2cd8:	47a0      	blx	r4
    if (num_bytes > 1) {
    2cda:	1cfb      	adds	r3, r7, #3
    2cdc:	781b      	ldrb	r3, [r3, #0]
    2cde:	2b01      	cmp	r3, #1
    2ce0:	d90d      	bls.n	2cfe <txrx_wait+0x52>
        delay_us(FIRST_BYTE_WAIT);
    2ce2:	2002      	movs	r0, #2
    2ce4:	4b0e      	ldr	r3, [pc, #56]	; (2d20 <txrx_wait+0x74>)
    2ce6:	4798      	blx	r3
        spi_transceive_buffer_wait(&spi_master_instance, tx+1, rx_buf+1, num_bytes - 1);
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	1c59      	adds	r1, r3, #1
    2cec:	4a0d      	ldr	r2, [pc, #52]	; (2d24 <txrx_wait+0x78>)
    2cee:	1cfb      	adds	r3, r7, #3
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	b29b      	uxth	r3, r3
    2cf4:	3b01      	subs	r3, #1
    2cf6:	b29b      	uxth	r3, r3
    2cf8:	4805      	ldr	r0, [pc, #20]	; (2d10 <txrx_wait+0x64>)
    2cfa:	4c08      	ldr	r4, [pc, #32]	; (2d1c <txrx_wait+0x70>)
    2cfc:	47a0      	blx	r4
    }
	spi_unlock(&spi_master_instance);
    2cfe:	4b04      	ldr	r3, [pc, #16]	; (2d10 <txrx_wait+0x64>)
    2d00:	0018      	movs	r0, r3
    2d02:	4b09      	ldr	r3, [pc, #36]	; (2d28 <txrx_wait+0x7c>)
    2d04:	4798      	blx	r3
    
    return rx_buf;
    2d06:	4b04      	ldr	r3, [pc, #16]	; (2d18 <txrx_wait+0x6c>)
}
    2d08:	0018      	movs	r0, r3
    2d0a:	46bd      	mov	sp, r7
    2d0c:	b003      	add	sp, #12
    2d0e:	bd90      	pop	{r4, r7, pc}
    2d10:	200003c8 	.word	0x200003c8
    2d14:	00002b49 	.word	0x00002b49
    2d18:	20005694 	.word	0x20005694
    2d1c:	00001349 	.word	0x00001349
    2d20:	000031f9 	.word	0x000031f9
    2d24:	20005695 	.word	0x20005695
    2d28:	00002b71 	.word	0x00002b71

00002d2c <txrx_wait_sel>:
 * Description: SPI transfer, waits for completion.  Receieved data
 *  is stored in the buffer input into the function
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t* __attribute__((optimize("O0"))) txrx_wait_sel(uint8_t *tx, uint8_t num_bytes, uint8_t *rx) {
    2d2c:	b590      	push	{r4, r7, lr}
    2d2e:	b085      	sub	sp, #20
    2d30:	af00      	add	r7, sp, #0
    2d32:	60f8      	str	r0, [r7, #12]
    2d34:	607a      	str	r2, [r7, #4]
    2d36:	230b      	movs	r3, #11
    2d38:	18fb      	adds	r3, r7, r3
    2d3a:	1c0a      	adds	r2, r1, #0
    2d3c:	701a      	strb	r2, [r3, #0]
    if (num_bytes > BUF_SIZE) return NULL;
    2d3e:	230b      	movs	r3, #11
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	781b      	ldrb	r3, [r3, #0]
    2d44:	2b19      	cmp	r3, #25
    2d46:	d901      	bls.n	2d4c <txrx_wait_sel+0x20>
    2d48:	2300      	movs	r3, #0
    2d4a:	e023      	b.n	2d94 <txrx_wait_sel+0x68>
    
    spi_lock(&spi_master_instance);
    2d4c:	4b13      	ldr	r3, [pc, #76]	; (2d9c <txrx_wait_sel+0x70>)
    2d4e:	0018      	movs	r0, r3
    2d50:	4b13      	ldr	r3, [pc, #76]	; (2da0 <txrx_wait_sel+0x74>)
    2d52:	4798      	blx	r3
    spi_transceive_buffer_wait(&spi_master_instance, tx, rx, 1);
    2d54:	687a      	ldr	r2, [r7, #4]
    2d56:	68f9      	ldr	r1, [r7, #12]
    2d58:	4810      	ldr	r0, [pc, #64]	; (2d9c <txrx_wait_sel+0x70>)
    2d5a:	2301      	movs	r3, #1
    2d5c:	4c11      	ldr	r4, [pc, #68]	; (2da4 <txrx_wait_sel+0x78>)
    2d5e:	47a0      	blx	r4
    if (num_bytes > 1) {
    2d60:	230b      	movs	r3, #11
    2d62:	18fb      	adds	r3, r7, r3
    2d64:	781b      	ldrb	r3, [r3, #0]
    2d66:	2b01      	cmp	r3, #1
    2d68:	d90f      	bls.n	2d8a <txrx_wait_sel+0x5e>
        delay_us(FIRST_BYTE_WAIT);
    2d6a:	2002      	movs	r0, #2
    2d6c:	4b0e      	ldr	r3, [pc, #56]	; (2da8 <txrx_wait_sel+0x7c>)
    2d6e:	4798      	blx	r3
        spi_transceive_buffer_wait(&spi_master_instance, tx+1, rx+1, num_bytes - 1);
    2d70:	68fb      	ldr	r3, [r7, #12]
    2d72:	1c59      	adds	r1, r3, #1
    2d74:	687b      	ldr	r3, [r7, #4]
    2d76:	1c5a      	adds	r2, r3, #1
    2d78:	230b      	movs	r3, #11
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	b29b      	uxth	r3, r3
    2d80:	3b01      	subs	r3, #1
    2d82:	b29b      	uxth	r3, r3
    2d84:	4805      	ldr	r0, [pc, #20]	; (2d9c <txrx_wait_sel+0x70>)
    2d86:	4c07      	ldr	r4, [pc, #28]	; (2da4 <txrx_wait_sel+0x78>)
    2d88:	47a0      	blx	r4
    }
    spi_unlock(&spi_master_instance);
    2d8a:	4b04      	ldr	r3, [pc, #16]	; (2d9c <txrx_wait_sel+0x70>)
    2d8c:	0018      	movs	r0, r3
    2d8e:	4b07      	ldr	r3, [pc, #28]	; (2dac <txrx_wait_sel+0x80>)
    2d90:	4798      	blx	r3
    
    return rx_buf;
    2d92:	4b07      	ldr	r3, [pc, #28]	; (2db0 <txrx_wait_sel+0x84>)
}
    2d94:	0018      	movs	r0, r3
    2d96:	46bd      	mov	sp, r7
    2d98:	b005      	add	sp, #20
    2d9a:	bd90      	pop	{r4, r7, pc}
    2d9c:	200003c8 	.word	0x200003c8
    2da0:	00002b49 	.word	0x00002b49
    2da4:	00001349 	.word	0x00001349
    2da8:	000031f9 	.word	0x000031f9
    2dac:	00002b71 	.word	0x00002b71
    2db0:	20005694 	.word	0x20005694

00002db4 <add>:
 *
 * Description: Adds a sample set to the queue
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t add(uint32_t n, float rate, uint16_t c) {
    2db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2db6:	0007      	movs	r7, r0
    2db8:	1c0d      	adds	r5, r1, #0
    2dba:	0016      	movs	r6, r2
    dSet *temp = (dSet*) malloc(sizeof(dSet));
    2dbc:	2010      	movs	r0, #16
    2dbe:	4b19      	ldr	r3, [pc, #100]	; (2e24 <add+0x70>)
    2dc0:	4798      	blx	r3
    2dc2:	1e04      	subs	r4, r0, #0
    dSet *end = queue;
    
	if (temp == NULL) return FULL_RESPONSE;
    2dc4:	d027      	beq.n	2e16 <add+0x62>
            while(end->next != NULL) end = end->next;
            end->next = temp;
        }
        return OK_RESPONSE;
    }
    else return INVALID_RESPONSE;
    2dc6:	2001      	movs	r0, #1
    else if (n > 0 && rate > MIN_RATE && rate < MAX_RATE && c > 0 && c <= 0b00111111) {
    2dc8:	2f00      	cmp	r7, #0
    2dca:	d025      	beq.n	2e18 <add+0x64>
    2dcc:	4916      	ldr	r1, [pc, #88]	; (2e28 <add+0x74>)
    2dce:	1c28      	adds	r0, r5, #0
    2dd0:	4b16      	ldr	r3, [pc, #88]	; (2e2c <add+0x78>)
    2dd2:	4798      	blx	r3
    2dd4:	2800      	cmp	r0, #0
    2dd6:	d020      	beq.n	2e1a <add+0x66>
    2dd8:	4915      	ldr	r1, [pc, #84]	; (2e30 <add+0x7c>)
    2dda:	1c28      	adds	r0, r5, #0
    2ddc:	4b15      	ldr	r3, [pc, #84]	; (2e34 <add+0x80>)
    2dde:	4798      	blx	r3
    2de0:	2800      	cmp	r0, #0
    2de2:	d01c      	beq.n	2e1e <add+0x6a>
    2de4:	1e73      	subs	r3, r6, #1
    2de6:	b29b      	uxth	r3, r3
    else return INVALID_RESPONSE;
    2de8:	2001      	movs	r0, #1
    else if (n > 0 && rate > MIN_RATE && rate < MAX_RATE && c > 0 && c <= 0b00111111) {
    2dea:	2b3e      	cmp	r3, #62	; 0x3e
    2dec:	d814      	bhi.n	2e18 <add+0x64>
    dSet *end = queue;
    2dee:	4b12      	ldr	r3, [pc, #72]	; (2e38 <add+0x84>)
    2df0:	681a      	ldr	r2, [r3, #0]
        temp->num = n;
    2df2:	6067      	str	r7, [r4, #4]
        temp->channels = c;
    2df4:	8026      	strh	r6, [r4, #0]
		temp->rate = rate;
    2df6:	60a5      	str	r5, [r4, #8]
        temp->next = NULL;
    2df8:	2300      	movs	r3, #0
    2dfa:	60e3      	str	r3, [r4, #12]
        if (queue == NULL) queue = temp;
    2dfc:	2a00      	cmp	r2, #0
    2dfe:	d104      	bne.n	2e0a <add+0x56>
    2e00:	4b0d      	ldr	r3, [pc, #52]	; (2e38 <add+0x84>)
    2e02:	601c      	str	r4, [r3, #0]
        return OK_RESPONSE;
    2e04:	2000      	movs	r0, #0
    2e06:	e007      	b.n	2e18 <add+0x64>
            while(end->next != NULL) end = end->next;
    2e08:	001a      	movs	r2, r3
    2e0a:	68d3      	ldr	r3, [r2, #12]
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d1fb      	bne.n	2e08 <add+0x54>
            end->next = temp;
    2e10:	60d4      	str	r4, [r2, #12]
        return OK_RESPONSE;
    2e12:	2000      	movs	r0, #0
    2e14:	e000      	b.n	2e18 <add+0x64>
	if (temp == NULL) return FULL_RESPONSE;
    2e16:	2002      	movs	r0, #2
}
    2e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else return INVALID_RESPONSE;
    2e1a:	2001      	movs	r0, #1
    2e1c:	e7fc      	b.n	2e18 <add+0x64>
    2e1e:	2001      	movs	r0, #1
    2e20:	e7fa      	b.n	2e18 <add+0x64>
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	00007289 	.word	0x00007289
    2e28:	37b20000 	.word	0x37b20000
    2e2c:	00005619 	.word	0x00005619
    2e30:	467a0000 	.word	0x467a0000
    2e34:	000055f1 	.word	0x000055f1
    2e38:	20000408 	.word	0x20000408

00002e3c <rm>:
 *
 * Description: Removes the first sample set in the queue
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t rm(void) {
    2e3c:	b510      	push	{r4, lr}
    dSet *temp = queue;
    2e3e:	4b08      	ldr	r3, [pc, #32]	; (2e60 <rm+0x24>)
    2e40:	6818      	ldr	r0, [r3, #0]
	if (queue == NULL) return 0;
    2e42:	2800      	cmp	r0, #0
    2e44:	d009      	beq.n	2e5a <rm+0x1e>
    queue = queue->next;
    2e46:	001c      	movs	r4, r3
    2e48:	68c3      	ldr	r3, [r0, #12]
    2e4a:	6023      	str	r3, [r4, #0]
    free(temp);
    2e4c:	4b05      	ldr	r3, [pc, #20]	; (2e64 <rm+0x28>)
    2e4e:	4798      	blx	r3
    return (queue == NULL) ? 0 : 1;
    2e50:	6820      	ldr	r0, [r4, #0]
    2e52:	1e43      	subs	r3, r0, #1
    2e54:	4198      	sbcs	r0, r3
    2e56:	b2c0      	uxtb	r0, r0
}
    2e58:	bd10      	pop	{r4, pc}
	if (queue == NULL) return 0;
    2e5a:	2000      	movs	r0, #0
    2e5c:	e7fc      	b.n	2e58 <rm+0x1c>
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	20000408 	.word	0x20000408
    2e64:	0000729d 	.word	0x0000729d

00002e68 <dec>:
 * Description: Decrements the number of samples to be taken in the
 *  first sample set
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t dec(void) {
    2e68:	b510      	push	{r4, lr}
    if (queue == NULL) return 0;
    2e6a:	4b09      	ldr	r3, [pc, #36]	; (2e90 <dec+0x28>)
    2e6c:	681a      	ldr	r2, [r3, #0]
    2e6e:	2a00      	cmp	r2, #0
    2e70:	d00c      	beq.n	2e8c <dec+0x24>
    else if (--(queue->num) == 0) return rm() ? 2 : 0;
    2e72:	6853      	ldr	r3, [r2, #4]
    2e74:	3b01      	subs	r3, #1
    2e76:	6053      	str	r3, [r2, #4]
    else return 1;
    2e78:	2001      	movs	r0, #1
    else if (--(queue->num) == 0) return rm() ? 2 : 0;
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d000      	beq.n	2e80 <dec+0x18>
}
    2e7e:	bd10      	pop	{r4, pc}
    else if (--(queue->num) == 0) return rm() ? 2 : 0;
    2e80:	4b04      	ldr	r3, [pc, #16]	; (2e94 <dec+0x2c>)
    2e82:	4798      	blx	r3
    2e84:	2800      	cmp	r0, #0
    2e86:	d0fa      	beq.n	2e7e <dec+0x16>
    2e88:	2002      	movs	r0, #2
    2e8a:	e7f8      	b.n	2e7e <dec+0x16>
    if (queue == NULL) return 0;
    2e8c:	2000      	movs	r0, #0
    2e8e:	e7f6      	b.n	2e7e <dec+0x16>
    2e90:	20000408 	.word	0x20000408
    2e94:	00002e3d 	.word	0x00002e3d

00002e98 <findSet>:
 * Last Modified: 11/1/17
 *
 ******************************************************************/
dSet* findSet(uint32_t n) {
    uint32_t i;
    dSet *temp = queue;
    2e98:	4b07      	ldr	r3, [pc, #28]	; (2eb8 <findSet+0x20>)
    2e9a:	681b      	ldr	r3, [r3, #0]
    
    for(i = 0; i < n && temp != NULL; i++) temp = temp->next;
    2e9c:	2800      	cmp	r0, #0
    2e9e:	d008      	beq.n	2eb2 <findSet+0x1a>
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d006      	beq.n	2eb2 <findSet+0x1a>
    2ea4:	2200      	movs	r2, #0
    2ea6:	68db      	ldr	r3, [r3, #12]
    2ea8:	3201      	adds	r2, #1
    2eaa:	4290      	cmp	r0, r2
    2eac:	d001      	beq.n	2eb2 <findSet+0x1a>
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d1f9      	bne.n	2ea6 <findSet+0xe>
    
    return temp;
}
    2eb2:	0018      	movs	r0, r3
    2eb4:	4770      	bx	lr
    2eb6:	46c0      	nop			; (mov r8, r8)
    2eb8:	20000408 	.word	0x20000408

00002ebc <qryDSet>:
 * Description: Prints sample set information into the buf variable
 *  of the sample set at position 'ss'
 * Last Modified: 11/1/17
 *
 ******************************************************************/
dSet* qryDSet(uint32_t ss, char *buf, uint32_t buf_len) {
    2ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ebe:	b085      	sub	sp, #20
    2ec0:	000d      	movs	r5, r1
    2ec2:	0016      	movs	r6, r2
	dSet *temp = findSet(ss);
    2ec4:	4b0d      	ldr	r3, [pc, #52]	; (2efc <qryDSet+0x40>)
    2ec6:	4798      	blx	r3
    2ec8:	1e04      	subs	r4, r0, #0
    
    if (temp != NULL) snprintf(buf, buf_len, "Number of Samples: %lu\tSample Rate: %f\tChannels:%u\n", (uint32_t) temp->num, temp->rate, temp->channels);
    2eca:	d010      	beq.n	2eee <qryDSet+0x32>
    2ecc:	6847      	ldr	r7, [r0, #4]
    2ece:	8803      	ldrh	r3, [r0, #0]
    2ed0:	9302      	str	r3, [sp, #8]
    2ed2:	6880      	ldr	r0, [r0, #8]
    2ed4:	4b0a      	ldr	r3, [pc, #40]	; (2f00 <qryDSet+0x44>)
    2ed6:	4798      	blx	r3
    2ed8:	9000      	str	r0, [sp, #0]
    2eda:	9101      	str	r1, [sp, #4]
    2edc:	003b      	movs	r3, r7
    2ede:	4a09      	ldr	r2, [pc, #36]	; (2f04 <qryDSet+0x48>)
    2ee0:	0031      	movs	r1, r6
    2ee2:	0028      	movs	r0, r5
    2ee4:	4d08      	ldr	r5, [pc, #32]	; (2f08 <qryDSet+0x4c>)
    2ee6:	47a8      	blx	r5
	else strcpy(buf,"Does Not Exist");
    return temp;
}
    2ee8:	0020      	movs	r0, r4
    2eea:	b005      	add	sp, #20
    2eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else strcpy(buf,"Does Not Exist");
    2eee:	220f      	movs	r2, #15
    2ef0:	4906      	ldr	r1, [pc, #24]	; (2f0c <qryDSet+0x50>)
    2ef2:	0028      	movs	r0, r5
    2ef4:	4b06      	ldr	r3, [pc, #24]	; (2f10 <qryDSet+0x54>)
    2ef6:	4798      	blx	r3
    return temp;
    2ef8:	e7f6      	b.n	2ee8 <qryDSet+0x2c>
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	00002e99 	.word	0x00002e99
    2f00:	00007071 	.word	0x00007071
    2f04:	0000a6fc 	.word	0x0000a6fc
    2f08:	00007449 	.word	0x00007449
    2f0c:	0000a730 	.word	0x0000a730
    2f10:	000072b1 	.word	0x000072b1

00002f14 <init_timer>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2f14:	4b0c      	ldr	r3, [pc, #48]	; (2f48 <init_timer+0x34>)
    2f16:	2200      	movs	r2, #0
    2f18:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2f1a:	2100      	movs	r1, #0
    2f1c:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2f1e:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    2f20:	7059      	strb	r1, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2f22:	7299      	strb	r1, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2f24:	72d9      	strb	r1, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2f26:	7319      	strb	r1, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2f28:	7399      	strb	r1, [r3, #14]
	config->oneshot                    = false;
    2f2a:	7359      	strb	r1, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2f2c:	7419      	strb	r1, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2f2e:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2f30:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2f32:	7719      	strb	r1, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2f34:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2f36:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2f38:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2f3c:	859a      	strh	r2, [r3, #44]	; 0x2c
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void init_timer(void) {
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    2f3e:	3208      	adds	r2, #8
    2f40:	709a      	strb	r2, [r3, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    2f42:	3218      	adds	r2, #24
    2f44:	719a      	strb	r2, [r3, #6]
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
}
    2f46:	4770      	bx	lr
    2f48:	2000040c 	.word	0x2000040c

00002f4c <config_timer>:
 *
 * Description: Configures the timer for the given rate
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void config_timer(float rate) {
    2f4c:	b570      	push	{r4, r5, r6, lr}
    2f4e:	1c04      	adds	r4, r0, #0
	config_tc.counter_32_bit.value = 0;
    2f50:	4d1b      	ldr	r5, [pc, #108]	; (2fc0 <config_timer+0x74>)
    2f52:	2300      	movs	r3, #0
    2f54:	62ab      	str	r3, [r5, #40]	; 0x28
	config_tc.clock_prescaler = (timer_ps = determinePrescale(rate));
    2f56:	4b1b      	ldr	r3, [pc, #108]	; (2fc4 <config_timer+0x78>)
    2f58:	4798      	blx	r3
    2f5a:	4b1b      	ldr	r3, [pc, #108]	; (2fc8 <config_timer+0x7c>)
    2f5c:	8018      	strh	r0, [r3, #0]
    2f5e:	80a8      	strh	r0, [r5, #4]
	config_tc.counter_32_bit.compare_capture_channel[0] = determineCounter(timer_ps, rate);
    2f60:	1c21      	adds	r1, r4, #0
    2f62:	4b1a      	ldr	r3, [pc, #104]	; (2fcc <config_timer+0x80>)
    2f64:	4798      	blx	r3
    2f66:	62e8      	str	r0, [r5, #44]	; 0x2c
	tc_init(&tc_instance, TC4, &config_tc);
    2f68:	4c19      	ldr	r4, [pc, #100]	; (2fd0 <config_timer+0x84>)
    2f6a:	002a      	movs	r2, r5
    2f6c:	4919      	ldr	r1, [pc, #100]	; (2fd4 <config_timer+0x88>)
    2f6e:	0020      	movs	r0, r4
    2f70:	4b19      	ldr	r3, [pc, #100]	; (2fd8 <config_timer+0x8c>)
    2f72:	4798      	blx	r3
	tc_register_callback(&tc_instance, timer_callback, TC_CALLBACK_CC_CHANNEL0);
    2f74:	2202      	movs	r2, #2
    2f76:	4919      	ldr	r1, [pc, #100]	; (2fdc <config_timer+0x90>)
    2f78:	0020      	movs	r0, r4
    2f7a:	4b19      	ldr	r3, [pc, #100]	; (2fe0 <config_timer+0x94>)
    2f7c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f7e:	6820      	ldr	r0, [r4, #0]
    2f80:	4b18      	ldr	r3, [pc, #96]	; (2fe4 <config_timer+0x98>)
    2f82:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f84:	4b18      	ldr	r3, [pc, #96]	; (2fe8 <config_timer+0x9c>)
    2f86:	5c1b      	ldrb	r3, [r3, r0]
    2f88:	221f      	movs	r2, #31
    2f8a:	401a      	ands	r2, r3
    2f8c:	2301      	movs	r3, #1
    2f8e:	4093      	lsls	r3, r2
    2f90:	4a16      	ldr	r2, [pc, #88]	; (2fec <config_timer+0xa0>)
    2f92:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f94:	7e63      	ldrb	r3, [r4, #25]
    2f96:	2210      	movs	r2, #16
    2f98:	4313      	orrs	r3, r2
    2f9a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f9c:	6822      	ldr	r2, [r4, #0]
    2f9e:	2310      	movs	r3, #16
    2fa0:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2fa2:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2fa4:	b25b      	sxtb	r3, r3
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	dbfb      	blt.n	2fa2 <config_timer+0x56>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2faa:	8813      	ldrh	r3, [r2, #0]
    2fac:	2102      	movs	r1, #2
    2fae:	430b      	orrs	r3, r1
    2fb0:	8013      	strh	r3, [r2, #0]
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	tc_enable(&tc_instance);
	timer_done = false;
    2fb2:	2300      	movs	r3, #0
    2fb4:	4a0e      	ldr	r2, [pc, #56]	; (2ff0 <config_timer+0xa4>)
    2fb6:	7013      	strb	r3, [r2, #0]
    tdone = false;
    2fb8:	4a0e      	ldr	r2, [pc, #56]	; (2ff4 <config_timer+0xa8>)
    2fba:	7013      	strb	r3, [r2, #0]
}
    2fbc:	bd70      	pop	{r4, r5, r6, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	2000040c 	.word	0x2000040c
    2fc4:	00003031 	.word	0x00003031
    2fc8:	2000045c 	.word	0x2000045c
    2fcc:	00003145 	.word	0x00003145
    2fd0:	20000440 	.word	0x20000440
    2fd4:	42003000 	.word	0x42003000
    2fd8:	00001925 	.word	0x00001925
    2fdc:	0000317d 	.word	0x0000317d
    2fe0:	00001825 	.word	0x00001825
    2fe4:	000018ed 	.word	0x000018ed
    2fe8:	200000d0 	.word	0x200000d0
    2fec:	e000e100 	.word	0xe000e100
    2ff0:	200056ad 	.word	0x200056ad
    2ff4:	200056ae 	.word	0x200056ae

00002ff8 <disable_timer>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ff8:	4b06      	ldr	r3, [pc, #24]	; (3014 <disable_timer+0x1c>)
    2ffa:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ffc:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2ffe:	b25b      	sxtb	r3, r3
    3000:	2b00      	cmp	r3, #0
    3002:	dbfb      	blt.n	2ffc <disable_timer+0x4>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    3004:	233b      	movs	r3, #59	; 0x3b
    3006:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    3008:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    300a:	8813      	ldrh	r3, [r2, #0]
    300c:	2102      	movs	r1, #2
    300e:	438b      	bics	r3, r1
    3010:	8013      	strh	r3, [r2, #0]
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void disable_timer(void) {
	tc_disable(&tc_instance);
}
    3012:	4770      	bx	lr
    3014:	20000440 	.word	0x20000440

00003018 <reconfig_timer>:
 *
 * Description: Reconfigures the timer for a new rate
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void reconfig_timer(float rate) {
    3018:	b510      	push	{r4, lr}
    301a:	1c04      	adds	r4, r0, #0
	disable_timer();
    301c:	4b02      	ldr	r3, [pc, #8]	; (3028 <reconfig_timer+0x10>)
    301e:	4798      	blx	r3
	config_timer(rate);
    3020:	1c20      	adds	r0, r4, #0
    3022:	4b02      	ldr	r3, [pc, #8]	; (302c <reconfig_timer+0x14>)
    3024:	4798      	blx	r3
}
    3026:	bd10      	pop	{r4, pc}
    3028:	00002ff9 	.word	0x00002ff9
    302c:	00002f4d 	.word	0x00002f4d

00003030 <determinePrescale>:
 *
 * Description: Determines which prescale to use based on the rate
 * Last Modified: 11/1/17
 *
 ******************************************************************/
enum tc_clock_prescaler determinePrescale(float rate) {
    3030:	b510      	push	{r4, lr}
    3032:	1c01      	adds	r1, r0, #0
	if ((float) 1/rate < (float) CLK_PS_1) return TC_CLOCK_PRESCALER_DIV1;
    3034:	20fe      	movs	r0, #254	; 0xfe
    3036:	0580      	lsls	r0, r0, #22
    3038:	4b21      	ldr	r3, [pc, #132]	; (30c0 <determinePrescale+0x90>)
    303a:	4798      	blx	r3
    303c:	1c04      	adds	r4, r0, #0
    303e:	4921      	ldr	r1, [pc, #132]	; (30c4 <determinePrescale+0x94>)
    3040:	4b21      	ldr	r3, [pc, #132]	; (30c8 <determinePrescale+0x98>)
    3042:	4798      	blx	r3
    3044:	2300      	movs	r3, #0
    3046:	2800      	cmp	r0, #0
    3048:	d107      	bne.n	305a <determinePrescale+0x2a>
	else if ((float) 1/rate < (float) CLK_PS_2) return TC_CLOCK_PRESCALER_DIV2;
    304a:	4920      	ldr	r1, [pc, #128]	; (30cc <determinePrescale+0x9c>)
    304c:	1c20      	adds	r0, r4, #0
    304e:	4b1e      	ldr	r3, [pc, #120]	; (30c8 <determinePrescale+0x98>)
    3050:	4798      	blx	r3
    3052:	2800      	cmp	r0, #0
    3054:	d003      	beq.n	305e <determinePrescale+0x2e>
    3056:	2380      	movs	r3, #128	; 0x80
    3058:	005b      	lsls	r3, r3, #1
	else if ((float) 1/rate < (float) CLK_PS_8) return TC_CLOCK_PRESCALER_DIV8;
	else if ((float) 1/rate < (float) CLK_PS_16) return TC_CLOCK_PRESCALER_DIV16;
	else if ((float) 1/rate < (float) CLK_PS_64) return TC_CLOCK_PRESCALER_DIV64;
	else if ((float) 1/rate < (float) CLK_PS_256) return TC_CLOCK_PRESCALER_DIV256;
	else return TC_CLOCK_PRESCALER_DIV1024;
}
    305a:	0018      	movs	r0, r3
    305c:	bd10      	pop	{r4, pc}
	else if ((float) 1/rate < (float) CLK_PS_4) return TC_CLOCK_PRESCALER_DIV4;
    305e:	491c      	ldr	r1, [pc, #112]	; (30d0 <determinePrescale+0xa0>)
    3060:	1c20      	adds	r0, r4, #0
    3062:	4b19      	ldr	r3, [pc, #100]	; (30c8 <determinePrescale+0x98>)
    3064:	4798      	blx	r3
    3066:	2800      	cmp	r0, #0
    3068:	d002      	beq.n	3070 <determinePrescale+0x40>
    306a:	2380      	movs	r3, #128	; 0x80
    306c:	009b      	lsls	r3, r3, #2
    306e:	e7f4      	b.n	305a <determinePrescale+0x2a>
	else if ((float) 1/rate < (float) CLK_PS_8) return TC_CLOCK_PRESCALER_DIV8;
    3070:	4918      	ldr	r1, [pc, #96]	; (30d4 <determinePrescale+0xa4>)
    3072:	1c20      	adds	r0, r4, #0
    3074:	4b14      	ldr	r3, [pc, #80]	; (30c8 <determinePrescale+0x98>)
    3076:	4798      	blx	r3
    3078:	2800      	cmp	r0, #0
    307a:	d002      	beq.n	3082 <determinePrescale+0x52>
    307c:	23c0      	movs	r3, #192	; 0xc0
    307e:	009b      	lsls	r3, r3, #2
    3080:	e7eb      	b.n	305a <determinePrescale+0x2a>
	else if ((float) 1/rate < (float) CLK_PS_16) return TC_CLOCK_PRESCALER_DIV16;
    3082:	4915      	ldr	r1, [pc, #84]	; (30d8 <determinePrescale+0xa8>)
    3084:	1c20      	adds	r0, r4, #0
    3086:	4b10      	ldr	r3, [pc, #64]	; (30c8 <determinePrescale+0x98>)
    3088:	4798      	blx	r3
    308a:	2800      	cmp	r0, #0
    308c:	d002      	beq.n	3094 <determinePrescale+0x64>
    308e:	2380      	movs	r3, #128	; 0x80
    3090:	00db      	lsls	r3, r3, #3
    3092:	e7e2      	b.n	305a <determinePrescale+0x2a>
	else if ((float) 1/rate < (float) CLK_PS_64) return TC_CLOCK_PRESCALER_DIV64;
    3094:	4911      	ldr	r1, [pc, #68]	; (30dc <determinePrescale+0xac>)
    3096:	1c20      	adds	r0, r4, #0
    3098:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <determinePrescale+0x98>)
    309a:	4798      	blx	r3
    309c:	2800      	cmp	r0, #0
    309e:	d002      	beq.n	30a6 <determinePrescale+0x76>
    30a0:	23a0      	movs	r3, #160	; 0xa0
    30a2:	00db      	lsls	r3, r3, #3
    30a4:	e7d9      	b.n	305a <determinePrescale+0x2a>
	else if ((float) 1/rate < (float) CLK_PS_256) return TC_CLOCK_PRESCALER_DIV256;
    30a6:	490e      	ldr	r1, [pc, #56]	; (30e0 <determinePrescale+0xb0>)
    30a8:	1c20      	adds	r0, r4, #0
    30aa:	4b07      	ldr	r3, [pc, #28]	; (30c8 <determinePrescale+0x98>)
    30ac:	4798      	blx	r3
    30ae:	2800      	cmp	r0, #0
    30b0:	d102      	bne.n	30b8 <determinePrescale+0x88>
	else return TC_CLOCK_PRESCALER_DIV1024;
    30b2:	23e0      	movs	r3, #224	; 0xe0
    30b4:	00db      	lsls	r3, r3, #3
    30b6:	e7d0      	b.n	305a <determinePrescale+0x2a>
	else if ((float) 1/rate < (float) CLK_PS_256) return TC_CLOCK_PRESCALER_DIV256;
    30b8:	23c0      	movs	r3, #192	; 0xc0
    30ba:	00db      	lsls	r3, r3, #3
    30bc:	e7cd      	b.n	305a <determinePrescale+0x2a>
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	00005729 	.word	0x00005729
    30c4:	42b2f4fc 	.word	0x42b2f4fc
    30c8:	000055f1 	.word	0x000055f1
    30cc:	4332f4fc 	.word	0x4332f4fc
    30d0:	43b2f4fc 	.word	0x43b2f4fc
    30d4:	4432f4fc 	.word	0x4432f4fc
    30d8:	44b2f4fc 	.word	0x44b2f4fc
    30dc:	45b2f4fc 	.word	0x45b2f4fc
    30e0:	46b2f4fc 	.word	0x46b2f4fc

000030e4 <prescaleToInt>:
 * Description: Returns the value of the prescaler
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint8_t prescaleToInt(enum tc_clock_prescaler prescale) {
	switch (prescale) {
    30e4:	23c0      	movs	r3, #192	; 0xc0
    30e6:	009b      	lsls	r3, r3, #2
    30e8:	4298      	cmp	r0, r3
    30ea:	d026      	beq.n	313a <prescaleToInt+0x56>
    30ec:	d90e      	bls.n	310c <prescaleToInt+0x28>
    30ee:	23a0      	movs	r3, #160	; 0xa0
    30f0:	00db      	lsls	r3, r3, #3
    30f2:	4298      	cmp	r0, r3
    30f4:	d023      	beq.n	313e <prescaleToInt+0x5a>
    30f6:	d917      	bls.n	3128 <prescaleToInt+0x44>
    30f8:	22c0      	movs	r2, #192	; 0xc0
    30fa:	00d2      	lsls	r2, r2, #3
            break;
		case TC_CLOCK_PRESCALER_DIV64:
            return 64;
            break;
		case TC_CLOCK_PRESCALER_DIV256:
            return 256;
    30fc:	2300      	movs	r3, #0
	switch (prescale) {
    30fe:	4290      	cmp	r0, r2
    3100:	d017      	beq.n	3132 <prescaleToInt+0x4e>
    3102:	3201      	adds	r2, #1
    3104:	32ff      	adds	r2, #255	; 0xff
    3106:	4290      	cmp	r0, r2
    3108:	d013      	beq.n	3132 <prescaleToInt+0x4e>
    310a:	e00b      	b.n	3124 <prescaleToInt+0x40>
    310c:	2380      	movs	r3, #128	; 0x80
    310e:	005b      	lsls	r3, r3, #1
    3110:	4298      	cmp	r0, r3
    3112:	d010      	beq.n	3136 <prescaleToInt+0x52>
    3114:	2280      	movs	r2, #128	; 0x80
    3116:	0092      	lsls	r2, r2, #2
            return 4;
    3118:	3bfc      	subs	r3, #252	; 0xfc
	switch (prescale) {
    311a:	4290      	cmp	r0, r2
    311c:	d009      	beq.n	3132 <prescaleToInt+0x4e>
            return 1;
    311e:	3b03      	subs	r3, #3
	switch (prescale) {
    3120:	2800      	cmp	r0, #0
    3122:	d006      	beq.n	3132 <prescaleToInt+0x4e>
            break;
		case TC_CLOCK_PRESCALER_DIV1024:
            return 1024;
            break;
		default:
            return 0;
    3124:	2300      	movs	r3, #0
    3126:	e004      	b.n	3132 <prescaleToInt+0x4e>
	switch (prescale) {
    3128:	2280      	movs	r2, #128	; 0x80
    312a:	00d2      	lsls	r2, r2, #3
            return 16;
    312c:	2310      	movs	r3, #16
	switch (prescale) {
    312e:	4290      	cmp	r0, r2
    3130:	d1f8      	bne.n	3124 <prescaleToInt+0x40>
            break;
	}
}
    3132:	0018      	movs	r0, r3
    3134:	4770      	bx	lr
            return 2;
    3136:	2302      	movs	r3, #2
    3138:	e7fb      	b.n	3132 <prescaleToInt+0x4e>
            return 8;
    313a:	2308      	movs	r3, #8
    313c:	e7f9      	b.n	3132 <prescaleToInt+0x4e>
            return 64;
    313e:	2340      	movs	r3, #64	; 0x40
    3140:	e7f7      	b.n	3132 <prescaleToInt+0x4e>
	...

00003144 <determineCounter>:
 * Description: Returns the counter value based on the prescale and
 *  rate
 * Last Modified: 11/1/17
 *
 ******************************************************************/
uint32_t determineCounter(enum tc_clock_prescaler prescale, float rate) {
    3144:	b510      	push	{r4, lr}
    3146:	1c0c      	adds	r4, r1, #0
	return ((uint32_t) ((float) F_CPU/((float) (prescaleToInt(prescale))*rate)));
    3148:	4b06      	ldr	r3, [pc, #24]	; (3164 <determineCounter+0x20>)
    314a:	4798      	blx	r3
    314c:	4b06      	ldr	r3, [pc, #24]	; (3168 <determineCounter+0x24>)
    314e:	4798      	blx	r3
    3150:	1c21      	adds	r1, r4, #0
    3152:	4b06      	ldr	r3, [pc, #24]	; (316c <determineCounter+0x28>)
    3154:	4798      	blx	r3
    3156:	1c01      	adds	r1, r0, #0
    3158:	4805      	ldr	r0, [pc, #20]	; (3170 <determineCounter+0x2c>)
    315a:	4b06      	ldr	r3, [pc, #24]	; (3174 <determineCounter+0x30>)
    315c:	4798      	blx	r3
    315e:	4b06      	ldr	r3, [pc, #24]	; (3178 <determineCounter+0x34>)
    3160:	4798      	blx	r3
}
    3162:	bd10      	pop	{r4, pc}
    3164:	000030e5 	.word	0x000030e5
    3168:	000060c1 	.word	0x000060c1
    316c:	00005b09 	.word	0x00005b09
    3170:	4c371b00 	.word	0x4c371b00
    3174:	00005729 	.word	0x00005729
    3178:	000056bd 	.word	0x000056bd

0000317c <timer_callback>:
 * Description: Timer callback function
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void timer_callback (void) {
    tdone = true;
    317c:	2201      	movs	r2, #1
    317e:	4b06      	ldr	r3, [pc, #24]	; (3198 <timer_callback+0x1c>)
    3180:	701a      	strb	r2, [r3, #0]
    if (dataRdy) {
    3182:	4b06      	ldr	r3, [pc, #24]	; (319c <timer_callback+0x20>)
    3184:	781b      	ldrb	r3, [r3, #0]
    3186:	2b00      	cmp	r3, #0
    3188:	d004      	beq.n	3194 <timer_callback+0x18>
        timer_done = true;
    318a:	4b05      	ldr	r3, [pc, #20]	; (31a0 <timer_callback+0x24>)
    318c:	701a      	strb	r2, [r3, #0]
        dataRdy = false;
    318e:	2200      	movs	r2, #0
    3190:	4b02      	ldr	r3, [pc, #8]	; (319c <timer_callback+0x20>)
    3192:	701a      	strb	r2, [r3, #0]
    }
}
    3194:	4770      	bx	lr
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	200056ae 	.word	0x200056ae
    319c:	200002cc 	.word	0x200002cc
    31a0:	200056ad 	.word	0x200056ad

000031a4 <delay_ms>:
 *
 * Description: Delays for a set number of milliseconds using the timer
 * Last Modified: 11/1/17
 *
 ******************************************************************/
void __attribute__((optimize("O0"))) delay_ms(uint32_t ms) {
    31a4:	b580      	push	{r7, lr}
    31a6:	b082      	sub	sp, #8
    31a8:	af00      	add	r7, sp, #0
    31aa:	6078      	str	r0, [r7, #4]
	config_timer((float) 1000/ms);
    31ac:	4b0c      	ldr	r3, [pc, #48]	; (31e0 <delay_ms+0x3c>)
    31ae:	6878      	ldr	r0, [r7, #4]
    31b0:	4798      	blx	r3
    31b2:	1c02      	adds	r2, r0, #0
    31b4:	4b0b      	ldr	r3, [pc, #44]	; (31e4 <delay_ms+0x40>)
    31b6:	1c11      	adds	r1, r2, #0
    31b8:	480b      	ldr	r0, [pc, #44]	; (31e8 <delay_ms+0x44>)
    31ba:	4798      	blx	r3
    31bc:	1c03      	adds	r3, r0, #0
    31be:	1c18      	adds	r0, r3, #0
    31c0:	4b0a      	ldr	r3, [pc, #40]	; (31ec <delay_ms+0x48>)
    31c2:	4798      	blx	r3
	while(!tdone);
    31c4:	46c0      	nop			; (mov r8, r8)
    31c6:	4b0a      	ldr	r3, [pc, #40]	; (31f0 <delay_ms+0x4c>)
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	2201      	movs	r2, #1
    31cc:	4053      	eors	r3, r2
    31ce:	b2db      	uxtb	r3, r3
    31d0:	2b00      	cmp	r3, #0
    31d2:	d1f8      	bne.n	31c6 <delay_ms+0x22>
	disable_timer();
    31d4:	4b07      	ldr	r3, [pc, #28]	; (31f4 <delay_ms+0x50>)
    31d6:	4798      	blx	r3
}
    31d8:	46c0      	nop			; (mov r8, r8)
    31da:	46bd      	mov	sp, r7
    31dc:	b002      	add	sp, #8
    31de:	bd80      	pop	{r7, pc}
    31e0:	000060c1 	.word	0x000060c1
    31e4:	00005729 	.word	0x00005729
    31e8:	447a0000 	.word	0x447a0000
    31ec:	00002f4d 	.word	0x00002f4d
    31f0:	200056ae 	.word	0x200056ae
    31f4:	00002ff9 	.word	0x00002ff9

000031f8 <delay_us>:
 *  assumption addition takes one clock cycle
 * Last Modified: 11/1/17
 * TODO: check how many clock cycles addition takes
 *
 ******************************************************************/
void __attribute__((optimize("O0"))) delay_us(uint32_t us) {
    31f8:	b590      	push	{r4, r7, lr}
    31fa:	b085      	sub	sp, #20
    31fc:	af00      	add	r7, sp, #0
    31fe:	6078      	str	r0, [r7, #4]
	uint32_t i = 0, v = floor(F_CPU/(2*us*1000000));
    3200:	2300      	movs	r3, #0
    3202:	60fb      	str	r3, [r7, #12]
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	4a12      	ldr	r2, [pc, #72]	; (3250 <delay_us+0x58>)
    3208:	435a      	muls	r2, r3
    320a:	4b12      	ldr	r3, [pc, #72]	; (3254 <delay_us+0x5c>)
    320c:	0011      	movs	r1, r2
    320e:	4812      	ldr	r0, [pc, #72]	; (3258 <delay_us+0x60>)
    3210:	4798      	blx	r3
    3212:	0003      	movs	r3, r0
    3214:	001a      	movs	r2, r3
    3216:	4b11      	ldr	r3, [pc, #68]	; (325c <delay_us+0x64>)
    3218:	0010      	movs	r0, r2
    321a:	4798      	blx	r3
    321c:	0003      	movs	r3, r0
    321e:	000c      	movs	r4, r1
    3220:	0018      	movs	r0, r3
    3222:	0021      	movs	r1, r4
    3224:	4b0e      	ldr	r3, [pc, #56]	; (3260 <delay_us+0x68>)
    3226:	4798      	blx	r3
    3228:	000a      	movs	r2, r1
    322a:	0001      	movs	r1, r0
    322c:	4b0d      	ldr	r3, [pc, #52]	; (3264 <delay_us+0x6c>)
    322e:	0008      	movs	r0, r1
    3230:	0011      	movs	r1, r2
    3232:	4798      	blx	r3
    3234:	0003      	movs	r3, r0
    3236:	60bb      	str	r3, [r7, #8]
	while (++i < v);
    3238:	68fb      	ldr	r3, [r7, #12]
    323a:	3301      	adds	r3, #1
    323c:	60fb      	str	r3, [r7, #12]
    323e:	68fa      	ldr	r2, [r7, #12]
    3240:	68bb      	ldr	r3, [r7, #8]
    3242:	429a      	cmp	r2, r3
    3244:	d3f8      	bcc.n	3238 <delay_us+0x40>
}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	46bd      	mov	sp, r7
    324a:	b005      	add	sp, #20
    324c:	bd90      	pop	{r4, r7, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	001e8480 	.word	0x001e8480
    3254:	00005265 	.word	0x00005265
    3258:	02dc6c00 	.word	0x02dc6c00
    325c:	00007001 	.word	0x00007001
    3260:	00005135 	.word	0x00005135
    3264:	000056ed 	.word	0x000056ed

00003268 <ui_init>:
static volatile bool ui_b_loopback = true;

//! \brief Initializes the user interface
void ui_init(void) {
	
}
    3268:	4770      	bx	lr

0000326a <ui_powerdown>:

//! \brief Enters the user interface in power down mode
void ui_powerdown(void) {
	
}
    326a:	4770      	bx	lr

0000326c <ui_wakeup>:

//! \brief Exits the user interface of power down mode
void ui_wakeup(void) {
	
}
    326c:	4770      	bx	lr
	...

00003270 <ui_loop_back_state>:
 * It is called when a the loopback is started and stopped.
 *
 * \param b_started    loopback started if true, else stopped
 */
void ui_loop_back_state(bool b_started) {
	ui_b_loopback = b_started;
    3270:	4b01      	ldr	r3, [pc, #4]	; (3278 <ui_loop_back_state+0x8>)
    3272:	7018      	strb	r0, [r3, #0]
}
    3274:	4770      	bx	lr
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	200000d3 	.word	0x200000d3

0000327c <ui_process>:
/*! \brief This process is called each 1ms
 * It is called only if the USB interface is enabled.
 *
 * \param framenumber  Current frame number
 */
void ui_process(uint16_t framenumber) {
    327c:	b510      	push	{r4, lr}
	if (ui_b_loopback) {
    327e:	4b09      	ldr	r3, [pc, #36]	; (32a4 <ui_process+0x28>)
    3280:	781b      	ldrb	r3, [r3, #0]
    3282:	2b00      	cmp	r3, #0
    3284:	d107      	bne.n	3296 <ui_process+0x1a>
		return;
	}

	if ((framenumber % 1000) == 0) {
    3286:	21fa      	movs	r1, #250	; 0xfa
    3288:	0089      	lsls	r1, r1, #2
    328a:	4b07      	ldr	r3, [pc, #28]	; (32a8 <ui_process+0x2c>)
    328c:	4798      	blx	r3
    328e:	b289      	uxth	r1, r1
    3290:	2900      	cmp	r1, #0
    3292:	d101      	bne.n	3298 <ui_process+0x1c>
  __ASM volatile ("nop");
    3294:	46c0      	nop			; (mov r8, r8)
		nop();
	}
	if ((framenumber % 1000) == 500) {
		nop();
	}
}
    3296:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
    3298:	23fa      	movs	r3, #250	; 0xfa
    329a:	005b      	lsls	r3, r3, #1
    329c:	4299      	cmp	r1, r3
    329e:	d1fa      	bne.n	3296 <ui_process+0x1a>
    32a0:	46c0      	nop			; (mov r8, r8)
    32a2:	e7f8      	b.n	3296 <ui_process+0x1a>
    32a4:	200000d3 	.word	0x200000d3
    32a8:	00005371 	.word	0x00005371

000032ac <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    32ac:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    32ae:	000b      	movs	r3, r1
    32b0:	332e      	adds	r3, #46	; 0x2e
    32b2:	009b      	lsls	r3, r3, #2
    32b4:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    32b6:	22aa      	movs	r2, #170	; 0xaa
    32b8:	0052      	lsls	r2, r2, #1
    32ba:	0049      	lsls	r1, r1, #1
    32bc:	5a83      	ldrh	r3, [r0, r2]
    32be:	4c03      	ldr	r4, [pc, #12]	; (32cc <usb_device_register_callback+0x20>)
    32c0:	5b09      	ldrh	r1, [r1, r4]
    32c2:	430b      	orrs	r3, r1
    32c4:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    32c6:	2000      	movs	r0, #0
    32c8:	bd10      	pop	{r4, pc}
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	0000a754 	.word	0x0000a754

000032d0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    32d0:	0049      	lsls	r1, r1, #1
    32d2:	4b06      	ldr	r3, [pc, #24]	; (32ec <usb_device_enable_callback+0x1c>)
    32d4:	5acb      	ldrh	r3, [r1, r3]
    32d6:	6802      	ldr	r2, [r0, #0]
    32d8:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    32da:	21ab      	movs	r1, #171	; 0xab
    32dc:	0049      	lsls	r1, r1, #1
    32de:	5a42      	ldrh	r2, [r0, r1]
    32e0:	431a      	orrs	r2, r3
    32e2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    32e4:	6802      	ldr	r2, [r0, #0]
    32e6:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    32e8:	2000      	movs	r0, #0
    32ea:	4770      	bx	lr
    32ec:	0000a754 	.word	0x0000a754

000032f0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    32f0:	0049      	lsls	r1, r1, #1
    32f2:	4b05      	ldr	r3, [pc, #20]	; (3308 <usb_device_disable_callback+0x18>)
    32f4:	5aca      	ldrh	r2, [r1, r3]
    32f6:	21ab      	movs	r1, #171	; 0xab
    32f8:	0049      	lsls	r1, r1, #1
    32fa:	5a43      	ldrh	r3, [r0, r1]
    32fc:	4393      	bics	r3, r2
    32fe:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3300:	6803      	ldr	r3, [r0, #0]
    3302:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3304:	2000      	movs	r0, #0
    3306:	4770      	bx	lr
    3308:	0000a754 	.word	0x0000a754

0000330c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    330c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    330e:	008c      	lsls	r4, r1, #2
    3310:	18a4      	adds	r4, r4, r2
    3312:	3434      	adds	r4, #52	; 0x34
    3314:	00a4      	lsls	r4, r4, #2
    3316:	1904      	adds	r4, r0, r4
    3318:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    331a:	1840      	adds	r0, r0, r1
    331c:	3059      	adds	r0, #89	; 0x59
    331e:	30ff      	adds	r0, #255	; 0xff
    3320:	7803      	ldrb	r3, [r0, #0]
    3322:	4903      	ldr	r1, [pc, #12]	; (3330 <usb_device_endpoint_register_callback+0x24>)
    3324:	5c8a      	ldrb	r2, [r1, r2]
    3326:	4313      	orrs	r3, r2
    3328:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    332a:	2000      	movs	r0, #0
    332c:	bd10      	pop	{r4, pc}
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	0000a764 	.word	0x0000a764

00003334 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3334:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3336:	008b      	lsls	r3, r1, #2
    3338:	189b      	adds	r3, r3, r2
    333a:	3334      	adds	r3, #52	; 0x34
    333c:	009b      	lsls	r3, r3, #2
    333e:	18c3      	adds	r3, r0, r3
    3340:	2400      	movs	r4, #0
    3342:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3344:	1840      	adds	r0, r0, r1
    3346:	3059      	adds	r0, #89	; 0x59
    3348:	30ff      	adds	r0, #255	; 0xff
    334a:	4b03      	ldr	r3, [pc, #12]	; (3358 <usb_device_endpoint_unregister_callback+0x24>)
    334c:	5c9a      	ldrb	r2, [r3, r2]
    334e:	7803      	ldrb	r3, [r0, #0]
    3350:	4393      	bics	r3, r2
    3352:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3354:	2000      	movs	r0, #0
    3356:	bd10      	pop	{r4, pc}
    3358:	0000a764 	.word	0x0000a764

0000335c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    335c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    335e:	230f      	movs	r3, #15
    3360:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3362:	18c4      	adds	r4, r0, r3
    3364:	3461      	adds	r4, #97	; 0x61
    3366:	34ff      	adds	r4, #255	; 0xff
    3368:	7825      	ldrb	r5, [r4, #0]
    336a:	4e2f      	ldr	r6, [pc, #188]	; (3428 <usb_device_endpoint_enable_callback+0xcc>)
    336c:	5cb6      	ldrb	r6, [r6, r2]
    336e:	4335      	orrs	r5, r6
    3370:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3372:	2a00      	cmp	r2, #0
    3374:	d129      	bne.n	33ca <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3376:	2b00      	cmp	r3, #0
    3378:	d112      	bne.n	33a0 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    337a:	2503      	movs	r5, #3
    337c:	240a      	movs	r4, #10
    337e:	34ff      	adds	r4, #255	; 0xff
    3380:	6806      	ldr	r6, [r0, #0]
    3382:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3384:	2a03      	cmp	r2, #3
    3386:	d109      	bne.n	339c <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3388:	b249      	sxtb	r1, r1
    338a:	2900      	cmp	r1, #0
    338c:	db44      	blt.n	3418 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    338e:	6802      	ldr	r2, [r0, #0]
    3390:	015b      	lsls	r3, r3, #5
    3392:	18d3      	adds	r3, r2, r3
    3394:	330a      	adds	r3, #10
    3396:	33ff      	adds	r3, #255	; 0xff
    3398:	2220      	movs	r2, #32
    339a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    339c:	2000      	movs	r0, #0
    339e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    33a0:	b24c      	sxtb	r4, r1
    33a2:	2c00      	cmp	r4, #0
    33a4:	db08      	blt.n	33b8 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    33a6:	015c      	lsls	r4, r3, #5
    33a8:	6805      	ldr	r5, [r0, #0]
    33aa:	46ac      	mov	ip, r5
    33ac:	4464      	add	r4, ip
    33ae:	340a      	adds	r4, #10
    33b0:	34ff      	adds	r4, #255	; 0xff
    33b2:	2501      	movs	r5, #1
    33b4:	7025      	strb	r5, [r4, #0]
    33b6:	e7e5      	b.n	3384 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    33b8:	015c      	lsls	r4, r3, #5
    33ba:	6805      	ldr	r5, [r0, #0]
    33bc:	46ac      	mov	ip, r5
    33be:	4464      	add	r4, ip
    33c0:	340a      	adds	r4, #10
    33c2:	34ff      	adds	r4, #255	; 0xff
    33c4:	2502      	movs	r5, #2
    33c6:	7025      	strb	r5, [r4, #0]
    33c8:	e7dc      	b.n	3384 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    33ca:	2a01      	cmp	r2, #1
    33cc:	d11a      	bne.n	3404 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    33ce:	2b00      	cmp	r3, #0
    33d0:	d105      	bne.n	33de <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    33d2:	6802      	ldr	r2, [r0, #0]
    33d4:	210c      	movs	r1, #12
    33d6:	230a      	movs	r3, #10
    33d8:	33ff      	adds	r3, #255	; 0xff
    33da:	54d1      	strb	r1, [r2, r3]
    33dc:	e7de      	b.n	339c <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    33de:	b249      	sxtb	r1, r1
    33e0:	2900      	cmp	r1, #0
    33e2:	db07      	blt.n	33f4 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    33e4:	6802      	ldr	r2, [r0, #0]
    33e6:	015b      	lsls	r3, r3, #5
    33e8:	18d3      	adds	r3, r2, r3
    33ea:	330a      	adds	r3, #10
    33ec:	33ff      	adds	r3, #255	; 0xff
    33ee:	2204      	movs	r2, #4
    33f0:	701a      	strb	r2, [r3, #0]
    33f2:	e7d3      	b.n	339c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    33f4:	6802      	ldr	r2, [r0, #0]
    33f6:	015b      	lsls	r3, r3, #5
    33f8:	18d3      	adds	r3, r2, r3
    33fa:	330a      	adds	r3, #10
    33fc:	33ff      	adds	r3, #255	; 0xff
    33fe:	2208      	movs	r2, #8
    3400:	701a      	strb	r2, [r3, #0]
    3402:	e7cb      	b.n	339c <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3404:	2a02      	cmp	r2, #2
    3406:	d1bd      	bne.n	3384 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3408:	6802      	ldr	r2, [r0, #0]
    340a:	015b      	lsls	r3, r3, #5
    340c:	18d3      	adds	r3, r2, r3
    340e:	330a      	adds	r3, #10
    3410:	33ff      	adds	r3, #255	; 0xff
    3412:	2210      	movs	r2, #16
    3414:	701a      	strb	r2, [r3, #0]
    3416:	e7c1      	b.n	339c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3418:	6802      	ldr	r2, [r0, #0]
    341a:	015b      	lsls	r3, r3, #5
    341c:	18d3      	adds	r3, r2, r3
    341e:	330a      	adds	r3, #10
    3420:	33ff      	adds	r3, #255	; 0xff
    3422:	2240      	movs	r2, #64	; 0x40
    3424:	701a      	strb	r2, [r3, #0]
    3426:	e7b9      	b.n	339c <usb_device_endpoint_enable_callback+0x40>
    3428:	0000a764 	.word	0x0000a764

0000342c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    342c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    342e:	230f      	movs	r3, #15
    3430:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3432:	18c4      	adds	r4, r0, r3
    3434:	3461      	adds	r4, #97	; 0x61
    3436:	34ff      	adds	r4, #255	; 0xff
    3438:	4d2f      	ldr	r5, [pc, #188]	; (34f8 <usb_device_endpoint_disable_callback+0xcc>)
    343a:	5cae      	ldrb	r6, [r5, r2]
    343c:	7825      	ldrb	r5, [r4, #0]
    343e:	43b5      	bics	r5, r6
    3440:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3442:	2a00      	cmp	r2, #0
    3444:	d129      	bne.n	349a <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3446:	2b00      	cmp	r3, #0
    3448:	d112      	bne.n	3470 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    344a:	2503      	movs	r5, #3
    344c:	2484      	movs	r4, #132	; 0x84
    344e:	0064      	lsls	r4, r4, #1
    3450:	6806      	ldr	r6, [r0, #0]
    3452:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3454:	2a03      	cmp	r2, #3
    3456:	d109      	bne.n	346c <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3458:	b249      	sxtb	r1, r1
    345a:	2900      	cmp	r1, #0
    345c:	db44      	blt.n	34e8 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    345e:	6802      	ldr	r2, [r0, #0]
    3460:	015b      	lsls	r3, r3, #5
    3462:	18d3      	adds	r3, r2, r3
    3464:	3309      	adds	r3, #9
    3466:	33ff      	adds	r3, #255	; 0xff
    3468:	2220      	movs	r2, #32
    346a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    346c:	2000      	movs	r0, #0
    346e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3470:	b24c      	sxtb	r4, r1
    3472:	2c00      	cmp	r4, #0
    3474:	db08      	blt.n	3488 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3476:	015c      	lsls	r4, r3, #5
    3478:	6805      	ldr	r5, [r0, #0]
    347a:	46ac      	mov	ip, r5
    347c:	4464      	add	r4, ip
    347e:	3409      	adds	r4, #9
    3480:	34ff      	adds	r4, #255	; 0xff
    3482:	2501      	movs	r5, #1
    3484:	7025      	strb	r5, [r4, #0]
    3486:	e7e5      	b.n	3454 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3488:	015c      	lsls	r4, r3, #5
    348a:	6805      	ldr	r5, [r0, #0]
    348c:	46ac      	mov	ip, r5
    348e:	4464      	add	r4, ip
    3490:	3409      	adds	r4, #9
    3492:	34ff      	adds	r4, #255	; 0xff
    3494:	2502      	movs	r5, #2
    3496:	7025      	strb	r5, [r4, #0]
    3498:	e7dc      	b.n	3454 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    349a:	2a01      	cmp	r2, #1
    349c:	d11a      	bne.n	34d4 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    349e:	2b00      	cmp	r3, #0
    34a0:	d105      	bne.n	34ae <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    34a2:	6802      	ldr	r2, [r0, #0]
    34a4:	210c      	movs	r1, #12
    34a6:	3309      	adds	r3, #9
    34a8:	33ff      	adds	r3, #255	; 0xff
    34aa:	54d1      	strb	r1, [r2, r3]
    34ac:	e7de      	b.n	346c <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    34ae:	b249      	sxtb	r1, r1
    34b0:	2900      	cmp	r1, #0
    34b2:	db07      	blt.n	34c4 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    34b4:	6802      	ldr	r2, [r0, #0]
    34b6:	015b      	lsls	r3, r3, #5
    34b8:	18d3      	adds	r3, r2, r3
    34ba:	3309      	adds	r3, #9
    34bc:	33ff      	adds	r3, #255	; 0xff
    34be:	2204      	movs	r2, #4
    34c0:	701a      	strb	r2, [r3, #0]
    34c2:	e7d3      	b.n	346c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    34c4:	6802      	ldr	r2, [r0, #0]
    34c6:	015b      	lsls	r3, r3, #5
    34c8:	18d3      	adds	r3, r2, r3
    34ca:	3309      	adds	r3, #9
    34cc:	33ff      	adds	r3, #255	; 0xff
    34ce:	2208      	movs	r2, #8
    34d0:	701a      	strb	r2, [r3, #0]
    34d2:	e7cb      	b.n	346c <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    34d4:	2a02      	cmp	r2, #2
    34d6:	d1bd      	bne.n	3454 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    34d8:	6802      	ldr	r2, [r0, #0]
    34da:	015b      	lsls	r3, r3, #5
    34dc:	18d3      	adds	r3, r2, r3
    34de:	3309      	adds	r3, #9
    34e0:	33ff      	adds	r3, #255	; 0xff
    34e2:	2210      	movs	r2, #16
    34e4:	701a      	strb	r2, [r3, #0]
    34e6:	e7c1      	b.n	346c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    34e8:	6802      	ldr	r2, [r0, #0]
    34ea:	015b      	lsls	r3, r3, #5
    34ec:	18d3      	adds	r3, r2, r3
    34ee:	3309      	adds	r3, #9
    34f0:	33ff      	adds	r3, #255	; 0xff
    34f2:	2240      	movs	r2, #64	; 0x40
    34f4:	701a      	strb	r2, [r3, #0]
    34f6:	e7b9      	b.n	346c <usb_device_endpoint_disable_callback+0x40>
    34f8:	0000a764 	.word	0x0000a764

000034fc <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    34fc:	2300      	movs	r3, #0
    34fe:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3500:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3502:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3504:	3301      	adds	r3, #1
    3506:	70c3      	strb	r3, [r0, #3]
}
    3508:	4770      	bx	lr
	...

0000350c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    350c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    350e:	780c      	ldrb	r4, [r1, #0]
    3510:	230f      	movs	r3, #15
    3512:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3514:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3516:	78ca      	ldrb	r2, [r1, #3]
    3518:	2a04      	cmp	r2, #4
    351a:	d870      	bhi.n	35fe <usb_device_endpoint_set_config+0xf2>
    351c:	0092      	lsls	r2, r2, #2
    351e:	4d89      	ldr	r5, [pc, #548]	; (3744 <usb_device_endpoint_set_config+0x238>)
    3520:	58aa      	ldr	r2, [r5, r2]
    3522:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3524:	6802      	ldr	r2, [r0, #0]
    3526:	3308      	adds	r3, #8
    3528:	015b      	lsls	r3, r3, #5
    352a:	2100      	movs	r1, #0
    352c:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    352e:	2200      	movs	r2, #0
    3530:	e082      	b.n	3638 <usb_device_endpoint_set_config+0x12c>
    3532:	015c      	lsls	r4, r3, #5
    3534:	6802      	ldr	r2, [r0, #0]
    3536:	4694      	mov	ip, r2
    3538:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    353a:	2280      	movs	r2, #128	; 0x80
    353c:	0052      	lsls	r2, r2, #1
    353e:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3540:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3542:	076d      	lsls	r5, r5, #29
    3544:	d178      	bne.n	3638 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3546:	32e4      	adds	r2, #228	; 0xe4
    3548:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    354a:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    354c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    354e:	422e      	tst	r6, r5
    3550:	d172      	bne.n	3638 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3552:	3d5f      	subs	r5, #95	; 0x5f
    3554:	32e4      	adds	r2, #228	; 0xe4
    3556:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3558:	001a      	movs	r2, r3
    355a:	3208      	adds	r2, #8
    355c:	0152      	lsls	r2, r2, #5
    355e:	6804      	ldr	r4, [r0, #0]
    3560:	18a4      	adds	r4, r4, r2
    3562:	352f      	adds	r5, #47	; 0x2f
    3564:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3566:	6800      	ldr	r0, [r0, #0]
    3568:	1882      	adds	r2, r0, r2
    356a:	2080      	movs	r0, #128	; 0x80
    356c:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    356e:	788a      	ldrb	r2, [r1, #2]
    3570:	2a00      	cmp	r2, #0
    3572:	d01f      	beq.n	35b4 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3574:	0158      	lsls	r0, r3, #5
    3576:	4a74      	ldr	r2, [pc, #464]	; (3748 <usb_device_endpoint_set_config+0x23c>)
    3578:	1812      	adds	r2, r2, r0
    357a:	6854      	ldr	r4, [r2, #4]
    357c:	2080      	movs	r0, #128	; 0x80
    357e:	0600      	lsls	r0, r0, #24
    3580:	4304      	orrs	r4, r0
    3582:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3584:	6954      	ldr	r4, [r2, #20]
    3586:	4320      	orrs	r0, r4
    3588:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    358a:	2507      	movs	r5, #7
    358c:	784c      	ldrb	r4, [r1, #1]
    358e:	015a      	lsls	r2, r3, #5
    3590:	4b6d      	ldr	r3, [pc, #436]	; (3748 <usb_device_endpoint_set_config+0x23c>)
    3592:	189b      	adds	r3, r3, r2
    3594:	6858      	ldr	r0, [r3, #4]
    3596:	402c      	ands	r4, r5
    3598:	0724      	lsls	r4, r4, #28
    359a:	4e6c      	ldr	r6, [pc, #432]	; (374c <usb_device_endpoint_set_config+0x240>)
    359c:	4030      	ands	r0, r6
    359e:	4320      	orrs	r0, r4
    35a0:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    35a2:	7849      	ldrb	r1, [r1, #1]
    35a4:	695a      	ldr	r2, [r3, #20]
    35a6:	4029      	ands	r1, r5
    35a8:	0709      	lsls	r1, r1, #28
    35aa:	4032      	ands	r2, r6
    35ac:	430a      	orrs	r2, r1
    35ae:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    35b0:	2200      	movs	r2, #0
    35b2:	e041      	b.n	3638 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    35b4:	0158      	lsls	r0, r3, #5
    35b6:	4a64      	ldr	r2, [pc, #400]	; (3748 <usb_device_endpoint_set_config+0x23c>)
    35b8:	1812      	adds	r2, r2, r0
    35ba:	6850      	ldr	r0, [r2, #4]
    35bc:	0040      	lsls	r0, r0, #1
    35be:	0840      	lsrs	r0, r0, #1
    35c0:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    35c2:	6950      	ldr	r0, [r2, #20]
    35c4:	0040      	lsls	r0, r0, #1
    35c6:	0840      	lsrs	r0, r0, #1
    35c8:	6150      	str	r0, [r2, #20]
    35ca:	e7de      	b.n	358a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    35cc:	2c00      	cmp	r4, #0
    35ce:	db35      	blt.n	363c <usb_device_endpoint_set_config+0x130>
    35d0:	015d      	lsls	r5, r3, #5
    35d2:	6802      	ldr	r2, [r0, #0]
    35d4:	4694      	mov	ip, r2
    35d6:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    35d8:	2280      	movs	r2, #128	; 0x80
    35da:	0052      	lsls	r2, r2, #1
    35dc:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    35de:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    35e0:	0776      	lsls	r6, r6, #29
    35e2:	d129      	bne.n	3638 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    35e4:	2680      	movs	r6, #128	; 0x80
    35e6:	0076      	lsls	r6, r6, #1
    35e8:	5daa      	ldrb	r2, [r5, r6]
    35ea:	2702      	movs	r7, #2
    35ec:	433a      	orrs	r2, r7
    35ee:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    35f0:	6802      	ldr	r2, [r0, #0]
    35f2:	0018      	movs	r0, r3
    35f4:	3008      	adds	r0, #8
    35f6:	0140      	lsls	r0, r0, #5
    35f8:	1812      	adds	r2, r2, r0
    35fa:	2040      	movs	r0, #64	; 0x40
    35fc:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    35fe:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3600:	784f      	ldrb	r7, [r1, #1]
    3602:	005d      	lsls	r5, r3, #1
    3604:	18ad      	adds	r5, r5, r2
    3606:	012d      	lsls	r5, r5, #4
    3608:	4e4f      	ldr	r6, [pc, #316]	; (3748 <usb_device_endpoint_set_config+0x23c>)
    360a:	1975      	adds	r5, r6, r5
    360c:	6868      	ldr	r0, [r5, #4]
    360e:	2407      	movs	r4, #7
    3610:	403c      	ands	r4, r7
    3612:	0724      	lsls	r4, r4, #28
    3614:	4e4d      	ldr	r6, [pc, #308]	; (374c <usb_device_endpoint_set_config+0x240>)
    3616:	4030      	ands	r0, r6
    3618:	4320      	orrs	r0, r4
    361a:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    361c:	7889      	ldrb	r1, [r1, #2]
    361e:	2900      	cmp	r1, #0
    3620:	d000      	beq.n	3624 <usb_device_endpoint_set_config+0x118>
    3622:	e088      	b.n	3736 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3624:	005b      	lsls	r3, r3, #1
    3626:	189b      	adds	r3, r3, r2
    3628:	011b      	lsls	r3, r3, #4
    362a:	4a47      	ldr	r2, [pc, #284]	; (3748 <usb_device_endpoint_set_config+0x23c>)
    362c:	18d3      	adds	r3, r2, r3
    362e:	685a      	ldr	r2, [r3, #4]
    3630:	0052      	lsls	r2, r2, #1
    3632:	0852      	lsrs	r2, r2, #1
    3634:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3636:	2200      	movs	r2, #0
}
    3638:	0010      	movs	r0, r2
    363a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    363c:	015d      	lsls	r5, r3, #5
    363e:	6802      	ldr	r2, [r0, #0]
    3640:	4694      	mov	ip, r2
    3642:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3644:	2280      	movs	r2, #128	; 0x80
    3646:	0052      	lsls	r2, r2, #1
    3648:	5caf      	ldrb	r7, [r5, r2]
    364a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    364c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    364e:	4237      	tst	r7, r6
    3650:	d1f2      	bne.n	3638 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3652:	3690      	adds	r6, #144	; 0x90
    3654:	5daa      	ldrb	r2, [r5, r6]
    3656:	2720      	movs	r7, #32
    3658:	433a      	orrs	r2, r7
    365a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    365c:	6802      	ldr	r2, [r0, #0]
    365e:	0018      	movs	r0, r3
    3660:	3008      	adds	r0, #8
    3662:	0140      	lsls	r0, r0, #5
    3664:	1812      	adds	r2, r2, r0
    3666:	2080      	movs	r0, #128	; 0x80
    3668:	7110      	strb	r0, [r2, #4]
    366a:	e7c8      	b.n	35fe <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    366c:	2c00      	cmp	r4, #0
    366e:	db17      	blt.n	36a0 <usb_device_endpoint_set_config+0x194>
    3670:	015d      	lsls	r5, r3, #5
    3672:	6802      	ldr	r2, [r0, #0]
    3674:	4694      	mov	ip, r2
    3676:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3678:	2280      	movs	r2, #128	; 0x80
    367a:	0052      	lsls	r2, r2, #1
    367c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    367e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3680:	0776      	lsls	r6, r6, #29
    3682:	d1d9      	bne.n	3638 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3684:	2680      	movs	r6, #128	; 0x80
    3686:	0076      	lsls	r6, r6, #1
    3688:	5daa      	ldrb	r2, [r5, r6]
    368a:	2703      	movs	r7, #3
    368c:	433a      	orrs	r2, r7
    368e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3690:	6802      	ldr	r2, [r0, #0]
    3692:	0018      	movs	r0, r3
    3694:	3008      	adds	r0, #8
    3696:	0140      	lsls	r0, r0, #5
    3698:	1812      	adds	r2, r2, r0
    369a:	2040      	movs	r0, #64	; 0x40
    369c:	7150      	strb	r0, [r2, #5]
    369e:	e7ae      	b.n	35fe <usb_device_endpoint_set_config+0xf2>
    36a0:	015d      	lsls	r5, r3, #5
    36a2:	6802      	ldr	r2, [r0, #0]
    36a4:	4694      	mov	ip, r2
    36a6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    36a8:	2280      	movs	r2, #128	; 0x80
    36aa:	0052      	lsls	r2, r2, #1
    36ac:	5caf      	ldrb	r7, [r5, r2]
    36ae:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    36b0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    36b2:	4237      	tst	r7, r6
    36b4:	d1c0      	bne.n	3638 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    36b6:	3690      	adds	r6, #144	; 0x90
    36b8:	5daa      	ldrb	r2, [r5, r6]
    36ba:	2730      	movs	r7, #48	; 0x30
    36bc:	433a      	orrs	r2, r7
    36be:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    36c0:	6802      	ldr	r2, [r0, #0]
    36c2:	0018      	movs	r0, r3
    36c4:	3008      	adds	r0, #8
    36c6:	0140      	lsls	r0, r0, #5
    36c8:	1812      	adds	r2, r2, r0
    36ca:	2080      	movs	r0, #128	; 0x80
    36cc:	7110      	strb	r0, [r2, #4]
    36ce:	e796      	b.n	35fe <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    36d0:	2c00      	cmp	r4, #0
    36d2:	db17      	blt.n	3704 <usb_device_endpoint_set_config+0x1f8>
    36d4:	015d      	lsls	r5, r3, #5
    36d6:	6802      	ldr	r2, [r0, #0]
    36d8:	4694      	mov	ip, r2
    36da:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    36dc:	2280      	movs	r2, #128	; 0x80
    36de:	0052      	lsls	r2, r2, #1
    36e0:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    36e2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    36e4:	0776      	lsls	r6, r6, #29
    36e6:	d1a7      	bne.n	3638 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    36e8:	2680      	movs	r6, #128	; 0x80
    36ea:	0076      	lsls	r6, r6, #1
    36ec:	5daa      	ldrb	r2, [r5, r6]
    36ee:	2704      	movs	r7, #4
    36f0:	433a      	orrs	r2, r7
    36f2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    36f4:	6802      	ldr	r2, [r0, #0]
    36f6:	0018      	movs	r0, r3
    36f8:	3008      	adds	r0, #8
    36fa:	0140      	lsls	r0, r0, #5
    36fc:	1812      	adds	r2, r2, r0
    36fe:	2040      	movs	r0, #64	; 0x40
    3700:	7150      	strb	r0, [r2, #5]
    3702:	e77c      	b.n	35fe <usb_device_endpoint_set_config+0xf2>
    3704:	015d      	lsls	r5, r3, #5
    3706:	6802      	ldr	r2, [r0, #0]
    3708:	4694      	mov	ip, r2
    370a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    370c:	2280      	movs	r2, #128	; 0x80
    370e:	0052      	lsls	r2, r2, #1
    3710:	5caf      	ldrb	r7, [r5, r2]
    3712:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3714:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3716:	4237      	tst	r7, r6
    3718:	d000      	beq.n	371c <usb_device_endpoint_set_config+0x210>
    371a:	e78d      	b.n	3638 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    371c:	3690      	adds	r6, #144	; 0x90
    371e:	5daa      	ldrb	r2, [r5, r6]
    3720:	2740      	movs	r7, #64	; 0x40
    3722:	433a      	orrs	r2, r7
    3724:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3726:	6802      	ldr	r2, [r0, #0]
    3728:	0018      	movs	r0, r3
    372a:	3008      	adds	r0, #8
    372c:	0140      	lsls	r0, r0, #5
    372e:	1812      	adds	r2, r2, r0
    3730:	2080      	movs	r0, #128	; 0x80
    3732:	7110      	strb	r0, [r2, #4]
    3734:	e763      	b.n	35fe <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3736:	6869      	ldr	r1, [r5, #4]
    3738:	2380      	movs	r3, #128	; 0x80
    373a:	061b      	lsls	r3, r3, #24
    373c:	430b      	orrs	r3, r1
    373e:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    3740:	2200      	movs	r2, #0
    3742:	e779      	b.n	3638 <usb_device_endpoint_set_config+0x12c>
    3744:	0000a740 	.word	0x0000a740
    3748:	200056b0 	.word	0x200056b0
    374c:	8fffffff 	.word	0x8fffffff

00003750 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    3750:	230f      	movs	r3, #15
    3752:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    3754:	b249      	sxtb	r1, r1
    3756:	2900      	cmp	r1, #0
    3758:	db0a      	blt.n	3770 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    375a:	3308      	adds	r3, #8
    375c:	015b      	lsls	r3, r3, #5
    375e:	6802      	ldr	r2, [r0, #0]
    3760:	18d2      	adds	r2, r2, r3
    3762:	2140      	movs	r1, #64	; 0x40
    3764:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3766:	6802      	ldr	r2, [r0, #0]
    3768:	18d3      	adds	r3, r2, r3
    376a:	2201      	movs	r2, #1
    376c:	71da      	strb	r2, [r3, #7]
	}
}
    376e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3770:	3308      	adds	r3, #8
    3772:	015b      	lsls	r3, r3, #5
    3774:	6802      	ldr	r2, [r0, #0]
    3776:	18d2      	adds	r2, r2, r3
    3778:	2180      	movs	r1, #128	; 0x80
    377a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    377c:	6802      	ldr	r2, [r0, #0]
    377e:	18d3      	adds	r3, r2, r3
    3780:	2202      	movs	r2, #2
    3782:	71da      	strb	r2, [r3, #7]
    3784:	e7f3      	b.n	376e <usb_device_endpoint_abort_job+0x1e>

00003786 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3786:	230f      	movs	r3, #15
    3788:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    378a:	b249      	sxtb	r1, r1
    378c:	2900      	cmp	r1, #0
    378e:	db07      	blt.n	37a0 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    3790:	6802      	ldr	r2, [r0, #0]
    3792:	3308      	adds	r3, #8
    3794:	015b      	lsls	r3, r3, #5
    3796:	18d3      	adds	r3, r2, r3
    3798:	7998      	ldrb	r0, [r3, #6]
    379a:	06c0      	lsls	r0, r0, #27
    379c:	0fc0      	lsrs	r0, r0, #31
	}
}
    379e:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    37a0:	6802      	ldr	r2, [r0, #0]
    37a2:	3308      	adds	r3, #8
    37a4:	015b      	lsls	r3, r3, #5
    37a6:	18d3      	adds	r3, r2, r3
    37a8:	7998      	ldrb	r0, [r3, #6]
    37aa:	0680      	lsls	r0, r0, #26
    37ac:	0fc0      	lsrs	r0, r0, #31
    37ae:	e7f6      	b.n	379e <usb_device_endpoint_is_halted+0x18>

000037b0 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    37b0:	230f      	movs	r3, #15
    37b2:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    37b4:	b249      	sxtb	r1, r1
    37b6:	2900      	cmp	r1, #0
    37b8:	db06      	blt.n	37c8 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    37ba:	6802      	ldr	r2, [r0, #0]
    37bc:	3308      	adds	r3, #8
    37be:	015b      	lsls	r3, r3, #5
    37c0:	18d3      	adds	r3, r2, r3
    37c2:	2210      	movs	r2, #16
    37c4:	715a      	strb	r2, [r3, #5]
	}
}
    37c6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    37c8:	6802      	ldr	r2, [r0, #0]
    37ca:	3308      	adds	r3, #8
    37cc:	015b      	lsls	r3, r3, #5
    37ce:	18d3      	adds	r3, r2, r3
    37d0:	2220      	movs	r2, #32
    37d2:	715a      	strb	r2, [r3, #5]
    37d4:	e7f7      	b.n	37c6 <usb_device_endpoint_set_halt+0x16>

000037d6 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    37d6:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    37d8:	230f      	movs	r3, #15
    37da:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    37dc:	b249      	sxtb	r1, r1
    37de:	2900      	cmp	r1, #0
    37e0:	db1d      	blt.n	381e <usb_device_endpoint_clear_halt+0x48>
    37e2:	0159      	lsls	r1, r3, #5
    37e4:	6802      	ldr	r2, [r0, #0]
    37e6:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    37e8:	2483      	movs	r4, #131	; 0x83
    37ea:	0064      	lsls	r4, r4, #1
    37ec:	5d14      	ldrb	r4, [r2, r4]
    37ee:	06e4      	lsls	r4, r4, #27
    37f0:	d514      	bpl.n	381c <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    37f2:	2510      	movs	r5, #16
    37f4:	2482      	movs	r4, #130	; 0x82
    37f6:	0064      	lsls	r4, r4, #1
    37f8:	5515      	strb	r5, [r2, r4]
    37fa:	6802      	ldr	r2, [r0, #0]
    37fc:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    37fe:	2108      	movs	r1, #8
    3800:	31ff      	adds	r1, #255	; 0xff
    3802:	5c51      	ldrb	r1, [r2, r1]
    3804:	0689      	lsls	r1, r1, #26
    3806:	d509      	bpl.n	381c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3808:	3ce4      	subs	r4, #228	; 0xe4
    380a:	2108      	movs	r1, #8
    380c:	31ff      	adds	r1, #255	; 0xff
    380e:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    3810:	6802      	ldr	r2, [r0, #0]
    3812:	3308      	adds	r3, #8
    3814:	015b      	lsls	r3, r3, #5
    3816:	18d3      	adds	r3, r2, r3
    3818:	2201      	movs	r2, #1
    381a:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    381c:	bd30      	pop	{r4, r5, pc}
    381e:	0159      	lsls	r1, r3, #5
    3820:	6802      	ldr	r2, [r0, #0]
    3822:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3824:	2483      	movs	r4, #131	; 0x83
    3826:	0064      	lsls	r4, r4, #1
    3828:	5d14      	ldrb	r4, [r2, r4]
    382a:	06a4      	lsls	r4, r4, #26
    382c:	d5f6      	bpl.n	381c <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    382e:	2520      	movs	r5, #32
    3830:	2482      	movs	r4, #130	; 0x82
    3832:	0064      	lsls	r4, r4, #1
    3834:	5515      	strb	r5, [r2, r4]
    3836:	6802      	ldr	r2, [r0, #0]
    3838:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    383a:	2108      	movs	r1, #8
    383c:	31ff      	adds	r1, #255	; 0xff
    383e:	5c51      	ldrb	r1, [r2, r1]
    3840:	0649      	lsls	r1, r1, #25
    3842:	d5eb      	bpl.n	381c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3844:	3cc4      	subs	r4, #196	; 0xc4
    3846:	2108      	movs	r1, #8
    3848:	31ff      	adds	r1, #255	; 0xff
    384a:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    384c:	6802      	ldr	r2, [r0, #0]
    384e:	3308      	adds	r3, #8
    3850:	015b      	lsls	r3, r3, #5
    3852:	18d3      	adds	r3, r2, r3
    3854:	2202      	movs	r2, #2
    3856:	711a      	strb	r2, [r3, #4]
    3858:	e7e0      	b.n	381c <usb_device_endpoint_clear_halt+0x46>
	...

0000385c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    385c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    385e:	000c      	movs	r4, r1
    3860:	3408      	adds	r4, #8
    3862:	0164      	lsls	r4, r4, #5
    3864:	6805      	ldr	r5, [r0, #0]
    3866:	5d64      	ldrb	r4, [r4, r5]
    3868:	0664      	lsls	r4, r4, #25
    386a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    386c:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    386e:	2c00      	cmp	r4, #0
    3870:	d101      	bne.n	3876 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    3872:	0028      	movs	r0, r5
    3874:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    3876:	014c      	lsls	r4, r1, #5
    3878:	4d0b      	ldr	r5, [pc, #44]	; (38a8 <usb_device_endpoint_write_buffer_job+0x4c>)
    387a:	192d      	adds	r5, r5, r4
    387c:	002c      	movs	r4, r5
    387e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3880:	696a      	ldr	r2, [r5, #20]
    3882:	4d0a      	ldr	r5, [pc, #40]	; (38ac <usb_device_endpoint_write_buffer_job+0x50>)
    3884:	402a      	ands	r2, r5
    3886:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3888:	6962      	ldr	r2, [r4, #20]
    388a:	049b      	lsls	r3, r3, #18
    388c:	0c9b      	lsrs	r3, r3, #18
    388e:	0b92      	lsrs	r2, r2, #14
    3890:	0392      	lsls	r2, r2, #14
    3892:	4313      	orrs	r3, r2
    3894:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3896:	6803      	ldr	r3, [r0, #0]
    3898:	3108      	adds	r1, #8
    389a:	0149      	lsls	r1, r1, #5
    389c:	1859      	adds	r1, r3, r1
    389e:	2380      	movs	r3, #128	; 0x80
    38a0:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    38a2:	2500      	movs	r5, #0
    38a4:	e7e5      	b.n	3872 <usb_device_endpoint_write_buffer_job+0x16>
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	200056b0 	.word	0x200056b0
    38ac:	f0003fff 	.word	0xf0003fff

000038b0 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    38b0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    38b2:	000c      	movs	r4, r1
    38b4:	3408      	adds	r4, #8
    38b6:	0164      	lsls	r4, r4, #5
    38b8:	6805      	ldr	r5, [r0, #0]
    38ba:	5d64      	ldrb	r4, [r4, r5]
    38bc:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    38be:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    38c0:	2c00      	cmp	r4, #0
    38c2:	d101      	bne.n	38c8 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    38c4:	0028      	movs	r0, r5
    38c6:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    38c8:	4c0b      	ldr	r4, [pc, #44]	; (38f8 <usb_device_endpoint_read_buffer_job+0x48>)
    38ca:	014d      	lsls	r5, r1, #5
    38cc:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    38ce:	1962      	adds	r2, r4, r5
    38d0:	6854      	ldr	r4, [r2, #4]
    38d2:	049b      	lsls	r3, r3, #18
    38d4:	091b      	lsrs	r3, r3, #4
    38d6:	4d09      	ldr	r5, [pc, #36]	; (38fc <usb_device_endpoint_read_buffer_job+0x4c>)
    38d8:	402c      	ands	r4, r5
    38da:	4323      	orrs	r3, r4
    38dc:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    38de:	6853      	ldr	r3, [r2, #4]
    38e0:	0b9b      	lsrs	r3, r3, #14
    38e2:	039b      	lsls	r3, r3, #14
    38e4:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    38e6:	6803      	ldr	r3, [r0, #0]
    38e8:	3108      	adds	r1, #8
    38ea:	0149      	lsls	r1, r1, #5
    38ec:	1859      	adds	r1, r3, r1
    38ee:	2340      	movs	r3, #64	; 0x40
    38f0:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    38f2:	2500      	movs	r5, #0
    38f4:	e7e6      	b.n	38c4 <usb_device_endpoint_read_buffer_job+0x14>
    38f6:	46c0      	nop			; (mov r8, r8)
    38f8:	200056b0 	.word	0x200056b0
    38fc:	f0003fff 	.word	0xf0003fff

00003900 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3900:	4b09      	ldr	r3, [pc, #36]	; (3928 <usb_device_endpoint_setup_buffer_job+0x28>)
    3902:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3904:	685a      	ldr	r2, [r3, #4]
    3906:	4909      	ldr	r1, [pc, #36]	; (392c <usb_device_endpoint_setup_buffer_job+0x2c>)
    3908:	4011      	ands	r1, r2
    390a:	2280      	movs	r2, #128	; 0x80
    390c:	0292      	lsls	r2, r2, #10
    390e:	430a      	orrs	r2, r1
    3910:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3912:	685a      	ldr	r2, [r3, #4]
    3914:	0b92      	lsrs	r2, r2, #14
    3916:	0392      	lsls	r2, r2, #14
    3918:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    391a:	6802      	ldr	r2, [r0, #0]
    391c:	2140      	movs	r1, #64	; 0x40
    391e:	2382      	movs	r3, #130	; 0x82
    3920:	005b      	lsls	r3, r3, #1
    3922:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    3924:	2000      	movs	r0, #0
    3926:	4770      	bx	lr
    3928:	200056b0 	.word	0x200056b0
    392c:	f0003fff 	.word	0xf0003fff

00003930 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    3930:	6802      	ldr	r2, [r0, #0]
    3932:	7813      	ldrb	r3, [r2, #0]
    3934:	2102      	movs	r1, #2
    3936:	430b      	orrs	r3, r1
    3938:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    393a:	6802      	ldr	r2, [r0, #0]
    393c:	7893      	ldrb	r3, [r2, #2]
    393e:	2b02      	cmp	r3, #2
    3940:	d0fc      	beq.n	393c <usb_enable+0xc>
}
    3942:	4770      	bx	lr

00003944 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3944:	b5f0      	push	{r4, r5, r6, r7, lr}
    3946:	46de      	mov	lr, fp
    3948:	4657      	mov	r7, sl
    394a:	464e      	mov	r6, r9
    394c:	4645      	mov	r5, r8
    394e:	b5e0      	push	{r5, r6, r7, lr}
    3950:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3952:	4bc2      	ldr	r3, [pc, #776]	; (3c5c <USB_Handler+0x318>)
    3954:	681f      	ldr	r7, [r3, #0]
    3956:	683d      	ldr	r5, [r7, #0]
    3958:	782b      	ldrb	r3, [r5, #0]
    395a:	09db      	lsrs	r3, r3, #7
    395c:	d114      	bne.n	3988 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    395e:	8c2e      	ldrh	r6, [r5, #32]
    3960:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3962:	2e00      	cmp	r6, #0
    3964:	d000      	beq.n	3968 <USB_Handler+0x24>
    3966:	e1a9      	b.n	3cbc <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3968:	8bae      	ldrh	r6, [r5, #28]
    396a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    396c:	23ab      	movs	r3, #171	; 0xab
    396e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3970:	5afb      	ldrh	r3, [r7, r3]
    3972:	22aa      	movs	r2, #170	; 0xaa
    3974:	0052      	lsls	r2, r2, #1
    3976:	5abd      	ldrh	r5, [r7, r2]
    3978:	401d      	ands	r5, r3
    397a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    397c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    397e:	4fb8      	ldr	r7, [pc, #736]	; (3c60 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3980:	4bb6      	ldr	r3, [pc, #728]	; (3c5c <USB_Handler+0x318>)
    3982:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3984:	4698      	mov	r8, r3
    3986:	e184      	b.n	3c92 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3988:	8c2b      	ldrh	r3, [r5, #32]
    398a:	b29b      	uxth	r3, r3
    398c:	2b00      	cmp	r3, #0
    398e:	d100      	bne.n	3992 <USB_Handler+0x4e>
    3990:	e0de      	b.n	3b50 <USB_Handler+0x20c>
    3992:	8c28      	ldrh	r0, [r5, #32]
    3994:	b280      	uxth	r0, r0
    3996:	4bb3      	ldr	r3, [pc, #716]	; (3c64 <USB_Handler+0x320>)
    3998:	4798      	blx	r3
    399a:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    399c:	281f      	cmp	r0, #31
    399e:	d900      	bls.n	39a2 <USB_Handler+0x5e>
    39a0:	e0d6      	b.n	3b50 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    39a2:	0003      	movs	r3, r0
    39a4:	3308      	adds	r3, #8
    39a6:	015b      	lsls	r3, r3, #5
    39a8:	18ed      	adds	r5, r5, r3
    39aa:	79ed      	ldrb	r5, [r5, #7]
    39ac:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    39ae:	07ab      	lsls	r3, r5, #30
    39b0:	d041      	beq.n	3a36 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    39b2:	4aad      	ldr	r2, [pc, #692]	; (3c68 <USB_Handler+0x324>)
    39b4:	2301      	movs	r3, #1
    39b6:	4083      	lsls	r3, r0
    39b8:	6811      	ldr	r1, [r2, #0]
    39ba:	4399      	bics	r1, r3
    39bc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    39be:	0003      	movs	r3, r0
    39c0:	3308      	adds	r3, #8
    39c2:	015b      	lsls	r3, r3, #5
    39c4:	683a      	ldr	r2, [r7, #0]
    39c6:	4694      	mov	ip, r2
    39c8:	4463      	add	r3, ip
    39ca:	2203      	movs	r2, #3
    39cc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    39ce:	183b      	adds	r3, r7, r0
    39d0:	33ae      	adds	r3, #174	; 0xae
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	07db      	lsls	r3, r3, #31
    39d6:	d52e      	bpl.n	3a36 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    39d8:	4ba4      	ldr	r3, [pc, #656]	; (3c6c <USB_Handler+0x328>)
    39da:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    39dc:	683a      	ldr	r2, [r7, #0]
    39de:	0003      	movs	r3, r0
    39e0:	3308      	adds	r3, #8
    39e2:	015b      	lsls	r3, r3, #5
    39e4:	5c9b      	ldrb	r3, [r3, r2]
    39e6:	079b      	lsls	r3, r3, #30
    39e8:	0f9b      	lsrs	r3, r3, #30
    39ea:	2b01      	cmp	r3, #1
    39ec:	d100      	bne.n	39f0 <USB_Handler+0xac>
    39ee:	e081      	b.n	3af4 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    39f0:	0142      	lsls	r2, r0, #5
    39f2:	4b9f      	ldr	r3, [pc, #636]	; (3c70 <USB_Handler+0x32c>)
    39f4:	189b      	adds	r3, r3, r2
    39f6:	685a      	ldr	r2, [r3, #4]
    39f8:	0112      	lsls	r2, r2, #4
    39fa:	0c92      	lsrs	r2, r2, #18
    39fc:	b290      	uxth	r0, r2
    39fe:	499b      	ldr	r1, [pc, #620]	; (3c6c <USB_Handler+0x328>)
    3a00:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3a02:	685a      	ldr	r2, [r3, #4]
    3a04:	0492      	lsls	r2, r2, #18
    3a06:	0c92      	lsrs	r2, r2, #18
    3a08:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3a0a:	685a      	ldr	r2, [r3, #4]
    3a0c:	4999      	ldr	r1, [pc, #612]	; (3c74 <USB_Handler+0x330>)
    3a0e:	400a      	ands	r2, r1
    3a10:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3a12:	2800      	cmp	r0, #0
    3a14:	d107      	bne.n	3a26 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3a16:	0162      	lsls	r2, r4, #5
    3a18:	4b95      	ldr	r3, [pc, #596]	; (3c70 <USB_Handler+0x32c>)
    3a1a:	189b      	adds	r3, r3, r2
    3a1c:	685b      	ldr	r3, [r3, #4]
    3a1e:	049b      	lsls	r3, r3, #18
    3a20:	0c9b      	lsrs	r3, r3, #18
    3a22:	4a92      	ldr	r2, [pc, #584]	; (3c6c <USB_Handler+0x328>)
    3a24:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3a26:	4b8d      	ldr	r3, [pc, #564]	; (3c5c <USB_Handler+0x318>)
    3a28:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3a2a:	1ca3      	adds	r3, r4, #2
    3a2c:	011b      	lsls	r3, r3, #4
    3a2e:	18c3      	adds	r3, r0, r3
    3a30:	685b      	ldr	r3, [r3, #4]
    3a32:	498e      	ldr	r1, [pc, #568]	; (3c6c <USB_Handler+0x328>)
    3a34:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3a36:	076b      	lsls	r3, r5, #29
    3a38:	d50e      	bpl.n	3a58 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a3a:	4a8b      	ldr	r2, [pc, #556]	; (3c68 <USB_Handler+0x324>)
    3a3c:	2301      	movs	r3, #1
    3a3e:	40a3      	lsls	r3, r4
    3a40:	6811      	ldr	r1, [r2, #0]
    3a42:	4399      	bics	r1, r3
    3a44:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a46:	4b85      	ldr	r3, [pc, #532]	; (3c5c <USB_Handler+0x318>)
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	0022      	movs	r2, r4
    3a4e:	3208      	adds	r2, #8
    3a50:	0152      	lsls	r2, r2, #5
    3a52:	189b      	adds	r3, r3, r2
    3a54:	2204      	movs	r2, #4
    3a56:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3a58:	072b      	lsls	r3, r5, #28
    3a5a:	d514      	bpl.n	3a86 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a5c:	4a82      	ldr	r2, [pc, #520]	; (3c68 <USB_Handler+0x324>)
    3a5e:	2301      	movs	r3, #1
    3a60:	40a3      	lsls	r3, r4
    3a62:	6811      	ldr	r1, [r2, #0]
    3a64:	4399      	bics	r1, r3
    3a66:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a68:	4b7c      	ldr	r3, [pc, #496]	; (3c5c <USB_Handler+0x318>)
    3a6a:	6818      	ldr	r0, [r3, #0]
    3a6c:	0023      	movs	r3, r4
    3a6e:	3308      	adds	r3, #8
    3a70:	015b      	lsls	r3, r3, #5
    3a72:	6802      	ldr	r2, [r0, #0]
    3a74:	4694      	mov	ip, r2
    3a76:	4463      	add	r3, ip
    3a78:	2208      	movs	r2, #8
    3a7a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a7c:	1903      	adds	r3, r0, r4
    3a7e:	33ae      	adds	r3, #174	; 0xae
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	079b      	lsls	r3, r3, #30
    3a84:	d447      	bmi.n	3b16 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3a86:	06eb      	lsls	r3, r5, #27
    3a88:	d514      	bpl.n	3ab4 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a8a:	4a77      	ldr	r2, [pc, #476]	; (3c68 <USB_Handler+0x324>)
    3a8c:	2301      	movs	r3, #1
    3a8e:	40a3      	lsls	r3, r4
    3a90:	6811      	ldr	r1, [r2, #0]
    3a92:	4399      	bics	r1, r3
    3a94:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a96:	4b71      	ldr	r3, [pc, #452]	; (3c5c <USB_Handler+0x318>)
    3a98:	6818      	ldr	r0, [r3, #0]
    3a9a:	0023      	movs	r3, r4
    3a9c:	3308      	adds	r3, #8
    3a9e:	015b      	lsls	r3, r3, #5
    3aa0:	6802      	ldr	r2, [r0, #0]
    3aa2:	4694      	mov	ip, r2
    3aa4:	4463      	add	r3, ip
    3aa6:	2210      	movs	r2, #16
    3aa8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3aaa:	1903      	adds	r3, r0, r4
    3aac:	33ae      	adds	r3, #174	; 0xae
    3aae:	781b      	ldrb	r3, [r3, #0]
    3ab0:	075b      	lsls	r3, r3, #29
    3ab2:	d43e      	bmi.n	3b32 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3ab4:	06ab      	lsls	r3, r5, #26
    3ab6:	d400      	bmi.n	3aba <USB_Handler+0x176>
    3ab8:	e0b0      	b.n	3c1c <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3aba:	4a6b      	ldr	r2, [pc, #428]	; (3c68 <USB_Handler+0x324>)
    3abc:	2301      	movs	r3, #1
    3abe:	40a3      	lsls	r3, r4
    3ac0:	6811      	ldr	r1, [r2, #0]
    3ac2:	4399      	bics	r1, r3
    3ac4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3ac6:	4b65      	ldr	r3, [pc, #404]	; (3c5c <USB_Handler+0x318>)
    3ac8:	6818      	ldr	r0, [r3, #0]
    3aca:	0023      	movs	r3, r4
    3acc:	3308      	adds	r3, #8
    3ace:	015b      	lsls	r3, r3, #5
    3ad0:	6802      	ldr	r2, [r0, #0]
    3ad2:	4694      	mov	ip, r2
    3ad4:	4463      	add	r3, ip
    3ad6:	2220      	movs	r2, #32
    3ad8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3ada:	1903      	adds	r3, r0, r4
    3adc:	33ae      	adds	r3, #174	; 0xae
    3ade:	781b      	ldrb	r3, [r3, #0]
    3ae0:	071b      	lsls	r3, r3, #28
    3ae2:	d400      	bmi.n	3ae6 <USB_Handler+0x1a2>
    3ae4:	e09a      	b.n	3c1c <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    3ae6:	4961      	ldr	r1, [pc, #388]	; (3c6c <USB_Handler+0x328>)
    3ae8:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3aea:	0124      	lsls	r4, r4, #4
    3aec:	1904      	adds	r4, r0, r4
    3aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3af0:	4798      	blx	r3
    3af2:	e093      	b.n	3c1c <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3af4:	0142      	lsls	r2, r0, #5
    3af6:	4b5e      	ldr	r3, [pc, #376]	; (3c70 <USB_Handler+0x32c>)
    3af8:	189b      	adds	r3, r3, r2
    3afa:	685a      	ldr	r2, [r3, #4]
    3afc:	0492      	lsls	r2, r2, #18
    3afe:	0c92      	lsrs	r2, r2, #18
    3b00:	495a      	ldr	r1, [pc, #360]	; (3c6c <USB_Handler+0x328>)
    3b02:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3b04:	685a      	ldr	r2, [r3, #4]
    3b06:	0112      	lsls	r2, r2, #4
    3b08:	0c92      	lsrs	r2, r2, #18
    3b0a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3b0c:	685a      	ldr	r2, [r3, #4]
    3b0e:	0b92      	lsrs	r2, r2, #14
    3b10:	0392      	lsls	r2, r2, #14
    3b12:	605a      	str	r2, [r3, #4]
    3b14:	e787      	b.n	3a26 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    3b16:	4955      	ldr	r1, [pc, #340]	; (3c6c <USB_Handler+0x328>)
    3b18:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3b1a:	0162      	lsls	r2, r4, #5
    3b1c:	4b54      	ldr	r3, [pc, #336]	; (3c70 <USB_Handler+0x32c>)
    3b1e:	189b      	adds	r3, r3, r2
    3b20:	89db      	ldrh	r3, [r3, #14]
    3b22:	221f      	movs	r2, #31
    3b24:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3b26:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3b28:	0123      	lsls	r3, r4, #4
    3b2a:	18c3      	adds	r3, r0, r3
    3b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b2e:	4798      	blx	r3
    3b30:	e7a9      	b.n	3a86 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    3b32:	494e      	ldr	r1, [pc, #312]	; (3c6c <USB_Handler+0x328>)
    3b34:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3b36:	0162      	lsls	r2, r4, #5
    3b38:	4b4d      	ldr	r3, [pc, #308]	; (3c70 <USB_Handler+0x32c>)
    3b3a:	189b      	adds	r3, r3, r2
    3b3c:	685b      	ldr	r3, [r3, #4]
    3b3e:	011b      	lsls	r3, r3, #4
    3b40:	0c9b      	lsrs	r3, r3, #18
    3b42:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3b44:	0123      	lsls	r3, r4, #4
    3b46:	18c3      	adds	r3, r0, r3
    3b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b4a:	2100      	movs	r1, #0
    3b4c:	4798      	blx	r3
    3b4e:	e7b1      	b.n	3ab4 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3b50:	8bac      	ldrh	r4, [r5, #28]
    3b52:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3b54:	0763      	lsls	r3, r4, #29
    3b56:	d505      	bpl.n	3b64 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3b58:	2304      	movs	r3, #4
    3b5a:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3b5c:	33a1      	adds	r3, #161	; 0xa1
    3b5e:	5cfb      	ldrb	r3, [r7, r3]
    3b60:	07db      	lsls	r3, r3, #31
    3b62:	d462      	bmi.n	3c2a <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    3b64:	0723      	lsls	r3, r4, #28
    3b66:	d50b      	bpl.n	3b80 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    3b68:	2200      	movs	r2, #0
    3b6a:	4b3f      	ldr	r3, [pc, #252]	; (3c68 <USB_Handler+0x324>)
    3b6c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3b6e:	4b3b      	ldr	r3, [pc, #236]	; (3c5c <USB_Handler+0x318>)
    3b70:	6818      	ldr	r0, [r3, #0]
    3b72:	2308      	movs	r3, #8
    3b74:	6802      	ldr	r2, [r0, #0]
    3b76:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3b78:	339d      	adds	r3, #157	; 0x9d
    3b7a:	5cc3      	ldrb	r3, [r0, r3]
    3b7c:	079b      	lsls	r3, r3, #30
    3b7e:	d458      	bmi.n	3c32 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3b80:	0663      	lsls	r3, r4, #25
    3b82:	d508      	bpl.n	3b96 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3b84:	4b35      	ldr	r3, [pc, #212]	; (3c5c <USB_Handler+0x318>)
    3b86:	6818      	ldr	r0, [r3, #0]
    3b88:	2340      	movs	r3, #64	; 0x40
    3b8a:	6802      	ldr	r2, [r0, #0]
    3b8c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3b8e:	3365      	adds	r3, #101	; 0x65
    3b90:	5cc3      	ldrb	r3, [r0, r3]
    3b92:	06db      	lsls	r3, r3, #27
    3b94:	d450      	bmi.n	3c38 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3b96:	06a3      	lsls	r3, r4, #26
    3b98:	d508      	bpl.n	3bac <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3b9a:	4b30      	ldr	r3, [pc, #192]	; (3c5c <USB_Handler+0x318>)
    3b9c:	6818      	ldr	r0, [r3, #0]
    3b9e:	2320      	movs	r3, #32
    3ba0:	6802      	ldr	r2, [r0, #0]
    3ba2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3ba4:	3385      	adds	r3, #133	; 0x85
    3ba6:	5cc3      	ldrb	r3, [r0, r3]
    3ba8:	071b      	lsls	r3, r3, #28
    3baa:	d448      	bmi.n	3c3e <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3bac:	06e3      	lsls	r3, r4, #27
    3bae:	d508      	bpl.n	3bc2 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3bb0:	4b2a      	ldr	r3, [pc, #168]	; (3c5c <USB_Handler+0x318>)
    3bb2:	6818      	ldr	r0, [r3, #0]
    3bb4:	2310      	movs	r3, #16
    3bb6:	6802      	ldr	r2, [r0, #0]
    3bb8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3bba:	3395      	adds	r3, #149	; 0x95
    3bbc:	5cc3      	ldrb	r3, [r0, r3]
    3bbe:	075b      	lsls	r3, r3, #29
    3bc0:	d440      	bmi.n	3c44 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3bc2:	0623      	lsls	r3, r4, #24
    3bc4:	d50b      	bpl.n	3bde <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    3bc6:	2200      	movs	r2, #0
    3bc8:	4b27      	ldr	r3, [pc, #156]	; (3c68 <USB_Handler+0x324>)
    3bca:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3bcc:	4b23      	ldr	r3, [pc, #140]	; (3c5c <USB_Handler+0x318>)
    3bce:	6818      	ldr	r0, [r3, #0]
    3bd0:	2380      	movs	r3, #128	; 0x80
    3bd2:	6802      	ldr	r2, [r0, #0]
    3bd4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3bd6:	3325      	adds	r3, #37	; 0x25
    3bd8:	5cc3      	ldrb	r3, [r0, r3]
    3bda:	069b      	lsls	r3, r3, #26
    3bdc:	d435      	bmi.n	3c4a <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3bde:	05e3      	lsls	r3, r4, #23
    3be0:	d50c      	bpl.n	3bfc <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    3be2:	2200      	movs	r2, #0
    3be4:	4b20      	ldr	r3, [pc, #128]	; (3c68 <USB_Handler+0x324>)
    3be6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3be8:	4b1c      	ldr	r3, [pc, #112]	; (3c5c <USB_Handler+0x318>)
    3bea:	6818      	ldr	r0, [r3, #0]
    3bec:	2380      	movs	r3, #128	; 0x80
    3bee:	005b      	lsls	r3, r3, #1
    3bf0:	6802      	ldr	r2, [r0, #0]
    3bf2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3bf4:	3b5b      	subs	r3, #91	; 0x5b
    3bf6:	5cc3      	ldrb	r3, [r0, r3]
    3bf8:	065b      	lsls	r3, r3, #25
    3bfa:	d429      	bmi.n	3c50 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3bfc:	05a3      	lsls	r3, r4, #22
    3bfe:	d50d      	bpl.n	3c1c <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    3c00:	2200      	movs	r2, #0
    3c02:	4b19      	ldr	r3, [pc, #100]	; (3c68 <USB_Handler+0x324>)
    3c04:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3c06:	4b15      	ldr	r3, [pc, #84]	; (3c5c <USB_Handler+0x318>)
    3c08:	6818      	ldr	r0, [r3, #0]
    3c0a:	2380      	movs	r3, #128	; 0x80
    3c0c:	009b      	lsls	r3, r3, #2
    3c0e:	6802      	ldr	r2, [r0, #0]
    3c10:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3c12:	3b5c      	subs	r3, #92	; 0x5c
    3c14:	3bff      	subs	r3, #255	; 0xff
    3c16:	5cc3      	ldrb	r3, [r0, r3]
    3c18:	2b7f      	cmp	r3, #127	; 0x7f
    3c1a:	d81c      	bhi.n	3c56 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3c1c:	b003      	add	sp, #12
    3c1e:	bc3c      	pop	{r2, r3, r4, r5}
    3c20:	4690      	mov	r8, r2
    3c22:	4699      	mov	r9, r3
    3c24:	46a2      	mov	sl, r4
    3c26:	46ab      	mov	fp, r5
    3c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3c2a:	687b      	ldr	r3, [r7, #4]
    3c2c:	0038      	movs	r0, r7
    3c2e:	4798      	blx	r3
    3c30:	e798      	b.n	3b64 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3c32:	6883      	ldr	r3, [r0, #8]
    3c34:	4798      	blx	r3
    3c36:	e7a3      	b.n	3b80 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3c38:	6943      	ldr	r3, [r0, #20]
    3c3a:	4798      	blx	r3
    3c3c:	e7ab      	b.n	3b96 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3c3e:	6903      	ldr	r3, [r0, #16]
    3c40:	4798      	blx	r3
    3c42:	e7b3      	b.n	3bac <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3c44:	68c3      	ldr	r3, [r0, #12]
    3c46:	4798      	blx	r3
    3c48:	e7bb      	b.n	3bc2 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3c4a:	6983      	ldr	r3, [r0, #24]
    3c4c:	4798      	blx	r3
    3c4e:	e7c6      	b.n	3bde <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3c50:	69c3      	ldr	r3, [r0, #28]
    3c52:	4798      	blx	r3
    3c54:	e7d2      	b.n	3bfc <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3c56:	6a03      	ldr	r3, [r0, #32]
    3c58:	4798      	blx	r3
    3c5a:	e7df      	b.n	3c1c <USB_Handler+0x2d8>
    3c5c:	20000460 	.word	0x20000460
    3c60:	0000a754 	.word	0x0000a754
    3c64:	0000567d 	.word	0x0000567d
    3c68:	20000470 	.word	0x20000470
    3c6c:	20000474 	.word	0x20000474
    3c70:	200056b0 	.word	0x200056b0
    3c74:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3c78:	0023      	movs	r3, r4
    3c7a:	332e      	adds	r3, #46	; 0x2e
    3c7c:	009b      	lsls	r3, r3, #2
    3c7e:	4642      	mov	r2, r8
    3c80:	6812      	ldr	r2, [r2, #0]
    3c82:	589b      	ldr	r3, [r3, r2]
    3c84:	499e      	ldr	r1, [pc, #632]	; (3f00 <USB_Handler+0x5bc>)
    3c86:	4642      	mov	r2, r8
    3c88:	6810      	ldr	r0, [r2, #0]
    3c8a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3c8c:	3401      	adds	r4, #1
    3c8e:	2c07      	cmp	r4, #7
    3c90:	d0c4      	beq.n	3c1c <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    3c92:	0063      	lsls	r3, r4, #1
    3c94:	5bdb      	ldrh	r3, [r3, r7]
    3c96:	4233      	tst	r3, r6
    3c98:	d003      	beq.n	3ca2 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3c9a:	464a      	mov	r2, r9
    3c9c:	6812      	ldr	r2, [r2, #0]
    3c9e:	6812      	ldr	r2, [r2, #0]
    3ca0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    3ca2:	422b      	tst	r3, r5
    3ca4:	d0f2      	beq.n	3c8c <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3ca6:	2c06      	cmp	r4, #6
    3ca8:	d1e6      	bne.n	3c78 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3caa:	4b96      	ldr	r3, [pc, #600]	; (3f04 <USB_Handler+0x5c0>)
    3cac:	891b      	ldrh	r3, [r3, #8]
    3cae:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3cb0:	2280      	movs	r2, #128	; 0x80
    3cb2:	0052      	lsls	r2, r2, #1
    3cb4:	4013      	ands	r3, r2
    3cb6:	4a92      	ldr	r2, [pc, #584]	; (3f00 <USB_Handler+0x5bc>)
    3cb8:	6013      	str	r3, [r2, #0]
    3cba:	e7dd      	b.n	3c78 <USB_Handler+0x334>
    3cbc:	003c      	movs	r4, r7
    3cbe:	3459      	adds	r4, #89	; 0x59
    3cc0:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    3cc2:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    3cc4:	2201      	movs	r2, #1
    3cc6:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3cc8:	325f      	adds	r2, #95	; 0x5f
    3cca:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3ccc:	3a50      	subs	r2, #80	; 0x50
    3cce:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3cd0:	3a0d      	subs	r2, #13
    3cd2:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3cd4:	46b8      	mov	r8, r7
    3cd6:	002f      	movs	r7, r5
    3cd8:	e0b9      	b.n	3e4e <USB_Handler+0x50a>
    3cda:	002a      	movs	r2, r5
    3cdc:	003d      	movs	r5, r7
    3cde:	4647      	mov	r7, r8
    3ce0:	4690      	mov	r8, r2
    3ce2:	015b      	lsls	r3, r3, #5
    3ce4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3ce6:	2308      	movs	r3, #8
    3ce8:	33ff      	adds	r3, #255	; 0xff
    3cea:	5ceb      	ldrb	r3, [r5, r3]
    3cec:	065b      	lsls	r3, r3, #25
    3cee:	d516      	bpl.n	3d1e <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3cf0:	2240      	movs	r2, #64	; 0x40
    3cf2:	2308      	movs	r3, #8
    3cf4:	33ff      	adds	r3, #255	; 0xff
    3cf6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3cf8:	3b88      	subs	r3, #136	; 0x88
    3cfa:	3bff      	subs	r3, #255	; 0xff
    3cfc:	4642      	mov	r2, r8
    3cfe:	4313      	orrs	r3, r2
    3d00:	4a81      	ldr	r2, [pc, #516]	; (3f08 <USB_Handler+0x5c4>)
    3d02:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3d04:	2360      	movs	r3, #96	; 0x60
    3d06:	420b      	tst	r3, r1
    3d08:	d100      	bne.n	3d0c <USB_Handler+0x3c8>
    3d0a:	e787      	b.n	3c1c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3d0c:	9b01      	ldr	r3, [sp, #4]
    3d0e:	011b      	lsls	r3, r3, #4
    3d10:	18fb      	adds	r3, r7, r3
    3d12:	33e0      	adds	r3, #224	; 0xe0
    3d14:	681b      	ldr	r3, [r3, #0]
    3d16:	497c      	ldr	r1, [pc, #496]	; (3f08 <USB_Handler+0x5c4>)
    3d18:	0038      	movs	r0, r7
    3d1a:	4798      	blx	r3
    3d1c:	e77e      	b.n	3c1c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3d1e:	2308      	movs	r3, #8
    3d20:	33ff      	adds	r3, #255	; 0xff
    3d22:	5ceb      	ldrb	r3, [r5, r3]
    3d24:	069b      	lsls	r3, r3, #26
    3d26:	d5ed      	bpl.n	3d04 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3d28:	2220      	movs	r2, #32
    3d2a:	2308      	movs	r3, #8
    3d2c:	33ff      	adds	r3, #255	; 0xff
    3d2e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3d30:	4b75      	ldr	r3, [pc, #468]	; (3f08 <USB_Handler+0x5c4>)
    3d32:	4642      	mov	r2, r8
    3d34:	719a      	strb	r2, [r3, #6]
    3d36:	e7e5      	b.n	3d04 <USB_Handler+0x3c0>
    3d38:	003d      	movs	r5, r7
    3d3a:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3d3c:	9a01      	ldr	r2, [sp, #4]
    3d3e:	0013      	movs	r3, r2
    3d40:	3308      	adds	r3, #8
    3d42:	015b      	lsls	r3, r3, #5
    3d44:	18ed      	adds	r5, r5, r3
    3d46:	2310      	movs	r3, #16
    3d48:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3d4a:	18bb      	adds	r3, r7, r2
    3d4c:	3361      	adds	r3, #97	; 0x61
    3d4e:	33ff      	adds	r3, #255	; 0xff
    3d50:	781b      	ldrb	r3, [r3, #0]
    3d52:	06db      	lsls	r3, r3, #27
    3d54:	d400      	bmi.n	3d58 <USB_Handler+0x414>
    3d56:	e761      	b.n	3c1c <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3d58:	0010      	movs	r0, r2
    3d5a:	0152      	lsls	r2, r2, #5
    3d5c:	4b69      	ldr	r3, [pc, #420]	; (3f04 <USB_Handler+0x5c0>)
    3d5e:	189b      	adds	r3, r3, r2
    3d60:	685b      	ldr	r3, [r3, #4]
    3d62:	049b      	lsls	r3, r3, #18
    3d64:	0c9b      	lsrs	r3, r3, #18
    3d66:	4968      	ldr	r1, [pc, #416]	; (3f08 <USB_Handler+0x5c4>)
    3d68:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3d6a:	0103      	lsls	r3, r0, #4
    3d6c:	18fb      	adds	r3, r7, r3
    3d6e:	33dc      	adds	r3, #220	; 0xdc
    3d70:	681b      	ldr	r3, [r3, #0]
    3d72:	4640      	mov	r0, r8
    3d74:	4798      	blx	r3
    3d76:	e751      	b.n	3c1c <USB_Handler+0x2d8>
    3d78:	002a      	movs	r2, r5
    3d7a:	003d      	movs	r5, r7
    3d7c:	4647      	mov	r7, r8
    3d7e:	4690      	mov	r8, r2
    3d80:	015b      	lsls	r3, r3, #5
    3d82:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3d84:	2308      	movs	r3, #8
    3d86:	33ff      	adds	r3, #255	; 0xff
    3d88:	5ceb      	ldrb	r3, [r5, r3]
    3d8a:	079b      	lsls	r3, r3, #30
    3d8c:	d51e      	bpl.n	3dcc <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3d8e:	2202      	movs	r2, #2
    3d90:	2308      	movs	r3, #8
    3d92:	33ff      	adds	r3, #255	; 0xff
    3d94:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3d96:	485c      	ldr	r0, [pc, #368]	; (3f08 <USB_Handler+0x5c4>)
    3d98:	3b88      	subs	r3, #136	; 0x88
    3d9a:	3bff      	subs	r3, #255	; 0xff
    3d9c:	4642      	mov	r2, r8
    3d9e:	4313      	orrs	r3, r2
    3da0:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3da2:	9b01      	ldr	r3, [sp, #4]
    3da4:	015a      	lsls	r2, r3, #5
    3da6:	4b57      	ldr	r3, [pc, #348]	; (3f04 <USB_Handler+0x5c0>)
    3da8:	189b      	adds	r3, r3, r2
    3daa:	3310      	adds	r3, #16
    3dac:	685b      	ldr	r3, [r3, #4]
    3dae:	049b      	lsls	r3, r3, #18
    3db0:	0c9b      	lsrs	r3, r3, #18
    3db2:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3db4:	078b      	lsls	r3, r1, #30
    3db6:	d100      	bne.n	3dba <USB_Handler+0x476>
    3db8:	e730      	b.n	3c1c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3dba:	9b01      	ldr	r3, [sp, #4]
    3dbc:	330d      	adds	r3, #13
    3dbe:	011b      	lsls	r3, r3, #4
    3dc0:	18fb      	adds	r3, r7, r3
    3dc2:	685b      	ldr	r3, [r3, #4]
    3dc4:	4950      	ldr	r1, [pc, #320]	; (3f08 <USB_Handler+0x5c4>)
    3dc6:	0038      	movs	r0, r7
    3dc8:	4798      	blx	r3
    3dca:	e727      	b.n	3c1c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3dcc:	2308      	movs	r3, #8
    3dce:	33ff      	adds	r3, #255	; 0xff
    3dd0:	5ceb      	ldrb	r3, [r5, r3]
    3dd2:	07db      	lsls	r3, r3, #31
    3dd4:	d5ee      	bpl.n	3db4 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3dd6:	2201      	movs	r2, #1
    3dd8:	2308      	movs	r3, #8
    3dda:	33ff      	adds	r3, #255	; 0xff
    3ddc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3dde:	484a      	ldr	r0, [pc, #296]	; (3f08 <USB_Handler+0x5c4>)
    3de0:	4643      	mov	r3, r8
    3de2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3de4:	9b01      	ldr	r3, [sp, #4]
    3de6:	015b      	lsls	r3, r3, #5
    3de8:	4a46      	ldr	r2, [pc, #280]	; (3f04 <USB_Handler+0x5c0>)
    3dea:	18d2      	adds	r2, r2, r3
    3dec:	6853      	ldr	r3, [r2, #4]
    3dee:	049b      	lsls	r3, r3, #18
    3df0:	0c9b      	lsrs	r3, r3, #18
    3df2:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3df4:	6853      	ldr	r3, [r2, #4]
    3df6:	011b      	lsls	r3, r3, #4
    3df8:	0c9b      	lsrs	r3, r3, #18
    3dfa:	8083      	strh	r3, [r0, #4]
    3dfc:	e7da      	b.n	3db4 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3dfe:	2208      	movs	r2, #8
    3e00:	32ff      	adds	r2, #255	; 0xff
    3e02:	5c9a      	ldrb	r2, [r3, r2]
    3e04:	0752      	lsls	r2, r2, #29
    3e06:	d56e      	bpl.n	3ee6 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3e08:	2004      	movs	r0, #4
    3e0a:	2208      	movs	r2, #8
    3e0c:	32ff      	adds	r2, #255	; 0xff
    3e0e:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3e10:	9801      	ldr	r0, [sp, #4]
    3e12:	0142      	lsls	r2, r0, #5
    3e14:	4b3b      	ldr	r3, [pc, #236]	; (3f04 <USB_Handler+0x5c0>)
    3e16:	189b      	adds	r3, r3, r2
    3e18:	7a9b      	ldrb	r3, [r3, #10]
    3e1a:	079b      	lsls	r3, r3, #30
    3e1c:	d505      	bpl.n	3e2a <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3e1e:	4b39      	ldr	r3, [pc, #228]	; (3f04 <USB_Handler+0x5c0>)
    3e20:	189b      	adds	r3, r3, r2
    3e22:	7a9a      	ldrb	r2, [r3, #10]
    3e24:	2002      	movs	r0, #2
    3e26:	4382      	bics	r2, r0
    3e28:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3e2a:	4b37      	ldr	r3, [pc, #220]	; (3f08 <USB_Handler+0x5c4>)
    3e2c:	4642      	mov	r2, r8
    3e2e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3e30:	9b01      	ldr	r3, [sp, #4]
    3e32:	3308      	adds	r3, #8
    3e34:	015b      	lsls	r3, r3, #5
    3e36:	683a      	ldr	r2, [r7, #0]
    3e38:	4694      	mov	ip, r2
    3e3a:	4463      	add	r3, ip
    3e3c:	79db      	ldrb	r3, [r3, #7]
    3e3e:	07db      	lsls	r3, r3, #31
    3e40:	d551      	bpl.n	3ee6 <USB_Handler+0x5a2>
    3e42:	e6eb      	b.n	3c1c <USB_Handler+0x2d8>
    3e44:	3301      	adds	r3, #1
    3e46:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3e48:	2b08      	cmp	r3, #8
    3e4a:	d100      	bne.n	3e4e <USB_Handler+0x50a>
    3e4c:	e6e6      	b.n	3c1c <USB_Handler+0x2d8>
    3e4e:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3e50:	9301      	str	r3, [sp, #4]
    3e52:	0032      	movs	r2, r6
    3e54:	411a      	asrs	r2, r3
    3e56:	4661      	mov	r1, ip
    3e58:	4211      	tst	r1, r2
    3e5a:	d0f3      	beq.n	3e44 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3e5c:	001a      	movs	r2, r3
    3e5e:	3208      	adds	r2, #8
    3e60:	0152      	lsls	r2, r2, #5
    3e62:	18ba      	adds	r2, r7, r2
    3e64:	79d2      	ldrb	r2, [r2, #7]
    3e66:	b2d2      	uxtb	r2, r2
    3e68:	7a21      	ldrb	r1, [r4, #8]
    3e6a:	4011      	ands	r1, r2
    3e6c:	7820      	ldrb	r0, [r4, #0]
    3e6e:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3e70:	4648      	mov	r0, r9
    3e72:	4210      	tst	r0, r2
    3e74:	d000      	beq.n	3e78 <USB_Handler+0x534>
    3e76:	e730      	b.n	3cda <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3e78:	4650      	mov	r0, sl
    3e7a:	4210      	tst	r0, r2
    3e7c:	d000      	beq.n	3e80 <USB_Handler+0x53c>
    3e7e:	e75b      	b.n	3d38 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3e80:	4658      	mov	r0, fp
    3e82:	4210      	tst	r0, r2
    3e84:	d000      	beq.n	3e88 <USB_Handler+0x544>
    3e86:	e777      	b.n	3d78 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3e88:	200c      	movs	r0, #12
    3e8a:	4210      	tst	r0, r2
    3e8c:	d0da      	beq.n	3e44 <USB_Handler+0x500>
    3e8e:	002a      	movs	r2, r5
    3e90:	003d      	movs	r5, r7
    3e92:	4647      	mov	r7, r8
    3e94:	4690      	mov	r8, r2
    3e96:	015b      	lsls	r3, r3, #5
    3e98:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3e9a:	2208      	movs	r2, #8
    3e9c:	32ff      	adds	r2, #255	; 0xff
    3e9e:	5c9a      	ldrb	r2, [r3, r2]
    3ea0:	0712      	lsls	r2, r2, #28
    3ea2:	d5ac      	bpl.n	3dfe <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3ea4:	3804      	subs	r0, #4
    3ea6:	2208      	movs	r2, #8
    3ea8:	32ff      	adds	r2, #255	; 0xff
    3eaa:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3eac:	9801      	ldr	r0, [sp, #4]
    3eae:	0142      	lsls	r2, r0, #5
    3eb0:	4b14      	ldr	r3, [pc, #80]	; (3f04 <USB_Handler+0x5c0>)
    3eb2:	189b      	adds	r3, r3, r2
    3eb4:	7e9b      	ldrb	r3, [r3, #26]
    3eb6:	079b      	lsls	r3, r3, #30
    3eb8:	d505      	bpl.n	3ec6 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3eba:	4b12      	ldr	r3, [pc, #72]	; (3f04 <USB_Handler+0x5c0>)
    3ebc:	189b      	adds	r3, r3, r2
    3ebe:	7e9a      	ldrb	r2, [r3, #26]
    3ec0:	2002      	movs	r0, #2
    3ec2:	4382      	bics	r2, r0
    3ec4:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3ec6:	2380      	movs	r3, #128	; 0x80
    3ec8:	425b      	negs	r3, r3
    3eca:	4642      	mov	r2, r8
    3ecc:	4313      	orrs	r3, r2
    3ece:	4a0e      	ldr	r2, [pc, #56]	; (3f08 <USB_Handler+0x5c4>)
    3ed0:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3ed2:	9b01      	ldr	r3, [sp, #4]
    3ed4:	3308      	adds	r3, #8
    3ed6:	015b      	lsls	r3, r3, #5
    3ed8:	683a      	ldr	r2, [r7, #0]
    3eda:	4694      	mov	ip, r2
    3edc:	4463      	add	r3, ip
    3ede:	79db      	ldrb	r3, [r3, #7]
    3ee0:	079b      	lsls	r3, r3, #30
    3ee2:	d500      	bpl.n	3ee6 <USB_Handler+0x5a2>
    3ee4:	e69a      	b.n	3c1c <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3ee6:	230c      	movs	r3, #12
    3ee8:	420b      	tst	r3, r1
    3eea:	d100      	bne.n	3eee <USB_Handler+0x5aa>
    3eec:	e696      	b.n	3c1c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3eee:	9b01      	ldr	r3, [sp, #4]
    3ef0:	011b      	lsls	r3, r3, #4
    3ef2:	18fb      	adds	r3, r7, r3
    3ef4:	33d8      	adds	r3, #216	; 0xd8
    3ef6:	681b      	ldr	r3, [r3, #0]
    3ef8:	4903      	ldr	r1, [pc, #12]	; (3f08 <USB_Handler+0x5c4>)
    3efa:	0038      	movs	r0, r7
    3efc:	4798      	blx	r3
    3efe:	e68d      	b.n	3c1c <USB_Handler+0x2d8>
    3f00:	20000464 	.word	0x20000464
    3f04:	200056b0 	.word	0x200056b0
    3f08:	20000468 	.word	0x20000468

00003f0c <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3f0c:	2200      	movs	r2, #0
    3f0e:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    3f10:	2301      	movs	r3, #1
    3f12:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    3f14:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    3f16:	70c3      	strb	r3, [r0, #3]
}
    3f18:	4770      	bx	lr
	...

00003f1c <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1e:	46ce      	mov	lr, r9
    3f20:	4647      	mov	r7, r8
    3f22:	b580      	push	{r7, lr}
    3f24:	b083      	sub	sp, #12
    3f26:	0004      	movs	r4, r0
    3f28:	000d      	movs	r5, r1
    3f2a:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    3f2c:	2300      	movs	r3, #0
    3f2e:	4a6e      	ldr	r2, [pc, #440]	; (40e8 <usb_init+0x1cc>)
    3f30:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    3f32:	4a6e      	ldr	r2, [pc, #440]	; (40ec <usb_init+0x1d0>)
    3f34:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3f36:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    3f38:	496d      	ldr	r1, [pc, #436]	; (40f0 <usb_init+0x1d4>)
    3f3a:	69ca      	ldr	r2, [r1, #28]
    3f3c:	2020      	movs	r0, #32
    3f3e:	4302      	orrs	r2, r0
    3f40:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3f42:	af01      	add	r7, sp, #4
    3f44:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3f46:	2201      	movs	r2, #1
    3f48:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    3f4a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    3f4c:	3306      	adds	r3, #6
    3f4e:	4699      	mov	r9, r3
    3f50:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3f52:	0039      	movs	r1, r7
    3f54:	3808      	subs	r0, #8
    3f56:	4b67      	ldr	r3, [pc, #412]	; (40f4 <usb_init+0x1d8>)
    3f58:	4698      	mov	r8, r3
    3f5a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3f5c:	464b      	mov	r3, r9
    3f5e:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3f60:	0039      	movs	r1, r7
    3f62:	2019      	movs	r0, #25
    3f64:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    3f66:	78b3      	ldrb	r3, [r6, #2]
    3f68:	466a      	mov	r2, sp
    3f6a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3f6c:	4669      	mov	r1, sp
    3f6e:	2006      	movs	r0, #6
    3f70:	4b61      	ldr	r3, [pc, #388]	; (40f8 <usb_init+0x1dc>)
    3f72:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    3f74:	2006      	movs	r0, #6
    3f76:	4b61      	ldr	r3, [pc, #388]	; (40fc <usb_init+0x1e0>)
    3f78:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    3f7a:	782b      	ldrb	r3, [r5, #0]
    3f7c:	2201      	movs	r2, #1
    3f7e:	4313      	orrs	r3, r2
    3f80:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    3f82:	78ab      	ldrb	r3, [r5, #2]
    3f84:	07db      	lsls	r3, r3, #31
    3f86:	d4fc      	bmi.n	3f82 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3f88:	4a5d      	ldr	r2, [pc, #372]	; (4100 <usb_init+0x1e4>)
    3f8a:	78d3      	ldrb	r3, [r2, #3]
    3f8c:	2103      	movs	r1, #3
    3f8e:	438b      	bics	r3, r1
    3f90:	2102      	movs	r1, #2
    3f92:	430b      	orrs	r3, r1
    3f94:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3f96:	78d3      	ldrb	r3, [r2, #3]
    3f98:	210c      	movs	r1, #12
    3f9a:	438b      	bics	r3, r1
    3f9c:	2108      	movs	r1, #8
    3f9e:	430b      	orrs	r3, r1
    3fa0:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    3fa2:	4b58      	ldr	r3, [pc, #352]	; (4104 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    3fa4:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    3fa6:	039b      	lsls	r3, r3, #14
    3fa8:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    3faa:	2b1f      	cmp	r3, #31
    3fac:	d100      	bne.n	3fb0 <usb_init+0x94>
    3fae:	e08f      	b.n	40d0 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    3fb0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3fb2:	019b      	lsls	r3, r3, #6
    3fb4:	4954      	ldr	r1, [pc, #336]	; (4108 <usb_init+0x1ec>)
    3fb6:	400a      	ands	r2, r1
    3fb8:	4313      	orrs	r3, r2
    3fba:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3fbc:	4b51      	ldr	r3, [pc, #324]	; (4104 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3fc2:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    3fc4:	2b1f      	cmp	r3, #31
    3fc6:	d100      	bne.n	3fca <usb_init+0xae>
    3fc8:	e084      	b.n	40d4 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    3fca:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3fcc:	211f      	movs	r1, #31
    3fce:	438a      	bics	r2, r1
    3fd0:	4313      	orrs	r3, r2
    3fd2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3fd4:	4b4b      	ldr	r3, [pc, #300]	; (4104 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    3fd6:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3fd8:	019b      	lsls	r3, r3, #6
    3fda:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    3fdc:	2b07      	cmp	r3, #7
    3fde:	d100      	bne.n	3fe2 <usb_init+0xc6>
    3fe0:	e07a      	b.n	40d8 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    3fe2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3fe4:	031b      	lsls	r3, r3, #12
    3fe6:	4949      	ldr	r1, [pc, #292]	; (410c <usb_init+0x1f0>)
    3fe8:	400a      	ands	r2, r1
    3fea:	4313      	orrs	r3, r2
    3fec:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    3fee:	7832      	ldrb	r2, [r6, #0]
    3ff0:	7829      	ldrb	r1, [r5, #0]
    3ff2:	01d2      	lsls	r2, r2, #7
    3ff4:	237f      	movs	r3, #127	; 0x7f
    3ff6:	400b      	ands	r3, r1
    3ff8:	4313      	orrs	r3, r2
    3ffa:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    3ffc:	7871      	ldrb	r1, [r6, #1]
    3ffe:	782b      	ldrb	r3, [r5, #0]
    4000:	2201      	movs	r2, #1
    4002:	400a      	ands	r2, r1
    4004:	0092      	lsls	r2, r2, #2
    4006:	2104      	movs	r1, #4
    4008:	438b      	bics	r3, r1
    400a:	4313      	orrs	r3, r2
    400c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    400e:	4b40      	ldr	r3, [pc, #256]	; (4110 <usb_init+0x1f4>)
    4010:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4012:	78f3      	ldrb	r3, [r6, #3]
    4014:	2b01      	cmp	r3, #1
    4016:	d061      	beq.n	40dc <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4018:	2b00      	cmp	r3, #0
    401a:	d106      	bne.n	402a <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    401c:	6822      	ldr	r2, [r4, #0]
    401e:	8913      	ldrh	r3, [r2, #8]
    4020:	210c      	movs	r1, #12
    4022:	438b      	bics	r3, r1
    4024:	2104      	movs	r1, #4
    4026:	430b      	orrs	r3, r1
    4028:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    402a:	2280      	movs	r2, #128	; 0x80
    402c:	0052      	lsls	r2, r2, #1
    402e:	2100      	movs	r1, #0
    4030:	4837      	ldr	r0, [pc, #220]	; (4110 <usb_init+0x1f4>)
    4032:	4b38      	ldr	r3, [pc, #224]	; (4114 <usb_init+0x1f8>)
    4034:	4798      	blx	r3
    4036:	1d23      	adds	r3, r4, #4
    4038:	0021      	movs	r1, r4
    403a:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    403c:	2200      	movs	r2, #0
    403e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4040:	428b      	cmp	r3, r1
    4042:	d1fc      	bne.n	403e <usb_init+0x122>
    4044:	0021      	movs	r1, r4
    4046:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4048:	2200      	movs	r2, #0
    404a:	601a      	str	r2, [r3, #0]
    404c:	605a      	str	r2, [r3, #4]
    404e:	609a      	str	r2, [r3, #8]
    4050:	60da      	str	r2, [r3, #12]
    4052:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4054:	428b      	cmp	r3, r1
    4056:	d1f8      	bne.n	404a <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4058:	2300      	movs	r3, #0
    405a:	22a4      	movs	r2, #164	; 0xa4
    405c:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    405e:	3201      	adds	r2, #1
    4060:	54a3      	strb	r3, [r4, r2]
    4062:	0023      	movs	r3, r4
    4064:	33a6      	adds	r3, #166	; 0xa6
    4066:	0021      	movs	r1, r4
    4068:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    406a:	2200      	movs	r2, #0
    406c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    406e:	721a      	strb	r2, [r3, #8]
    4070:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4072:	4299      	cmp	r1, r3
    4074:	d1fa      	bne.n	406c <usb_init+0x150>
    4076:	0023      	movs	r3, r4
    4078:	33b8      	adds	r3, #184	; 0xb8
    407a:	0021      	movs	r1, r4
    407c:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    407e:	2200      	movs	r2, #0
    4080:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4082:	428b      	cmp	r3, r1
    4084:	d1fc      	bne.n	4080 <usb_init+0x164>
    4086:	0021      	movs	r1, r4
    4088:	3155      	adds	r1, #85	; 0x55
    408a:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    408c:	2200      	movs	r2, #0
    408e:	601a      	str	r2, [r3, #0]
    4090:	605a      	str	r2, [r3, #4]
    4092:	609a      	str	r2, [r3, #8]
    4094:	60da      	str	r2, [r3, #12]
    4096:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4098:	428b      	cmp	r3, r1
    409a:	d1f8      	bne.n	408e <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    409c:	2300      	movs	r3, #0
    409e:	22aa      	movs	r2, #170	; 0xaa
    40a0:	0052      	lsls	r2, r2, #1
    40a2:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    40a4:	3202      	adds	r2, #2
    40a6:	52a3      	strh	r3, [r4, r2]
    40a8:	0023      	movs	r3, r4
    40aa:	3359      	adds	r3, #89	; 0x59
    40ac:	33ff      	adds	r3, #255	; 0xff
    40ae:	3461      	adds	r4, #97	; 0x61
    40b0:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    40b2:	2200      	movs	r2, #0
    40b4:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    40b6:	721a      	strb	r2, [r3, #8]
    40b8:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    40ba:	42a3      	cmp	r3, r4
    40bc:	d1fa      	bne.n	40b4 <usb_init+0x198>
    40be:	2280      	movs	r2, #128	; 0x80
    40c0:	4b15      	ldr	r3, [pc, #84]	; (4118 <usb_init+0x1fc>)
    40c2:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    40c4:	2000      	movs	r0, #0
    40c6:	b003      	add	sp, #12
    40c8:	bc0c      	pop	{r2, r3}
    40ca:	4690      	mov	r8, r2
    40cc:	4699      	mov	r9, r3
    40ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    40d0:	3b1a      	subs	r3, #26
    40d2:	e76d      	b.n	3fb0 <usb_init+0x94>
		pad_transp = 29;
    40d4:	3b02      	subs	r3, #2
    40d6:	e778      	b.n	3fca <usb_init+0xae>
		pad_trim = 3;
    40d8:	3b04      	subs	r3, #4
    40da:	e782      	b.n	3fe2 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    40dc:	6822      	ldr	r2, [r4, #0]
    40de:	8913      	ldrh	r3, [r2, #8]
    40e0:	3108      	adds	r1, #8
    40e2:	438b      	bics	r3, r1
    40e4:	8113      	strh	r3, [r2, #8]
    40e6:	e7a0      	b.n	402a <usb_init+0x10e>
    40e8:	20000470 	.word	0x20000470
    40ec:	20000460 	.word	0x20000460
    40f0:	40000400 	.word	0x40000400
    40f4:	000049e5 	.word	0x000049e5
    40f8:	000048ed 	.word	0x000048ed
    40fc:	00004861 	.word	0x00004861
    4100:	41005000 	.word	0x41005000
    4104:	00806024 	.word	0x00806024
    4108:	fffff83f 	.word	0xfffff83f
    410c:	ffff8fff 	.word	0xffff8fff
    4110:	200056b0 	.word	0x200056b0
    4114:	000072c3 	.word	0x000072c3
    4118:	e000e100 	.word	0xe000e100

0000411c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    411c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    411e:	2a00      	cmp	r2, #0
    4120:	d001      	beq.n	4126 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4122:	0018      	movs	r0, r3
    4124:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4126:	008b      	lsls	r3, r1, #2
    4128:	4a06      	ldr	r2, [pc, #24]	; (4144 <extint_register_callback+0x28>)
    412a:	589b      	ldr	r3, [r3, r2]
    412c:	2b00      	cmp	r3, #0
    412e:	d003      	beq.n	4138 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4130:	4283      	cmp	r3, r0
    4132:	d005      	beq.n	4140 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4134:	231d      	movs	r3, #29
    4136:	e7f4      	b.n	4122 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4138:	0089      	lsls	r1, r1, #2
    413a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    413c:	2300      	movs	r3, #0
    413e:	e7f0      	b.n	4122 <extint_register_callback+0x6>
		return STATUS_OK;
    4140:	2300      	movs	r3, #0
    4142:	e7ee      	b.n	4122 <extint_register_callback+0x6>
    4144:	20002ce0 	.word	0x20002ce0

00004148 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4148:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    414a:	2900      	cmp	r1, #0
    414c:	d001      	beq.n	4152 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    414e:	0018      	movs	r0, r3
    4150:	4770      	bx	lr
		return NULL;
    4152:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4154:	281f      	cmp	r0, #31
    4156:	d800      	bhi.n	415a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4158:	4a02      	ldr	r2, [pc, #8]	; (4164 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    415a:	2301      	movs	r3, #1
    415c:	4083      	lsls	r3, r0
    415e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4160:	2300      	movs	r3, #0
    4162:	e7f4      	b.n	414e <extint_chan_enable_callback+0x6>
    4164:	40001800 	.word	0x40001800

00004168 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4168:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    416a:	2900      	cmp	r1, #0
    416c:	d001      	beq.n	4172 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    416e:	0018      	movs	r0, r3
    4170:	4770      	bx	lr
		return NULL;
    4172:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4174:	281f      	cmp	r0, #31
    4176:	d800      	bhi.n	417a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4178:	4a02      	ldr	r2, [pc, #8]	; (4184 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    417a:	2301      	movs	r3, #1
    417c:	4083      	lsls	r3, r0
    417e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4180:	2300      	movs	r3, #0
    4182:	e7f4      	b.n	416e <extint_chan_disable_callback+0x6>
    4184:	40001800 	.word	0x40001800

00004188 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4188:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    418a:	2200      	movs	r2, #0
    418c:	4b10      	ldr	r3, [pc, #64]	; (41d0 <EIC_Handler+0x48>)
    418e:	701a      	strb	r2, [r3, #0]
    4190:	2300      	movs	r3, #0
    4192:	4910      	ldr	r1, [pc, #64]	; (41d4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4194:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4196:	4e10      	ldr	r6, [pc, #64]	; (41d8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4198:	4c0d      	ldr	r4, [pc, #52]	; (41d0 <EIC_Handler+0x48>)
    419a:	e00a      	b.n	41b2 <EIC_Handler+0x2a>
		return eics[eic_index];
    419c:	490d      	ldr	r1, [pc, #52]	; (41d4 <EIC_Handler+0x4c>)
    419e:	e008      	b.n	41b2 <EIC_Handler+0x2a>
    41a0:	7823      	ldrb	r3, [r4, #0]
    41a2:	3301      	adds	r3, #1
    41a4:	b2db      	uxtb	r3, r3
    41a6:	7023      	strb	r3, [r4, #0]
    41a8:	2b0f      	cmp	r3, #15
    41aa:	d810      	bhi.n	41ce <EIC_Handler+0x46>
		return NULL;
    41ac:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    41ae:	2b1f      	cmp	r3, #31
    41b0:	d9f4      	bls.n	419c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    41b2:	0028      	movs	r0, r5
    41b4:	4018      	ands	r0, r3
    41b6:	2201      	movs	r2, #1
    41b8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    41ba:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    41bc:	4210      	tst	r0, r2
    41be:	d0ef      	beq.n	41a0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    41c0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    41c2:	009b      	lsls	r3, r3, #2
    41c4:	599b      	ldr	r3, [r3, r6]
    41c6:	2b00      	cmp	r3, #0
    41c8:	d0ea      	beq.n	41a0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    41ca:	4798      	blx	r3
    41cc:	e7e8      	b.n	41a0 <EIC_Handler+0x18>
			}
		}
	}
}
    41ce:	bd70      	pop	{r4, r5, r6, pc}
    41d0:	200057b0 	.word	0x200057b0
    41d4:	40001800 	.word	0x40001800
    41d8:	20002ce0 	.word	0x20002ce0

000041dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    41dc:	b500      	push	{lr}
    41de:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    41e0:	ab01      	add	r3, sp, #4
    41e2:	2280      	movs	r2, #128	; 0x80
    41e4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    41e6:	780a      	ldrb	r2, [r1, #0]
    41e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    41ea:	784a      	ldrb	r2, [r1, #1]
    41ec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    41ee:	788a      	ldrb	r2, [r1, #2]
    41f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    41f2:	0019      	movs	r1, r3
    41f4:	4b01      	ldr	r3, [pc, #4]	; (41fc <port_pin_set_config+0x20>)
    41f6:	4798      	blx	r3
}
    41f8:	b003      	add	sp, #12
    41fa:	bd00      	pop	{pc}
    41fc:	000049e5 	.word	0x000049e5

00004200 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4200:	4770      	bx	lr
	...

00004204 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4204:	4b0c      	ldr	r3, [pc, #48]	; (4238 <cpu_irq_enter_critical+0x34>)
    4206:	681b      	ldr	r3, [r3, #0]
    4208:	2b00      	cmp	r3, #0
    420a:	d106      	bne.n	421a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    420c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4210:	2b00      	cmp	r3, #0
    4212:	d007      	beq.n	4224 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4214:	2200      	movs	r2, #0
    4216:	4b09      	ldr	r3, [pc, #36]	; (423c <cpu_irq_enter_critical+0x38>)
    4218:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    421a:	4a07      	ldr	r2, [pc, #28]	; (4238 <cpu_irq_enter_critical+0x34>)
    421c:	6813      	ldr	r3, [r2, #0]
    421e:	3301      	adds	r3, #1
    4220:	6013      	str	r3, [r2, #0]
}
    4222:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4224:	b672      	cpsid	i
  __ASM volatile ("dmb");
    4226:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    422a:	2200      	movs	r2, #0
    422c:	4b04      	ldr	r3, [pc, #16]	; (4240 <cpu_irq_enter_critical+0x3c>)
    422e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4230:	3201      	adds	r2, #1
    4232:	4b02      	ldr	r3, [pc, #8]	; (423c <cpu_irq_enter_critical+0x38>)
    4234:	701a      	strb	r2, [r3, #0]
    4236:	e7f0      	b.n	421a <cpu_irq_enter_critical+0x16>
    4238:	2000047c 	.word	0x2000047c
    423c:	20000480 	.word	0x20000480
    4240:	200000d4 	.word	0x200000d4

00004244 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4244:	4b08      	ldr	r3, [pc, #32]	; (4268 <cpu_irq_leave_critical+0x24>)
    4246:	681a      	ldr	r2, [r3, #0]
    4248:	3a01      	subs	r2, #1
    424a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    424c:	681b      	ldr	r3, [r3, #0]
    424e:	2b00      	cmp	r3, #0
    4250:	d109      	bne.n	4266 <cpu_irq_leave_critical+0x22>
    4252:	4b06      	ldr	r3, [pc, #24]	; (426c <cpu_irq_leave_critical+0x28>)
    4254:	781b      	ldrb	r3, [r3, #0]
    4256:	2b00      	cmp	r3, #0
    4258:	d005      	beq.n	4266 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    425a:	2201      	movs	r2, #1
    425c:	4b04      	ldr	r3, [pc, #16]	; (4270 <cpu_irq_leave_critical+0x2c>)
    425e:	701a      	strb	r2, [r3, #0]
    4260:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4264:	b662      	cpsie	i
	}
}
    4266:	4770      	bx	lr
    4268:	2000047c 	.word	0x2000047c
    426c:	20000480 	.word	0x20000480
    4270:	200000d4 	.word	0x200000d4

00004274 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4274:	b510      	push	{r4, lr}
	switch (clock_source) {
    4276:	2808      	cmp	r0, #8
    4278:	d803      	bhi.n	4282 <system_clock_source_get_hz+0xe>
    427a:	0080      	lsls	r0, r0, #2
    427c:	4b1e      	ldr	r3, [pc, #120]	; (42f8 <system_clock_source_get_hz+0x84>)
    427e:	581b      	ldr	r3, [r3, r0]
    4280:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4282:	2000      	movs	r0, #0
    4284:	e036      	b.n	42f4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    4286:	4b1d      	ldr	r3, [pc, #116]	; (42fc <system_clock_source_get_hz+0x88>)
    4288:	6918      	ldr	r0, [r3, #16]
    428a:	e033      	b.n	42f4 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    428c:	4b1c      	ldr	r3, [pc, #112]	; (4300 <system_clock_source_get_hz+0x8c>)
    428e:	6a1b      	ldr	r3, [r3, #32]
    4290:	059b      	lsls	r3, r3, #22
    4292:	0f9b      	lsrs	r3, r3, #30
    4294:	481b      	ldr	r0, [pc, #108]	; (4304 <system_clock_source_get_hz+0x90>)
    4296:	40d8      	lsrs	r0, r3
    4298:	e02c      	b.n	42f4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    429a:	4b18      	ldr	r3, [pc, #96]	; (42fc <system_clock_source_get_hz+0x88>)
    429c:	6958      	ldr	r0, [r3, #20]
    429e:	e029      	b.n	42f4 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    42a0:	4b16      	ldr	r3, [pc, #88]	; (42fc <system_clock_source_get_hz+0x88>)
    42a2:	681b      	ldr	r3, [r3, #0]
			return 0;
    42a4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    42a6:	079b      	lsls	r3, r3, #30
    42a8:	d524      	bpl.n	42f4 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    42aa:	4915      	ldr	r1, [pc, #84]	; (4300 <system_clock_source_get_hz+0x8c>)
    42ac:	2210      	movs	r2, #16
    42ae:	68cb      	ldr	r3, [r1, #12]
    42b0:	421a      	tst	r2, r3
    42b2:	d0fc      	beq.n	42ae <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM) return 48000000; //RAO: added 6/8/17
    42b4:	4b11      	ldr	r3, [pc, #68]	; (42fc <system_clock_source_get_hz+0x88>)
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	069b      	lsls	r3, r3, #26
    42ba:	d501      	bpl.n	42c0 <system_clock_source_get_hz+0x4c>
    42bc:	4812      	ldr	r0, [pc, #72]	; (4308 <system_clock_source_get_hz+0x94>)
    42be:	e019      	b.n	42f4 <system_clock_source_get_hz+0x80>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    42c0:	4b0e      	ldr	r3, [pc, #56]	; (42fc <system_clock_source_get_hz+0x88>)
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	075b      	lsls	r3, r3, #29
    42c6:	d401      	bmi.n	42cc <system_clock_source_get_hz+0x58>
		return 48000000UL;
    42c8:	480f      	ldr	r0, [pc, #60]	; (4308 <system_clock_source_get_hz+0x94>)
    42ca:	e013      	b.n	42f4 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) * (_system_clock_inst.dfll.mul & 0xffff);
    42cc:	2000      	movs	r0, #0
    42ce:	4b0f      	ldr	r3, [pc, #60]	; (430c <system_clock_source_get_hz+0x98>)
    42d0:	4798      	blx	r3
    42d2:	4b0a      	ldr	r3, [pc, #40]	; (42fc <system_clock_source_get_hz+0x88>)
    42d4:	689b      	ldr	r3, [r3, #8]
    42d6:	041b      	lsls	r3, r3, #16
    42d8:	0c1b      	lsrs	r3, r3, #16
    42da:	4358      	muls	r0, r3
    42dc:	e00a      	b.n	42f4 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    42de:	2350      	movs	r3, #80	; 0x50
    42e0:	4a07      	ldr	r2, [pc, #28]	; (4300 <system_clock_source_get_hz+0x8c>)
    42e2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    42e4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    42e6:	075b      	lsls	r3, r3, #29
    42e8:	d504      	bpl.n	42f4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    42ea:	4b04      	ldr	r3, [pc, #16]	; (42fc <system_clock_source_get_hz+0x88>)
    42ec:	68d8      	ldr	r0, [r3, #12]
    42ee:	e001      	b.n	42f4 <system_clock_source_get_hz+0x80>
		return 32768UL;
    42f0:	2080      	movs	r0, #128	; 0x80
    42f2:	0200      	lsls	r0, r0, #8
	}
}
    42f4:	bd10      	pop	{r4, pc}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	0000a768 	.word	0x0000a768
    42fc:	20000484 	.word	0x20000484
    4300:	40000800 	.word	0x40000800
    4304:	007a1200 	.word	0x007a1200
    4308:	02dc6c00 	.word	0x02dc6c00
    430c:	00004909 	.word	0x00004909

00004310 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4310:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4312:	490c      	ldr	r1, [pc, #48]	; (4344 <system_clock_source_osc8m_set_config+0x34>)
    4314:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4316:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4318:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    431a:	7840      	ldrb	r0, [r0, #1]
    431c:	2201      	movs	r2, #1
    431e:	4010      	ands	r0, r2
    4320:	0180      	lsls	r0, r0, #6
    4322:	2640      	movs	r6, #64	; 0x40
    4324:	43b3      	bics	r3, r6
    4326:	4303      	orrs	r3, r0
    4328:	402a      	ands	r2, r5
    432a:	01d2      	lsls	r2, r2, #7
    432c:	2080      	movs	r0, #128	; 0x80
    432e:	4383      	bics	r3, r0
    4330:	4313      	orrs	r3, r2
    4332:	2203      	movs	r2, #3
    4334:	4022      	ands	r2, r4
    4336:	0212      	lsls	r2, r2, #8
    4338:	4803      	ldr	r0, [pc, #12]	; (4348 <system_clock_source_osc8m_set_config+0x38>)
    433a:	4003      	ands	r3, r0
    433c:	4313      	orrs	r3, r2
    433e:	620b      	str	r3, [r1, #32]
}
    4340:	bd70      	pop	{r4, r5, r6, pc}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	40000800 	.word	0x40000800
    4348:	fffffcff 	.word	0xfffffcff

0000434c <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    434c:	b5f0      	push	{r4, r5, r6, r7, lr}
    434e:	0001      	movs	r1, r0
	SYSCTRL_XOSC_Type temp = SYSCTRL->XOSC;
    4350:	4b27      	ldr	r3, [pc, #156]	; (43f0 <system_clock_source_xosc_set_config+0xa4>)
    4352:	8a1b      	ldrh	r3, [r3, #16]
    4354:	055d      	lsls	r5, r3, #21
    4356:	0f6d      	lsrs	r5, r5, #29

	temp.bit.STARTUP = config->startup_time;
    4358:	7842      	ldrb	r2, [r0, #1]
    435a:	240f      	movs	r4, #15
    435c:	4014      	ands	r4, r2

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    435e:	7802      	ldrb	r2, [r0, #0]
    4360:	4257      	negs	r7, r2
    4362:	417a      	adcs	r2, r7
    4364:	b2d2      	uxtb	r2, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
    4366:	7886      	ldrb	r6, [r0, #2]

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
    4368:	2e00      	cmp	r6, #0
    436a:	d112      	bne.n	4392 <system_clock_source_xosc_set_config+0x46>
		if (config->frequency <= 2000000) {
    436c:	6840      	ldr	r0, [r0, #4]
    436e:	4f21      	ldr	r7, [pc, #132]	; (43f4 <system_clock_source_xosc_set_config+0xa8>)
    4370:	42b8      	cmp	r0, r7
    4372:	d90d      	bls.n	4390 <system_clock_source_xosc_set_config+0x44>
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
    4374:	4f20      	ldr	r7, [pc, #128]	; (43f8 <system_clock_source_xosc_set_config+0xac>)
    4376:	42b8      	cmp	r0, r7
    4378:	d933      	bls.n	43e2 <system_clock_source_xosc_set_config+0x96>
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
    437a:	4f20      	ldr	r7, [pc, #128]	; (43fc <system_clock_source_xosc_set_config+0xb0>)
    437c:	42b8      	cmp	r0, r7
    437e:	d932      	bls.n	43e6 <system_clock_source_xosc_set_config+0x9a>
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
    4380:	4f1f      	ldr	r7, [pc, #124]	; (4400 <system_clock_source_xosc_set_config+0xb4>)
    4382:	42b8      	cmp	r0, r7
    4384:	d931      	bls.n	43ea <system_clock_source_xosc_set_config+0x9e>
			temp.bit.GAIN = 3;
		} else if (config->frequency <= 32000000) {
    4386:	4f1f      	ldr	r7, [pc, #124]	; (4404 <system_clock_source_xosc_set_config+0xb8>)
    4388:	42b8      	cmp	r0, r7
    438a:	d802      	bhi.n	4392 <system_clock_source_xosc_set_config+0x46>
			temp.bit.GAIN = 4;
    438c:	2504      	movs	r5, #4
    438e:	e000      	b.n	4392 <system_clock_source_xosc_set_config+0x46>
			temp.bit.GAIN = 0;
    4390:	2500      	movs	r5, #0
		}

	}

	temp.bit.ONDEMAND = config->on_demand;
    4392:	7a48      	ldrb	r0, [r1, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4394:	7a0f      	ldrb	r7, [r1, #8]
    4396:	46bc      	mov	ip, r7

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    4398:	684f      	ldr	r7, [r1, #4]
    439a:	491b      	ldr	r1, [pc, #108]	; (4408 <system_clock_source_xosc_set_config+0xbc>)
    439c:	610f      	str	r7, [r1, #16]

	SYSCTRL->XOSC = temp;
    439e:	2101      	movs	r1, #1
    43a0:	0097      	lsls	r7, r2, #2
    43a2:	2204      	movs	r2, #4
    43a4:	4393      	bics	r3, r2
    43a6:	001a      	movs	r2, r3
    43a8:	433a      	orrs	r2, r7
    43aa:	4663      	mov	r3, ip
    43ac:	400b      	ands	r3, r1
    43ae:	019b      	lsls	r3, r3, #6
    43b0:	2740      	movs	r7, #64	; 0x40
    43b2:	43ba      	bics	r2, r7
    43b4:	431a      	orrs	r2, r3
    43b6:	4008      	ands	r0, r1
    43b8:	01c0      	lsls	r0, r0, #7
    43ba:	2380      	movs	r3, #128	; 0x80
    43bc:	439a      	bics	r2, r3
    43be:	0013      	movs	r3, r2
    43c0:	4303      	orrs	r3, r0
    43c2:	022d      	lsls	r5, r5, #8
    43c4:	4a11      	ldr	r2, [pc, #68]	; (440c <system_clock_source_xosc_set_config+0xc0>)
    43c6:	4013      	ands	r3, r2
    43c8:	432b      	orrs	r3, r5
    43ca:	4031      	ands	r1, r6
    43cc:	02c9      	lsls	r1, r1, #11
    43ce:	4a10      	ldr	r2, [pc, #64]	; (4410 <system_clock_source_xosc_set_config+0xc4>)
    43d0:	4013      	ands	r3, r2
    43d2:	430b      	orrs	r3, r1
    43d4:	0324      	lsls	r4, r4, #12
    43d6:	051b      	lsls	r3, r3, #20
    43d8:	0d1b      	lsrs	r3, r3, #20
    43da:	4323      	orrs	r3, r4
    43dc:	4a04      	ldr	r2, [pc, #16]	; (43f0 <system_clock_source_xosc_set_config+0xa4>)
    43de:	8213      	strh	r3, [r2, #16]
}
    43e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp.bit.GAIN = 1;
    43e2:	2501      	movs	r5, #1
    43e4:	e7d5      	b.n	4392 <system_clock_source_xosc_set_config+0x46>
			temp.bit.GAIN = 2;
    43e6:	2502      	movs	r5, #2
    43e8:	e7d3      	b.n	4392 <system_clock_source_xosc_set_config+0x46>
			temp.bit.GAIN = 3;
    43ea:	2503      	movs	r5, #3
    43ec:	e7d1      	b.n	4392 <system_clock_source_xosc_set_config+0x46>
    43ee:	46c0      	nop			; (mov r8, r8)
    43f0:	40000800 	.word	0x40000800
    43f4:	001e8480 	.word	0x001e8480
    43f8:	003d0900 	.word	0x003d0900
    43fc:	007a1200 	.word	0x007a1200
    4400:	00f42400 	.word	0x00f42400
    4404:	01e84800 	.word	0x01e84800
    4408:	20000484 	.word	0x20000484
    440c:	fffff8ff 	.word	0xfffff8ff
    4410:	fffff7ff 	.word	0xfffff7ff

00004414 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4414:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4416:	7a03      	ldrb	r3, [r0, #8]
    4418:	069b      	lsls	r3, r3, #26
    441a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    441c:	8942      	ldrh	r2, [r0, #10]
    441e:	0592      	lsls	r2, r2, #22
    4420:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4422:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    4424:	4918      	ldr	r1, [pc, #96]	; (4488 <system_clock_source_dfll_set_config+0x74>)
    4426:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4428:	7983      	ldrb	r3, [r0, #6]
    442a:	79c2      	ldrb	r2, [r0, #7]
    442c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    442e:	8842      	ldrh	r2, [r0, #2]
    4430:	8884      	ldrh	r4, [r0, #4]
    4432:	4322      	orrs	r2, r4
    4434:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4436:	7842      	ldrb	r2, [r0, #1]
    4438:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    443a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    443c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    443e:	7803      	ldrb	r3, [r0, #0]
    4440:	2b04      	cmp	r3, #4
    4442:	d011      	beq.n	4468 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4444:	2b20      	cmp	r3, #32
    4446:	d10e      	bne.n	4466 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4448:	7b03      	ldrb	r3, [r0, #12]
    444a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    444c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    444e:	4313      	orrs	r3, r2
    4450:	89c2      	ldrh	r2, [r0, #14]
    4452:	0412      	lsls	r2, r2, #16
    4454:	490d      	ldr	r1, [pc, #52]	; (448c <system_clock_source_dfll_set_config+0x78>)
    4456:	400a      	ands	r2, r1
    4458:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    445a:	4a0b      	ldr	r2, [pc, #44]	; (4488 <system_clock_source_dfll_set_config+0x74>)
    445c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    445e:	6811      	ldr	r1, [r2, #0]
    4460:	4b0b      	ldr	r3, [pc, #44]	; (4490 <system_clock_source_dfll_set_config+0x7c>)
    4462:	430b      	orrs	r3, r1
    4464:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4466:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4468:	7b03      	ldrb	r3, [r0, #12]
    446a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    446c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    446e:	4313      	orrs	r3, r2
    4470:	89c2      	ldrh	r2, [r0, #14]
    4472:	0412      	lsls	r2, r2, #16
    4474:	4905      	ldr	r1, [pc, #20]	; (448c <system_clock_source_dfll_set_config+0x78>)
    4476:	400a      	ands	r2, r1
    4478:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    447a:	4a03      	ldr	r2, [pc, #12]	; (4488 <system_clock_source_dfll_set_config+0x74>)
    447c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    447e:	6813      	ldr	r3, [r2, #0]
    4480:	2104      	movs	r1, #4
    4482:	430b      	orrs	r3, r1
    4484:	6013      	str	r3, [r2, #0]
    4486:	e7ee      	b.n	4466 <system_clock_source_dfll_set_config+0x52>
    4488:	20000484 	.word	0x20000484
    448c:	03ff0000 	.word	0x03ff0000
    4490:	00000424 	.word	0x00000424

00004494 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4494:	2808      	cmp	r0, #8
    4496:	d803      	bhi.n	44a0 <system_clock_source_enable+0xc>
    4498:	0080      	lsls	r0, r0, #2
    449a:	4b25      	ldr	r3, [pc, #148]	; (4530 <system_clock_source_enable+0x9c>)
    449c:	581b      	ldr	r3, [r3, r0]
    449e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    44a0:	2017      	movs	r0, #23
    44a2:	e044      	b.n	452e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    44a4:	4a23      	ldr	r2, [pc, #140]	; (4534 <system_clock_source_enable+0xa0>)
    44a6:	6a13      	ldr	r3, [r2, #32]
    44a8:	2102      	movs	r1, #2
    44aa:	430b      	orrs	r3, r1
    44ac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    44ae:	2000      	movs	r0, #0
    44b0:	e03d      	b.n	452e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    44b2:	4a20      	ldr	r2, [pc, #128]	; (4534 <system_clock_source_enable+0xa0>)
    44b4:	6993      	ldr	r3, [r2, #24]
    44b6:	2102      	movs	r1, #2
    44b8:	430b      	orrs	r3, r1
    44ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    44bc:	2000      	movs	r0, #0
		break;
    44be:	e036      	b.n	452e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    44c0:	4a1c      	ldr	r2, [pc, #112]	; (4534 <system_clock_source_enable+0xa0>)
    44c2:	8a13      	ldrh	r3, [r2, #16]
    44c4:	2102      	movs	r1, #2
    44c6:	430b      	orrs	r3, r1
    44c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    44ca:	2000      	movs	r0, #0
		break;
    44cc:	e02f      	b.n	452e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    44ce:	4a19      	ldr	r2, [pc, #100]	; (4534 <system_clock_source_enable+0xa0>)
    44d0:	8a93      	ldrh	r3, [r2, #20]
    44d2:	2102      	movs	r1, #2
    44d4:	430b      	orrs	r3, r1
    44d6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    44d8:	2000      	movs	r0, #0
		break;
    44da:	e028      	b.n	452e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    44dc:	4916      	ldr	r1, [pc, #88]	; (4538 <system_clock_source_enable+0xa4>)
    44de:	680b      	ldr	r3, [r1, #0]
    44e0:	2202      	movs	r2, #2
    44e2:	4313      	orrs	r3, r2
    44e4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    44e6:	4b13      	ldr	r3, [pc, #76]	; (4534 <system_clock_source_enable+0xa0>)
    44e8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    44ea:	0019      	movs	r1, r3
    44ec:	320e      	adds	r2, #14
    44ee:	68cb      	ldr	r3, [r1, #12]
    44f0:	421a      	tst	r2, r3
    44f2:	d0fc      	beq.n	44ee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    44f4:	4a10      	ldr	r2, [pc, #64]	; (4538 <system_clock_source_enable+0xa4>)
    44f6:	6891      	ldr	r1, [r2, #8]
    44f8:	4b0e      	ldr	r3, [pc, #56]	; (4534 <system_clock_source_enable+0xa0>)
    44fa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    44fc:	6852      	ldr	r2, [r2, #4]
    44fe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4500:	2200      	movs	r2, #0
    4502:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4504:	0019      	movs	r1, r3
    4506:	3210      	adds	r2, #16
    4508:	68cb      	ldr	r3, [r1, #12]
    450a:	421a      	tst	r2, r3
    450c:	d0fc      	beq.n	4508 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    450e:	4b0a      	ldr	r3, [pc, #40]	; (4538 <system_clock_source_enable+0xa4>)
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	b29b      	uxth	r3, r3
    4514:	4a07      	ldr	r2, [pc, #28]	; (4534 <system_clock_source_enable+0xa0>)
    4516:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4518:	2000      	movs	r0, #0
    451a:	e008      	b.n	452e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    451c:	4905      	ldr	r1, [pc, #20]	; (4534 <system_clock_source_enable+0xa0>)
    451e:	2244      	movs	r2, #68	; 0x44
    4520:	5c8b      	ldrb	r3, [r1, r2]
    4522:	2002      	movs	r0, #2
    4524:	4303      	orrs	r3, r0
    4526:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4528:	2000      	movs	r0, #0
		break;
    452a:	e000      	b.n	452e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    452c:	2000      	movs	r0, #0
}
    452e:	4770      	bx	lr
    4530:	0000a78c 	.word	0x0000a78c
    4534:	40000800 	.word	0x40000800
    4538:	20000484 	.word	0x20000484

0000453c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    453c:	b5f0      	push	{r4, r5, r6, r7, lr}
    453e:	46ce      	mov	lr, r9
    4540:	4647      	mov	r7, r8
    4542:	b580      	push	{r7, lr}
    4544:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4546:	22c2      	movs	r2, #194	; 0xc2
    4548:	00d2      	lsls	r2, r2, #3
    454a:	4b4b      	ldr	r3, [pc, #300]	; (4678 <system_clock_init+0x13c>)
    454c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    454e:	4a4b      	ldr	r2, [pc, #300]	; (467c <system_clock_init+0x140>)
    4550:	6853      	ldr	r3, [r2, #4]
    4552:	211e      	movs	r1, #30
    4554:	438b      	bics	r3, r1
    4556:	391c      	subs	r1, #28
    4558:	430b      	orrs	r3, r1
    455a:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    455c:	2304      	movs	r3, #4
    455e:	466a      	mov	r2, sp
    4560:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4562:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4564:	4d46      	ldr	r5, [pc, #280]	; (4680 <system_clock_init+0x144>)
    4566:	b2e0      	uxtb	r0, r4
    4568:	4669      	mov	r1, sp
    456a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    456c:	3401      	adds	r4, #1
    456e:	2c25      	cmp	r4, #37	; 0x25
    4570:	d1f9      	bne.n	4566 <system_clock_init+0x2a>
	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4572:	a809      	add	r0, sp, #36	; 0x24
    4574:	2400      	movs	r4, #0
    4576:	7004      	strb	r4, [r0, #0]
	config->auto_gain_control = true;
    4578:	2301      	movs	r3, #1
    457a:	7083      	strb	r3, [r0, #2]
	config->on_demand         = true;
    457c:	7243      	strb	r3, [r0, #9]
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    457e:	220f      	movs	r2, #15
    4580:	7042      	strb	r2, [r0, #1]
	xosc_conf.auto_gain_control = CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL;
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    4582:	4a40      	ldr	r2, [pc, #256]	; (4684 <system_clock_init+0x148>)
    4584:	6042      	str	r2, [r0, #4]
	xosc_conf.on_demand         = CONF_CLOCK_XOSC_ON_DEMAND;
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;
    4586:	7203      	strb	r3, [r0, #8]

	system_clock_source_xosc_set_config(&xosc_conf);
    4588:	4b3f      	ldr	r3, [pc, #252]	; (4688 <system_clock_init+0x14c>)
    458a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    458c:	2000      	movs	r0, #0
    458e:	4b3f      	ldr	r3, [pc, #252]	; (468c <system_clock_init+0x150>)
    4590:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4592:	ab04      	add	r3, sp, #16
    4594:	2200      	movs	r2, #0
    4596:	805c      	strh	r4, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4598:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    459a:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    459c:	2120      	movs	r1, #32
    459e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    45a0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    45a2:	4b3b      	ldr	r3, [pc, #236]	; (4690 <system_clock_init+0x154>)
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    45a8:	2b3f      	cmp	r3, #63	; 0x3f
    45aa:	d063      	beq.n	4674 <system_clock_init+0x138>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    45ac:	a804      	add	r0, sp, #16
    45ae:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    45b0:	2307      	movs	r3, #7
    45b2:	4698      	mov	r8, r3
    45b4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    45b6:	230a      	movs	r3, #10
    45b8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    45ba:	4b36      	ldr	r3, [pc, #216]	; (4694 <system_clock_init+0x158>)
    45bc:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    45be:	3bff      	subs	r3, #255	; 0xff
    45c0:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    45c2:	4b35      	ldr	r3, [pc, #212]	; (4698 <system_clock_init+0x15c>)
    45c4:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    45c6:	4b35      	ldr	r3, [pc, #212]	; (469c <system_clock_init+0x160>)
    45c8:	4798      	blx	r3
	config->on_demand       = true;
    45ca:	a803      	add	r0, sp, #12
    45cc:	2501      	movs	r5, #1
    45ce:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    45d0:	2400      	movs	r4, #0
    45d2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    45d4:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    45d6:	4b32      	ldr	r3, [pc, #200]	; (46a0 <system_clock_init+0x164>)
    45d8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    45da:	2006      	movs	r0, #6
    45dc:	4b2b      	ldr	r3, [pc, #172]	; (468c <system_clock_init+0x150>)
    45de:	4699      	mov	r9, r3
    45e0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    45e2:	4b30      	ldr	r3, [pc, #192]	; (46a4 <system_clock_init+0x168>)
    45e4:	4798      	blx	r3
	config->division_factor    = 1;
    45e6:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    45e8:	466b      	mov	r3, sp
    45ea:	705c      	strb	r4, [r3, #1]
	config->output_enable      = false;
    45ec:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    45ee:	4642      	mov	r2, r8
    45f0:	701a      	strb	r2, [r3, #0]
    45f2:	721d      	strb	r5, [r3, #8]
    45f4:	4669      	mov	r1, sp
    45f6:	2001      	movs	r0, #1
    45f8:	4f2b      	ldr	r7, [pc, #172]	; (46a8 <system_clock_init+0x16c>)
    45fa:	47b8      	blx	r7
    45fc:	2001      	movs	r0, #1
    45fe:	4e2b      	ldr	r6, [pc, #172]	; (46ac <system_clock_init+0x170>)
    4600:	47b0      	blx	r6
	config->division_factor    = 1;
    4602:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    4604:	466b      	mov	r3, sp
    4606:	705c      	strb	r4, [r3, #1]
	config->output_enable      = false;
    4608:	725c      	strb	r4, [r3, #9]
    460a:	701c      	strb	r4, [r3, #0]
    460c:	721d      	strb	r5, [r3, #8]
    460e:	4669      	mov	r1, sp
    4610:	2002      	movs	r0, #2
    4612:	47b8      	blx	r7
    4614:	2002      	movs	r0, #2
    4616:	47b0      	blx	r6
	config->high_when_disabled = false;
    4618:	466b      	mov	r3, sp
    461a:	705c      	strb	r4, [r3, #1]
	config->output_enable      = false;
    461c:	725c      	strb	r4, [r3, #9]
    461e:	4642      	mov	r2, r8
    4620:	701a      	strb	r2, [r3, #0]
    4622:	2302      	movs	r3, #2
    4624:	9301      	str	r3, [sp, #4]
    4626:	466b      	mov	r3, sp
    4628:	721d      	strb	r5, [r3, #8]
    462a:	4669      	mov	r1, sp
    462c:	2003      	movs	r0, #3
    462e:	47b8      	blx	r7
    4630:	2003      	movs	r0, #3
    4632:	47b0      	blx	r6
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4634:	2007      	movs	r0, #7
    4636:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4638:	490f      	ldr	r1, [pc, #60]	; (4678 <system_clock_init+0x13c>)
    463a:	2210      	movs	r2, #16
    463c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    463e:	421a      	tst	r2, r3
    4640:	d0fc      	beq.n	463c <system_clock_init+0x100>
	PM->CPUSEL.reg = (uint32_t)divider;
    4642:	4a1b      	ldr	r2, [pc, #108]	; (46b0 <system_clock_init+0x174>)
    4644:	2300      	movs	r3, #0
    4646:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4648:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    464a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    464c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    464e:	2201      	movs	r2, #1
    4650:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    4652:	4669      	mov	r1, sp
    4654:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    4656:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4658:	3307      	adds	r3, #7
    465a:	700b      	strb	r3, [r1, #0]
    465c:	720a      	strb	r2, [r1, #8]
    465e:	2000      	movs	r0, #0
    4660:	4b11      	ldr	r3, [pc, #68]	; (46a8 <system_clock_init+0x16c>)
    4662:	4798      	blx	r3
    4664:	2000      	movs	r0, #0
    4666:	4b11      	ldr	r3, [pc, #68]	; (46ac <system_clock_init+0x170>)
    4668:	4798      	blx	r3
#endif
}
    466a:	b00d      	add	sp, #52	; 0x34
    466c:	bc0c      	pop	{r2, r3}
    466e:	4690      	mov	r8, r2
    4670:	4699      	mov	r9, r3
    4672:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4674:	3b20      	subs	r3, #32
    4676:	e799      	b.n	45ac <system_clock_init+0x70>
    4678:	40000800 	.word	0x40000800
    467c:	41004000 	.word	0x41004000
    4680:	000048ed 	.word	0x000048ed
    4684:	00f42400 	.word	0x00f42400
    4688:	0000434d 	.word	0x0000434d
    468c:	00004495 	.word	0x00004495
    4690:	00806024 	.word	0x00806024
    4694:	000001ff 	.word	0x000001ff
    4698:	ffffbb80 	.word	0xffffbb80
    469c:	00004415 	.word	0x00004415
    46a0:	00004311 	.word	0x00004311
    46a4:	000046b5 	.word	0x000046b5
    46a8:	000046d9 	.word	0x000046d9
    46ac:	00004791 	.word	0x00004791
    46b0:	40000400 	.word	0x40000400

000046b4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    46b4:	4a06      	ldr	r2, [pc, #24]	; (46d0 <system_gclk_init+0x1c>)
    46b6:	6993      	ldr	r3, [r2, #24]
    46b8:	2108      	movs	r1, #8
    46ba:	430b      	orrs	r3, r1
    46bc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    46be:	2201      	movs	r2, #1
    46c0:	4b04      	ldr	r3, [pc, #16]	; (46d4 <system_gclk_init+0x20>)
    46c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    46c4:	0019      	movs	r1, r3
    46c6:	780b      	ldrb	r3, [r1, #0]
    46c8:	4213      	tst	r3, r2
    46ca:	d1fc      	bne.n	46c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    46cc:	4770      	bx	lr
    46ce:	46c0      	nop			; (mov r8, r8)
    46d0:	40000400 	.word	0x40000400
    46d4:	40000c00 	.word	0x40000c00

000046d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    46d8:	b570      	push	{r4, r5, r6, lr}
    46da:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    46dc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    46de:	780d      	ldrb	r5, [r1, #0]
    46e0:	022d      	lsls	r5, r5, #8
    46e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    46e4:	784b      	ldrb	r3, [r1, #1]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d002      	beq.n	46f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    46ea:	2380      	movs	r3, #128	; 0x80
    46ec:	02db      	lsls	r3, r3, #11
    46ee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    46f0:	7a4b      	ldrb	r3, [r1, #9]
    46f2:	2b00      	cmp	r3, #0
    46f4:	d002      	beq.n	46fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    46f6:	2380      	movs	r3, #128	; 0x80
    46f8:	031b      	lsls	r3, r3, #12
    46fa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    46fc:	6848      	ldr	r0, [r1, #4]
    46fe:	2801      	cmp	r0, #1
    4700:	d910      	bls.n	4724 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4702:	1e43      	subs	r3, r0, #1
    4704:	4218      	tst	r0, r3
    4706:	d134      	bne.n	4772 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4708:	2802      	cmp	r0, #2
    470a:	d930      	bls.n	476e <system_gclk_gen_set_config+0x96>
    470c:	2302      	movs	r3, #2
    470e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4710:	3201      	adds	r2, #1
						mask <<= 1) {
    4712:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4714:	4298      	cmp	r0, r3
    4716:	d8fb      	bhi.n	4710 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4718:	0212      	lsls	r2, r2, #8
    471a:	4332      	orrs	r2, r6
    471c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    471e:	2380      	movs	r3, #128	; 0x80
    4720:	035b      	lsls	r3, r3, #13
    4722:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4724:	7a0b      	ldrb	r3, [r1, #8]
    4726:	2b00      	cmp	r3, #0
    4728:	d002      	beq.n	4730 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    472a:	2380      	movs	r3, #128	; 0x80
    472c:	039b      	lsls	r3, r3, #14
    472e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4730:	4a13      	ldr	r2, [pc, #76]	; (4780 <system_gclk_gen_set_config+0xa8>)
    4732:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4734:	b25b      	sxtb	r3, r3
    4736:	2b00      	cmp	r3, #0
    4738:	dbfb      	blt.n	4732 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    473a:	4b12      	ldr	r3, [pc, #72]	; (4784 <system_gclk_gen_set_config+0xac>)
    473c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    473e:	4b12      	ldr	r3, [pc, #72]	; (4788 <system_gclk_gen_set_config+0xb0>)
    4740:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4742:	4a0f      	ldr	r2, [pc, #60]	; (4780 <system_gclk_gen_set_config+0xa8>)
    4744:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4746:	b25b      	sxtb	r3, r3
    4748:	2b00      	cmp	r3, #0
    474a:	dbfb      	blt.n	4744 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    474c:	4b0c      	ldr	r3, [pc, #48]	; (4780 <system_gclk_gen_set_config+0xa8>)
    474e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4750:	001a      	movs	r2, r3
    4752:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4754:	b25b      	sxtb	r3, r3
    4756:	2b00      	cmp	r3, #0
    4758:	dbfb      	blt.n	4752 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    475a:	4a09      	ldr	r2, [pc, #36]	; (4780 <system_gclk_gen_set_config+0xa8>)
    475c:	6853      	ldr	r3, [r2, #4]
    475e:	2180      	movs	r1, #128	; 0x80
    4760:	0249      	lsls	r1, r1, #9
    4762:	400b      	ands	r3, r1
    4764:	431d      	orrs	r5, r3
    4766:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4768:	4b08      	ldr	r3, [pc, #32]	; (478c <system_gclk_gen_set_config+0xb4>)
    476a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    476c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    476e:	2200      	movs	r2, #0
    4770:	e7d2      	b.n	4718 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4772:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4774:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4776:	2380      	movs	r3, #128	; 0x80
    4778:	029b      	lsls	r3, r3, #10
    477a:	431d      	orrs	r5, r3
    477c:	e7d2      	b.n	4724 <system_gclk_gen_set_config+0x4c>
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	40000c00 	.word	0x40000c00
    4784:	00004205 	.word	0x00004205
    4788:	40000c08 	.word	0x40000c08
    478c:	00004245 	.word	0x00004245

00004790 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4790:	b510      	push	{r4, lr}
    4792:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4794:	4a0b      	ldr	r2, [pc, #44]	; (47c4 <system_gclk_gen_enable+0x34>)
    4796:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4798:	b25b      	sxtb	r3, r3
    479a:	2b00      	cmp	r3, #0
    479c:	dbfb      	blt.n	4796 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    479e:	4b0a      	ldr	r3, [pc, #40]	; (47c8 <system_gclk_gen_enable+0x38>)
    47a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    47a2:	4b0a      	ldr	r3, [pc, #40]	; (47cc <system_gclk_gen_enable+0x3c>)
    47a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47a6:	4a07      	ldr	r2, [pc, #28]	; (47c4 <system_gclk_gen_enable+0x34>)
    47a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    47aa:	b25b      	sxtb	r3, r3
    47ac:	2b00      	cmp	r3, #0
    47ae:	dbfb      	blt.n	47a8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    47b0:	4a04      	ldr	r2, [pc, #16]	; (47c4 <system_gclk_gen_enable+0x34>)
    47b2:	6851      	ldr	r1, [r2, #4]
    47b4:	2380      	movs	r3, #128	; 0x80
    47b6:	025b      	lsls	r3, r3, #9
    47b8:	430b      	orrs	r3, r1
    47ba:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    47bc:	4b04      	ldr	r3, [pc, #16]	; (47d0 <system_gclk_gen_enable+0x40>)
    47be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    47c0:	bd10      	pop	{r4, pc}
    47c2:	46c0      	nop			; (mov r8, r8)
    47c4:	40000c00 	.word	0x40000c00
    47c8:	00004205 	.word	0x00004205
    47cc:	40000c04 	.word	0x40000c04
    47d0:	00004245 	.word	0x00004245

000047d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    47d4:	b570      	push	{r4, r5, r6, lr}
    47d6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47d8:	4a1a      	ldr	r2, [pc, #104]	; (4844 <system_gclk_gen_get_hz+0x70>)
    47da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    47dc:	b25b      	sxtb	r3, r3
    47de:	2b00      	cmp	r3, #0
    47e0:	dbfb      	blt.n	47da <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    47e2:	4b19      	ldr	r3, [pc, #100]	; (4848 <system_gclk_gen_get_hz+0x74>)
    47e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    47e6:	4b19      	ldr	r3, [pc, #100]	; (484c <system_gclk_gen_get_hz+0x78>)
    47e8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47ea:	4a16      	ldr	r2, [pc, #88]	; (4844 <system_gclk_gen_get_hz+0x70>)
    47ec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    47ee:	b25b      	sxtb	r3, r3
    47f0:	2b00      	cmp	r3, #0
    47f2:	dbfb      	blt.n	47ec <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    47f4:	4e13      	ldr	r6, [pc, #76]	; (4844 <system_gclk_gen_get_hz+0x70>)
    47f6:	6870      	ldr	r0, [r6, #4]
    47f8:	04c0      	lsls	r0, r0, #19
    47fa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    47fc:	4b14      	ldr	r3, [pc, #80]	; (4850 <system_gclk_gen_get_hz+0x7c>)
    47fe:	4798      	blx	r3
    4800:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4802:	4b12      	ldr	r3, [pc, #72]	; (484c <system_gclk_gen_get_hz+0x78>)
    4804:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4806:	6876      	ldr	r6, [r6, #4]
    4808:	02f6      	lsls	r6, r6, #11
    480a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    480c:	4b11      	ldr	r3, [pc, #68]	; (4854 <system_gclk_gen_get_hz+0x80>)
    480e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4810:	4a0c      	ldr	r2, [pc, #48]	; (4844 <system_gclk_gen_get_hz+0x70>)
    4812:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4814:	b25b      	sxtb	r3, r3
    4816:	2b00      	cmp	r3, #0
    4818:	dbfb      	blt.n	4812 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    481a:	4b0a      	ldr	r3, [pc, #40]	; (4844 <system_gclk_gen_get_hz+0x70>)
    481c:	689c      	ldr	r4, [r3, #8]
    481e:	0224      	lsls	r4, r4, #8
    4820:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4822:	4b0d      	ldr	r3, [pc, #52]	; (4858 <system_gclk_gen_get_hz+0x84>)
    4824:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4826:	2e00      	cmp	r6, #0
    4828:	d107      	bne.n	483a <system_gclk_gen_get_hz+0x66>
    482a:	2c01      	cmp	r4, #1
    482c:	d907      	bls.n	483e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    482e:	0021      	movs	r1, r4
    4830:	0028      	movs	r0, r5
    4832:	4b0a      	ldr	r3, [pc, #40]	; (485c <system_gclk_gen_get_hz+0x88>)
    4834:	4798      	blx	r3
    4836:	0005      	movs	r5, r0
    4838:	e001      	b.n	483e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    483a:	3401      	adds	r4, #1
    483c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    483e:	0028      	movs	r0, r5
    4840:	bd70      	pop	{r4, r5, r6, pc}
    4842:	46c0      	nop			; (mov r8, r8)
    4844:	40000c00 	.word	0x40000c00
    4848:	00004205 	.word	0x00004205
    484c:	40000c04 	.word	0x40000c04
    4850:	00004275 	.word	0x00004275
    4854:	40000c08 	.word	0x40000c08
    4858:	00004245 	.word	0x00004245
    485c:	00005265 	.word	0x00005265

00004860 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4860:	b510      	push	{r4, lr}
    4862:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4864:	4b06      	ldr	r3, [pc, #24]	; (4880 <system_gclk_chan_enable+0x20>)
    4866:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4868:	4b06      	ldr	r3, [pc, #24]	; (4884 <system_gclk_chan_enable+0x24>)
    486a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    486c:	4a06      	ldr	r2, [pc, #24]	; (4888 <system_gclk_chan_enable+0x28>)
    486e:	8853      	ldrh	r3, [r2, #2]
    4870:	2180      	movs	r1, #128	; 0x80
    4872:	01c9      	lsls	r1, r1, #7
    4874:	430b      	orrs	r3, r1
    4876:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4878:	4b04      	ldr	r3, [pc, #16]	; (488c <system_gclk_chan_enable+0x2c>)
    487a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    487c:	bd10      	pop	{r4, pc}
    487e:	46c0      	nop			; (mov r8, r8)
    4880:	00004205 	.word	0x00004205
    4884:	40000c02 	.word	0x40000c02
    4888:	40000c00 	.word	0x40000c00
    488c:	00004245 	.word	0x00004245

00004890 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4890:	b510      	push	{r4, lr}
    4892:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4894:	4b0f      	ldr	r3, [pc, #60]	; (48d4 <system_gclk_chan_disable+0x44>)
    4896:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4898:	4b0f      	ldr	r3, [pc, #60]	; (48d8 <system_gclk_chan_disable+0x48>)
    489a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    489c:	4a0f      	ldr	r2, [pc, #60]	; (48dc <system_gclk_chan_disable+0x4c>)
    489e:	8853      	ldrh	r3, [r2, #2]
    48a0:	051b      	lsls	r3, r3, #20
    48a2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    48a4:	8853      	ldrh	r3, [r2, #2]
    48a6:	490e      	ldr	r1, [pc, #56]	; (48e0 <system_gclk_chan_disable+0x50>)
    48a8:	400b      	ands	r3, r1
    48aa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    48ac:	8853      	ldrh	r3, [r2, #2]
    48ae:	490d      	ldr	r1, [pc, #52]	; (48e4 <system_gclk_chan_disable+0x54>)
    48b0:	400b      	ands	r3, r1
    48b2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    48b4:	0011      	movs	r1, r2
    48b6:	2280      	movs	r2, #128	; 0x80
    48b8:	01d2      	lsls	r2, r2, #7
    48ba:	884b      	ldrh	r3, [r1, #2]
    48bc:	4213      	tst	r3, r2
    48be:	d1fc      	bne.n	48ba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    48c0:	4906      	ldr	r1, [pc, #24]	; (48dc <system_gclk_chan_disable+0x4c>)
    48c2:	884a      	ldrh	r2, [r1, #2]
    48c4:	0203      	lsls	r3, r0, #8
    48c6:	4806      	ldr	r0, [pc, #24]	; (48e0 <system_gclk_chan_disable+0x50>)
    48c8:	4002      	ands	r2, r0
    48ca:	4313      	orrs	r3, r2
    48cc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    48ce:	4b06      	ldr	r3, [pc, #24]	; (48e8 <system_gclk_chan_disable+0x58>)
    48d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    48d2:	bd10      	pop	{r4, pc}
    48d4:	00004205 	.word	0x00004205
    48d8:	40000c02 	.word	0x40000c02
    48dc:	40000c00 	.word	0x40000c00
    48e0:	fffff0ff 	.word	0xfffff0ff
    48e4:	ffffbfff 	.word	0xffffbfff
    48e8:	00004245 	.word	0x00004245

000048ec <system_gclk_chan_set_config>:
{
    48ec:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    48ee:	780c      	ldrb	r4, [r1, #0]
    48f0:	0224      	lsls	r4, r4, #8
    48f2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    48f4:	4b02      	ldr	r3, [pc, #8]	; (4900 <system_gclk_chan_set_config+0x14>)
    48f6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    48f8:	b2a4      	uxth	r4, r4
    48fa:	4b02      	ldr	r3, [pc, #8]	; (4904 <system_gclk_chan_set_config+0x18>)
    48fc:	805c      	strh	r4, [r3, #2]
}
    48fe:	bd10      	pop	{r4, pc}
    4900:	00004891 	.word	0x00004891
    4904:	40000c00 	.word	0x40000c00

00004908 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4908:	b510      	push	{r4, lr}
    490a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    490c:	4b06      	ldr	r3, [pc, #24]	; (4928 <system_gclk_chan_get_hz+0x20>)
    490e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4910:	4b06      	ldr	r3, [pc, #24]	; (492c <system_gclk_chan_get_hz+0x24>)
    4912:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4914:	4b06      	ldr	r3, [pc, #24]	; (4930 <system_gclk_chan_get_hz+0x28>)
    4916:	885c      	ldrh	r4, [r3, #2]
    4918:	0524      	lsls	r4, r4, #20
    491a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    491c:	4b05      	ldr	r3, [pc, #20]	; (4934 <system_gclk_chan_get_hz+0x2c>)
    491e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4920:	0020      	movs	r0, r4
    4922:	4b05      	ldr	r3, [pc, #20]	; (4938 <system_gclk_chan_get_hz+0x30>)
    4924:	4798      	blx	r3
}
    4926:	bd10      	pop	{r4, pc}
    4928:	00004205 	.word	0x00004205
    492c:	40000c02 	.word	0x40000c02
    4930:	40000c00 	.word	0x40000c00
    4934:	00004245 	.word	0x00004245
    4938:	000047d5 	.word	0x000047d5

0000493c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    493c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    493e:	78d3      	ldrb	r3, [r2, #3]
    4940:	2b00      	cmp	r3, #0
    4942:	d135      	bne.n	49b0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4944:	7813      	ldrb	r3, [r2, #0]
    4946:	2b80      	cmp	r3, #128	; 0x80
    4948:	d029      	beq.n	499e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    494a:	061b      	lsls	r3, r3, #24
    494c:	2480      	movs	r4, #128	; 0x80
    494e:	0264      	lsls	r4, r4, #9
    4950:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4952:	7854      	ldrb	r4, [r2, #1]
    4954:	2502      	movs	r5, #2
    4956:	43ac      	bics	r4, r5
    4958:	d106      	bne.n	4968 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    495a:	7894      	ldrb	r4, [r2, #2]
    495c:	2c00      	cmp	r4, #0
    495e:	d120      	bne.n	49a2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4960:	2480      	movs	r4, #128	; 0x80
    4962:	02a4      	lsls	r4, r4, #10
    4964:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4966:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4968:	7854      	ldrb	r4, [r2, #1]
    496a:	3c01      	subs	r4, #1
    496c:	2c01      	cmp	r4, #1
    496e:	d91c      	bls.n	49aa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4970:	040d      	lsls	r5, r1, #16
    4972:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4974:	24a0      	movs	r4, #160	; 0xa0
    4976:	05e4      	lsls	r4, r4, #23
    4978:	432c      	orrs	r4, r5
    497a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    497c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    497e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4980:	24d0      	movs	r4, #208	; 0xd0
    4982:	0624      	lsls	r4, r4, #24
    4984:	432c      	orrs	r4, r5
    4986:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4988:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    498a:	78d4      	ldrb	r4, [r2, #3]
    498c:	2c00      	cmp	r4, #0
    498e:	d122      	bne.n	49d6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4990:	035b      	lsls	r3, r3, #13
    4992:	d51c      	bpl.n	49ce <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4994:	7893      	ldrb	r3, [r2, #2]
    4996:	2b01      	cmp	r3, #1
    4998:	d01e      	beq.n	49d8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    499a:	6141      	str	r1, [r0, #20]
    499c:	e017      	b.n	49ce <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    499e:	2300      	movs	r3, #0
    49a0:	e7d7      	b.n	4952 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    49a2:	24c0      	movs	r4, #192	; 0xc0
    49a4:	02e4      	lsls	r4, r4, #11
    49a6:	4323      	orrs	r3, r4
    49a8:	e7dd      	b.n	4966 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    49aa:	4c0d      	ldr	r4, [pc, #52]	; (49e0 <_system_pinmux_config+0xa4>)
    49ac:	4023      	ands	r3, r4
    49ae:	e7df      	b.n	4970 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    49b0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    49b2:	040c      	lsls	r4, r1, #16
    49b4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    49b6:	23a0      	movs	r3, #160	; 0xa0
    49b8:	05db      	lsls	r3, r3, #23
    49ba:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    49bc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    49be:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    49c0:	23d0      	movs	r3, #208	; 0xd0
    49c2:	061b      	lsls	r3, r3, #24
    49c4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    49c6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    49c8:	78d3      	ldrb	r3, [r2, #3]
    49ca:	2b00      	cmp	r3, #0
    49cc:	d103      	bne.n	49d6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    49ce:	7853      	ldrb	r3, [r2, #1]
    49d0:	3b01      	subs	r3, #1
    49d2:	2b01      	cmp	r3, #1
    49d4:	d902      	bls.n	49dc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    49d6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    49d8:	6181      	str	r1, [r0, #24]
    49da:	e7f8      	b.n	49ce <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    49dc:	6081      	str	r1, [r0, #8]
}
    49de:	e7fa      	b.n	49d6 <_system_pinmux_config+0x9a>
    49e0:	fffbffff 	.word	0xfffbffff

000049e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    49e4:	b510      	push	{r4, lr}
    49e6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    49e8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    49ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    49ec:	2900      	cmp	r1, #0
    49ee:	d104      	bne.n	49fa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    49f0:	0943      	lsrs	r3, r0, #5
    49f2:	01db      	lsls	r3, r3, #7
    49f4:	4905      	ldr	r1, [pc, #20]	; (4a0c <system_pinmux_pin_set_config+0x28>)
    49f6:	468c      	mov	ip, r1
    49f8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    49fa:	241f      	movs	r4, #31
    49fc:	4020      	ands	r0, r4
    49fe:	2101      	movs	r1, #1
    4a00:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4a02:	0018      	movs	r0, r3
    4a04:	4b02      	ldr	r3, [pc, #8]	; (4a10 <system_pinmux_pin_set_config+0x2c>)
    4a06:	4798      	blx	r3
}
    4a08:	bd10      	pop	{r4, pc}
    4a0a:	46c0      	nop			; (mov r8, r8)
    4a0c:	41004400 	.word	0x41004400
    4a10:	0000493d 	.word	0x0000493d

00004a14 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4a14:	4770      	bx	lr
	...

00004a18 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4a18:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4a1a:	4b05      	ldr	r3, [pc, #20]	; (4a30 <system_init+0x18>)
    4a1c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4a1e:	4b05      	ldr	r3, [pc, #20]	; (4a34 <system_init+0x1c>)
    4a20:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4a22:	4b05      	ldr	r3, [pc, #20]	; (4a38 <system_init+0x20>)
    4a24:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4a26:	4b05      	ldr	r3, [pc, #20]	; (4a3c <system_init+0x24>)
    4a28:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4a2a:	4b05      	ldr	r3, [pc, #20]	; (4a40 <system_init+0x28>)
    4a2c:	4798      	blx	r3
}
    4a2e:	bd10      	pop	{r4, pc}
    4a30:	0000453d 	.word	0x0000453d
    4a34:	00004201 	.word	0x00004201
    4a38:	00004a15 	.word	0x00004a15
    4a3c:	00000d39 	.word	0x00000d39
    4a40:	00004a15 	.word	0x00004a15

00004a44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4a44:	e7fe      	b.n	4a44 <Dummy_Handler>
	...

00004a48 <Reset_Handler>:
{
    4a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4a4a:	4a2a      	ldr	r2, [pc, #168]	; (4af4 <Reset_Handler+0xac>)
    4a4c:	4b2a      	ldr	r3, [pc, #168]	; (4af8 <Reset_Handler+0xb0>)
    4a4e:	429a      	cmp	r2, r3
    4a50:	d011      	beq.n	4a76 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4a52:	001a      	movs	r2, r3
    4a54:	4b29      	ldr	r3, [pc, #164]	; (4afc <Reset_Handler+0xb4>)
    4a56:	429a      	cmp	r2, r3
    4a58:	d20d      	bcs.n	4a76 <Reset_Handler+0x2e>
    4a5a:	4a29      	ldr	r2, [pc, #164]	; (4b00 <Reset_Handler+0xb8>)
    4a5c:	3303      	adds	r3, #3
    4a5e:	1a9b      	subs	r3, r3, r2
    4a60:	089b      	lsrs	r3, r3, #2
    4a62:	3301      	adds	r3, #1
    4a64:	009b      	lsls	r3, r3, #2
    4a66:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4a68:	4823      	ldr	r0, [pc, #140]	; (4af8 <Reset_Handler+0xb0>)
    4a6a:	4922      	ldr	r1, [pc, #136]	; (4af4 <Reset_Handler+0xac>)
    4a6c:	588c      	ldr	r4, [r1, r2]
    4a6e:	5084      	str	r4, [r0, r2]
    4a70:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    4a72:	429a      	cmp	r2, r3
    4a74:	d1fa      	bne.n	4a6c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4a76:	4a23      	ldr	r2, [pc, #140]	; (4b04 <Reset_Handler+0xbc>)
    4a78:	4b23      	ldr	r3, [pc, #140]	; (4b08 <Reset_Handler+0xc0>)
    4a7a:	429a      	cmp	r2, r3
    4a7c:	d20a      	bcs.n	4a94 <Reset_Handler+0x4c>
    4a7e:	43d3      	mvns	r3, r2
    4a80:	4921      	ldr	r1, [pc, #132]	; (4b08 <Reset_Handler+0xc0>)
    4a82:	185b      	adds	r3, r3, r1
    4a84:	2103      	movs	r1, #3
    4a86:	438b      	bics	r3, r1
    4a88:	3304      	adds	r3, #4
    4a8a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4a8c:	2100      	movs	r1, #0
    4a8e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4a90:	4293      	cmp	r3, r2
    4a92:	d1fc      	bne.n	4a8e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4a94:	4a1d      	ldr	r2, [pc, #116]	; (4b0c <Reset_Handler+0xc4>)
    4a96:	21ff      	movs	r1, #255	; 0xff
    4a98:	4b1d      	ldr	r3, [pc, #116]	; (4b10 <Reset_Handler+0xc8>)
    4a9a:	438b      	bics	r3, r1
    4a9c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4a9e:	39fd      	subs	r1, #253	; 0xfd
    4aa0:	2390      	movs	r3, #144	; 0x90
    4aa2:	005b      	lsls	r3, r3, #1
    4aa4:	4a1b      	ldr	r2, [pc, #108]	; (4b14 <Reset_Handler+0xcc>)
    4aa6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4aa8:	4a1b      	ldr	r2, [pc, #108]	; (4b18 <Reset_Handler+0xd0>)
    4aaa:	78d3      	ldrb	r3, [r2, #3]
    4aac:	2503      	movs	r5, #3
    4aae:	43ab      	bics	r3, r5
    4ab0:	2402      	movs	r4, #2
    4ab2:	4323      	orrs	r3, r4
    4ab4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4ab6:	78d3      	ldrb	r3, [r2, #3]
    4ab8:	270c      	movs	r7, #12
    4aba:	43bb      	bics	r3, r7
    4abc:	2608      	movs	r6, #8
    4abe:	4333      	orrs	r3, r6
    4ac0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4ac2:	4b16      	ldr	r3, [pc, #88]	; (4b1c <Reset_Handler+0xd4>)
    4ac4:	7b98      	ldrb	r0, [r3, #14]
    4ac6:	2230      	movs	r2, #48	; 0x30
    4ac8:	4390      	bics	r0, r2
    4aca:	2220      	movs	r2, #32
    4acc:	4310      	orrs	r0, r2
    4ace:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4ad0:	7b99      	ldrb	r1, [r3, #14]
    4ad2:	43b9      	bics	r1, r7
    4ad4:	4331      	orrs	r1, r6
    4ad6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4ad8:	7b9a      	ldrb	r2, [r3, #14]
    4ada:	43aa      	bics	r2, r5
    4adc:	4322      	orrs	r2, r4
    4ade:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4ae0:	4a0f      	ldr	r2, [pc, #60]	; (4b20 <Reset_Handler+0xd8>)
    4ae2:	6853      	ldr	r3, [r2, #4]
    4ae4:	2180      	movs	r1, #128	; 0x80
    4ae6:	430b      	orrs	r3, r1
    4ae8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4aea:	4b0e      	ldr	r3, [pc, #56]	; (4b24 <Reset_Handler+0xdc>)
    4aec:	4798      	blx	r3
        main();
    4aee:	4b0e      	ldr	r3, [pc, #56]	; (4b28 <Reset_Handler+0xe0>)
    4af0:	4798      	blx	r3
    4af2:	e7fe      	b.n	4af2 <Reset_Handler+0xaa>
    4af4:	0000ac40 	.word	0x0000ac40
    4af8:	20000000 	.word	0x20000000
    4afc:	200002a8 	.word	0x200002a8
    4b00:	20000004 	.word	0x20000004
    4b04:	200002b0 	.word	0x200002b0
    4b08:	200057ec 	.word	0x200057ec
    4b0c:	e000ed00 	.word	0xe000ed00
    4b10:	00000000 	.word	0x00000000
    4b14:	41007000 	.word	0x41007000
    4b18:	41005000 	.word	0x41005000
    4b1c:	41004800 	.word	0x41004800
    4b20:	41004000 	.word	0x41004000
    4b24:	00007241 	.word	0x00007241
    4b28:	00004f6d 	.word	0x00004f6d

00004b2c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4b2c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4b2e:	4a06      	ldr	r2, [pc, #24]	; (4b48 <_sbrk+0x1c>)
    4b30:	6812      	ldr	r2, [r2, #0]
    4b32:	2a00      	cmp	r2, #0
    4b34:	d004      	beq.n	4b40 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4b36:	4a04      	ldr	r2, [pc, #16]	; (4b48 <_sbrk+0x1c>)
    4b38:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4b3a:	18c3      	adds	r3, r0, r3
    4b3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4b3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4b40:	4902      	ldr	r1, [pc, #8]	; (4b4c <_sbrk+0x20>)
    4b42:	4a01      	ldr	r2, [pc, #4]	; (4b48 <_sbrk+0x1c>)
    4b44:	6011      	str	r1, [r2, #0]
    4b46:	e7f6      	b.n	4b36 <_sbrk+0xa>
    4b48:	2000049c 	.word	0x2000049c
    4b4c:	200077f0 	.word	0x200077f0

00004b50 <main_req_dev_dep_msg_in_sent>:
    if ((numBytesTransferred % 64) == 52) numBytesTransferred++;
	return 1 == udi_tmc_bulk_in_run((uint8_t*)&deviceDataResponse, (sizeof(TMC_bulkIN_dev_dep_msg_in_header_t) + numBytesTransferred), main_req_dev_dep_msg_in_sent);
}

////////////////////////////////////////////////////////////////////////////////
void main_req_dev_dep_msg_in_sent(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep) {
    4b50:	b510      	push	{r4, lr}
   UDI_TMC_RECEIVE_BULKOUT_COMMAND();  // Receive the next command
    4b52:	2200      	movs	r2, #0
    4b54:	2100      	movs	r1, #0
    4b56:	2000      	movs	r0, #0
    4b58:	4b01      	ldr	r3, [pc, #4]	; (4b60 <main_req_dev_dep_msg_in_sent+0x10>)
    4b5a:	4798      	blx	r3
}
    4b5c:	bd10      	pop	{r4, pc}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	0000054d 	.word	0x0000054d

00004b64 <abort_tmc_bulkIN_transfer>:
{
    4b64:	b510      	push	{r4, lr}
   activeDataRequest.bTag = INVALID_bTag;
    4b66:	4a05      	ldr	r2, [pc, #20]	; (4b7c <abort_tmc_bulkIN_transfer+0x18>)
    4b68:	2300      	movs	r3, #0
    4b6a:	7013      	strb	r3, [r2, #0]
   activeDataRequest.numBytesRemaining = 0;
    4b6c:	6053      	str	r3, [r2, #4]
   activeDataRequest.numBytesTransferred = 0;
    4b6e:	6093      	str	r3, [r2, #8]
   g_bulkIN_xfer_active = false;
    4b70:	4a03      	ldr	r2, [pc, #12]	; (4b80 <abort_tmc_bulkIN_transfer+0x1c>)
    4b72:	7013      	strb	r3, [r2, #0]
   ui_loop_back_state(false);
    4b74:	2000      	movs	r0, #0
    4b76:	4b03      	ldr	r3, [pc, #12]	; (4b84 <abort_tmc_bulkIN_transfer+0x20>)
    4b78:	4798      	blx	r3
}
    4b7a:	bd10      	pop	{r4, pc}
    4b7c:	200004a0 	.word	0x200004a0
    4b80:	20002bcc 	.word	0x20002bcc
    4b84:	00003271 	.word	0x00003271

00004b88 <command_handler>:
void command_handler(uint8_t* command) {
    4b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b8a:	b089      	sub	sp, #36	; 0x24
    4b8c:	0007      	movs	r7, r0
	args[i++] = strtok(command, DELIMS);
    4b8e:	4969      	ldr	r1, [pc, #420]	; (4d34 <command_handler+0x1ac>)
    4b90:	4b69      	ldr	r3, [pc, #420]	; (4d38 <command_handler+0x1b0>)
    4b92:	4798      	blx	r3
    4b94:	9003      	str	r0, [sp, #12]
	while(*command && i < (NUM_ARGS-1)) args[i++] = strtok(NULL, DELIMS);
    4b96:	783b      	ldrb	r3, [r7, #0]
    4b98:	2b00      	cmp	r3, #0
    4b9a:	d100      	bne.n	4b9e <command_handler+0x16>
    4b9c:	e0c8      	b.n	4d30 <command_handler+0x1a8>
    4b9e:	ad03      	add	r5, sp, #12
    4ba0:	2401      	movs	r4, #1
    4ba2:	4e65      	ldr	r6, [pc, #404]	; (4d38 <command_handler+0x1b0>)
    4ba4:	3401      	adds	r4, #1
    4ba6:	b2e4      	uxtb	r4, r4
    4ba8:	4962      	ldr	r1, [pc, #392]	; (4d34 <command_handler+0x1ac>)
    4baa:	2000      	movs	r0, #0
    4bac:	47b0      	blx	r6
    4bae:	6068      	str	r0, [r5, #4]
    4bb0:	783b      	ldrb	r3, [r7, #0]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d002      	beq.n	4bbc <command_handler+0x34>
    4bb6:	3504      	adds	r5, #4
    4bb8:	2c04      	cmp	r4, #4
    4bba:	d1f3      	bne.n	4ba4 <command_handler+0x1c>
	args[i] = NULL;
    4bbc:	00a4      	lsls	r4, r4, #2
    4bbe:	2200      	movs	r2, #0
    4bc0:	ab03      	add	r3, sp, #12
    4bc2:	50e2      	str	r2, [r4, r3]
	switch(cmd_num = findCommand(args[0])) {
    4bc4:	9803      	ldr	r0, [sp, #12]
    4bc6:	4b5d      	ldr	r3, [pc, #372]	; (4d3c <command_handler+0x1b4>)
    4bc8:	4798      	blx	r3
    4bca:	2808      	cmp	r0, #8
    4bcc:	d900      	bls.n	4bd0 <command_handler+0x48>
    4bce:	e0a0      	b.n	4d12 <command_handler+0x18a>
    4bd0:	0080      	lsls	r0, r0, #2
    4bd2:	4b5b      	ldr	r3, [pc, #364]	; (4d40 <command_handler+0x1b8>)
    4bd4:	581b      	ldr	r3, [r3, r0]
    4bd6:	469f      	mov	pc, r3
			snprintf(cmd_txbuf, TX_BUF_SIZE, "%d", readReg(atoi(args[1])));
    4bd8:	9804      	ldr	r0, [sp, #16]
    4bda:	4b5a      	ldr	r3, [pc, #360]	; (4d44 <command_handler+0x1bc>)
    4bdc:	4798      	blx	r3
    4bde:	b2c0      	uxtb	r0, r0
    4be0:	4b59      	ldr	r3, [pc, #356]	; (4d48 <command_handler+0x1c0>)
    4be2:	4798      	blx	r3
    4be4:	0003      	movs	r3, r0
    4be6:	4a59      	ldr	r2, [pc, #356]	; (4d4c <command_handler+0x1c4>)
    4be8:	2132      	movs	r1, #50	; 0x32
    4bea:	4859      	ldr	r0, [pc, #356]	; (4d50 <command_handler+0x1c8>)
    4bec:	4c59      	ldr	r4, [pc, #356]	; (4d54 <command_handler+0x1cc>)
    4bee:	47a0      	blx	r4
			break;
    4bf0:	e094      	b.n	4d1c <command_handler+0x194>
			switch (val = add(strtoul(args[1],NULL,10),atof(args[2]),atoi(args[3]))) {
    4bf2:	9b04      	ldr	r3, [sp, #16]
    4bf4:	9301      	str	r3, [sp, #4]
    4bf6:	220a      	movs	r2, #10
    4bf8:	2100      	movs	r1, #0
    4bfa:	0018      	movs	r0, r3
    4bfc:	4b56      	ldr	r3, [pc, #344]	; (4d58 <command_handler+0x1d0>)
    4bfe:	4798      	blx	r3
    4c00:	0005      	movs	r5, r0
    4c02:	9b05      	ldr	r3, [sp, #20]
    4c04:	9301      	str	r3, [sp, #4]
    4c06:	0018      	movs	r0, r3
    4c08:	4b54      	ldr	r3, [pc, #336]	; (4d5c <command_handler+0x1d4>)
    4c0a:	4798      	blx	r3
    4c0c:	0006      	movs	r6, r0
    4c0e:	000f      	movs	r7, r1
    4c10:	9806      	ldr	r0, [sp, #24]
    4c12:	4b4c      	ldr	r3, [pc, #304]	; (4d44 <command_handler+0x1bc>)
    4c14:	4798      	blx	r3
    4c16:	b284      	uxth	r4, r0
    4c18:	0030      	movs	r0, r6
    4c1a:	0039      	movs	r1, r7
    4c1c:	4b50      	ldr	r3, [pc, #320]	; (4d60 <command_handler+0x1d8>)
    4c1e:	4798      	blx	r3
    4c20:	1c01      	adds	r1, r0, #0
    4c22:	0022      	movs	r2, r4
    4c24:	0028      	movs	r0, r5
    4c26:	4b4f      	ldr	r3, [pc, #316]	; (4d64 <command_handler+0x1dc>)
    4c28:	4798      	blx	r3
    4c2a:	2801      	cmp	r0, #1
    4c2c:	d00f      	beq.n	4c4e <command_handler+0xc6>
    4c2e:	2800      	cmp	r0, #0
    4c30:	d007      	beq.n	4c42 <command_handler+0xba>
    4c32:	2802      	cmp	r0, #2
    4c34:	d011      	beq.n	4c5a <command_handler+0xd2>
					strcpy(cmd_txbuf,ADD_RESP_ERR);
    4c36:	220a      	movs	r2, #10
    4c38:	494b      	ldr	r1, [pc, #300]	; (4d68 <command_handler+0x1e0>)
    4c3a:	4845      	ldr	r0, [pc, #276]	; (4d50 <command_handler+0x1c8>)
    4c3c:	4b4b      	ldr	r3, [pc, #300]	; (4d6c <command_handler+0x1e4>)
    4c3e:	4798      	blx	r3
					break;
    4c40:	e06c      	b.n	4d1c <command_handler+0x194>
					strcpy(cmd_txbuf,ADD_RESP_ADD);
    4c42:	2206      	movs	r2, #6
    4c44:	494a      	ldr	r1, [pc, #296]	; (4d70 <command_handler+0x1e8>)
    4c46:	4842      	ldr	r0, [pc, #264]	; (4d50 <command_handler+0x1c8>)
    4c48:	4b48      	ldr	r3, [pc, #288]	; (4d6c <command_handler+0x1e4>)
    4c4a:	4798      	blx	r3
					break;
    4c4c:	e066      	b.n	4d1c <command_handler+0x194>
					strcpy(cmd_txbuf,ADD_RESP_INVD);
    4c4e:	2208      	movs	r2, #8
    4c50:	4948      	ldr	r1, [pc, #288]	; (4d74 <command_handler+0x1ec>)
    4c52:	483f      	ldr	r0, [pc, #252]	; (4d50 <command_handler+0x1c8>)
    4c54:	4b45      	ldr	r3, [pc, #276]	; (4d6c <command_handler+0x1e4>)
    4c56:	4798      	blx	r3
					break;
    4c58:	e060      	b.n	4d1c <command_handler+0x194>
					strcpy(cmd_txbuf,ADD_RESP_FULL);
    4c5a:	2205      	movs	r2, #5
    4c5c:	4946      	ldr	r1, [pc, #280]	; (4d78 <command_handler+0x1f0>)
    4c5e:	483c      	ldr	r0, [pc, #240]	; (4d50 <command_handler+0x1c8>)
    4c60:	4b42      	ldr	r3, [pc, #264]	; (4d6c <command_handler+0x1e4>)
    4c62:	4798      	blx	r3
					break;
    4c64:	e05a      	b.n	4d1c <command_handler+0x194>
			if (val = rm()) strcpy(cmd_txbuf,RM_RESP);
    4c66:	4b45      	ldr	r3, [pc, #276]	; (4d7c <command_handler+0x1f4>)
    4c68:	4798      	blx	r3
    4c6a:	2800      	cmp	r0, #0
    4c6c:	d005      	beq.n	4c7a <command_handler+0xf2>
    4c6e:	2208      	movs	r2, #8
    4c70:	4943      	ldr	r1, [pc, #268]	; (4d80 <command_handler+0x1f8>)
    4c72:	4837      	ldr	r0, [pc, #220]	; (4d50 <command_handler+0x1c8>)
    4c74:	4b3d      	ldr	r3, [pc, #244]	; (4d6c <command_handler+0x1e4>)
    4c76:	4798      	blx	r3
    4c78:	e050      	b.n	4d1c <command_handler+0x194>
			else strcpy(cmd_txbuf,EMPTY_RESP);
    4c7a:	2206      	movs	r2, #6
    4c7c:	4941      	ldr	r1, [pc, #260]	; (4d84 <command_handler+0x1fc>)
    4c7e:	4834      	ldr	r0, [pc, #208]	; (4d50 <command_handler+0x1c8>)
    4c80:	4b3a      	ldr	r3, [pc, #232]	; (4d6c <command_handler+0x1e4>)
    4c82:	4798      	blx	r3
    4c84:	e04a      	b.n	4d1c <command_handler+0x194>
			qryDSet(strtoul(args[1],NULL,TX_BUF_SIZE),cmd_txbuf,TX_BUF_SIZE);
    4c86:	2232      	movs	r2, #50	; 0x32
    4c88:	2100      	movs	r1, #0
    4c8a:	9804      	ldr	r0, [sp, #16]
    4c8c:	4b32      	ldr	r3, [pc, #200]	; (4d58 <command_handler+0x1d0>)
    4c8e:	4798      	blx	r3
    4c90:	2232      	movs	r2, #50	; 0x32
    4c92:	492f      	ldr	r1, [pc, #188]	; (4d50 <command_handler+0x1c8>)
    4c94:	4b3c      	ldr	r3, [pc, #240]	; (4d88 <command_handler+0x200>)
    4c96:	4798      	blx	r3
			break;
    4c98:	e040      	b.n	4d1c <command_handler+0x194>
			ss = stop();
    4c9a:	4b3c      	ldr	r3, [pc, #240]	; (4d8c <command_handler+0x204>)
    4c9c:	4798      	blx	r3
    4c9e:	4b3c      	ldr	r3, [pc, #240]	; (4d90 <command_handler+0x208>)
    4ca0:	7018      	strb	r0, [r3, #0]
			strcpy(cmd_txbuf,STOP_RESP);
    4ca2:	2208      	movs	r2, #8
    4ca4:	493b      	ldr	r1, [pc, #236]	; (4d94 <command_handler+0x20c>)
    4ca6:	482a      	ldr	r0, [pc, #168]	; (4d50 <command_handler+0x1c8>)
    4ca8:	4b30      	ldr	r3, [pc, #192]	; (4d6c <command_handler+0x1e4>)
    4caa:	4798      	blx	r3
			break;
    4cac:	e036      	b.n	4d1c <command_handler+0x194>
			switch (ss = start()) {
    4cae:	4b3a      	ldr	r3, [pc, #232]	; (4d98 <command_handler+0x210>)
    4cb0:	4798      	blx	r3
    4cb2:	4a37      	ldr	r2, [pc, #220]	; (4d90 <command_handler+0x208>)
    4cb4:	7010      	strb	r0, [r2, #0]
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d007      	beq.n	4cca <command_handler+0x142>
    4cba:	2802      	cmp	r0, #2
    4cbc:	d00b      	beq.n	4cd6 <command_handler+0x14e>
					strcpy(cmd_txbuf, EMPTY_RESP);
    4cbe:	2206      	movs	r2, #6
    4cc0:	4930      	ldr	r1, [pc, #192]	; (4d84 <command_handler+0x1fc>)
    4cc2:	4823      	ldr	r0, [pc, #140]	; (4d50 <command_handler+0x1c8>)
    4cc4:	4b29      	ldr	r3, [pc, #164]	; (4d6c <command_handler+0x1e4>)
    4cc6:	4798      	blx	r3
					break;
    4cc8:	e028      	b.n	4d1c <command_handler+0x194>
					strcpy(cmd_txbuf,START_RESP);
    4cca:	2208      	movs	r2, #8
    4ccc:	4933      	ldr	r1, [pc, #204]	; (4d9c <command_handler+0x214>)
    4cce:	4820      	ldr	r0, [pc, #128]	; (4d50 <command_handler+0x1c8>)
    4cd0:	4b26      	ldr	r3, [pc, #152]	; (4d6c <command_handler+0x1e4>)
    4cd2:	4798      	blx	r3
					break;
    4cd4:	e022      	b.n	4d1c <command_handler+0x194>
					strcpy(cmd_txbuf,GOING_RESP);
    4cd6:	220e      	movs	r2, #14
    4cd8:	4931      	ldr	r1, [pc, #196]	; (4da0 <command_handler+0x218>)
    4cda:	481d      	ldr	r0, [pc, #116]	; (4d50 <command_handler+0x1c8>)
    4cdc:	4b23      	ldr	r3, [pc, #140]	; (4d6c <command_handler+0x1e4>)
    4cde:	4798      	blx	r3
					break;
    4ce0:	e01c      	b.n	4d1c <command_handler+0x194>
  __ASM volatile ("dsb");
    4ce2:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    4ce6:	4a2f      	ldr	r2, [pc, #188]	; (4da4 <command_handler+0x21c>)
    4ce8:	4b2f      	ldr	r3, [pc, #188]	; (4da8 <command_handler+0x220>)
    4cea:	60da      	str	r2, [r3, #12]
    4cec:	f3bf 8f4f 	dsb	sy
    4cf0:	e7fe      	b.n	4cf0 <command_handler+0x168>
            if (is_corrupt()) strcpy(cmd_txbuf,"TRUE");
    4cf2:	4b2e      	ldr	r3, [pc, #184]	; (4dac <command_handler+0x224>)
    4cf4:	4798      	blx	r3
    4cf6:	2800      	cmp	r0, #0
    4cf8:	d005      	beq.n	4d06 <command_handler+0x17e>
    4cfa:	2205      	movs	r2, #5
    4cfc:	492c      	ldr	r1, [pc, #176]	; (4db0 <command_handler+0x228>)
    4cfe:	4814      	ldr	r0, [pc, #80]	; (4d50 <command_handler+0x1c8>)
    4d00:	4b1a      	ldr	r3, [pc, #104]	; (4d6c <command_handler+0x1e4>)
    4d02:	4798      	blx	r3
    4d04:	e00a      	b.n	4d1c <command_handler+0x194>
            else strcpy(cmd_txbuf,"FALSE");
    4d06:	2206      	movs	r2, #6
    4d08:	492a      	ldr	r1, [pc, #168]	; (4db4 <command_handler+0x22c>)
    4d0a:	4811      	ldr	r0, [pc, #68]	; (4d50 <command_handler+0x1c8>)
    4d0c:	4b17      	ldr	r3, [pc, #92]	; (4d6c <command_handler+0x1e4>)
    4d0e:	4798      	blx	r3
    4d10:	e004      	b.n	4d1c <command_handler+0x194>
	if (cmd_num == CMD_ERR) strcpy(cmd_txbuf,ERR_RESP);
    4d12:	2206      	movs	r2, #6
    4d14:	4928      	ldr	r1, [pc, #160]	; (4db8 <command_handler+0x230>)
    4d16:	480e      	ldr	r0, [pc, #56]	; (4d50 <command_handler+0x1c8>)
    4d18:	4b14      	ldr	r3, [pc, #80]	; (4d6c <command_handler+0x1e4>)
    4d1a:	4798      	blx	r3
    cmd_resp = true;
    4d1c:	2201      	movs	r2, #1
    4d1e:	4b27      	ldr	r3, [pc, #156]	; (4dbc <command_handler+0x234>)
    4d20:	701a      	strb	r2, [r3, #0]
	UDI_TMC_RECEIVE_BULKOUT_COMMAND();
    4d22:	2200      	movs	r2, #0
    4d24:	2100      	movs	r1, #0
    4d26:	2000      	movs	r0, #0
    4d28:	4b25      	ldr	r3, [pc, #148]	; (4dc0 <command_handler+0x238>)
    4d2a:	4798      	blx	r3
}
    4d2c:	b009      	add	sp, #36	; 0x24
    4d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	args[i++] = strtok(command, DELIMS);
    4d30:	2401      	movs	r4, #1
    4d32:	e743      	b.n	4bbc <command_handler+0x34>
    4d34:	0000a7d4 	.word	0x0000a7d4
    4d38:	00008145 	.word	0x00008145
    4d3c:	00002835 	.word	0x00002835
    4d40:	0000a7b0 	.word	0x0000a7b0
    4d44:	00007233 	.word	0x00007233
    4d48:	0000036d 	.word	0x0000036d
    4d4c:	0000a7d8 	.word	0x0000a7d8
    4d50:	200057b4 	.word	0x200057b4
    4d54:	00007449 	.word	0x00007449
    4d58:	00008435 	.word	0x00008435
    4d5c:	00007229 	.word	0x00007229
    4d60:	00007115 	.word	0x00007115
    4d64:	00002db5 	.word	0x00002db5
    4d68:	0000a7f4 	.word	0x0000a7f4
    4d6c:	000072b1 	.word	0x000072b1
    4d70:	0000a7dc 	.word	0x0000a7dc
    4d74:	0000a7e4 	.word	0x0000a7e4
    4d78:	0000a7ec 	.word	0x0000a7ec
    4d7c:	00002e3d 	.word	0x00002e3d
    4d80:	0000a800 	.word	0x0000a800
    4d84:	0000a808 	.word	0x0000a808
    4d88:	00002ebd 	.word	0x00002ebd
    4d8c:	00002915 	.word	0x00002915
    4d90:	200000ce 	.word	0x200000ce
    4d94:	0000a810 	.word	0x0000a810
    4d98:	000029b9 	.word	0x000029b9
    4d9c:	0000a818 	.word	0x0000a818
    4da0:	0000a820 	.word	0x0000a820
    4da4:	05fa0004 	.word	0x05fa0004
    4da8:	e000ed00 	.word	0xe000ed00
    4dac:	00002b3d 	.word	0x00002b3d
    4db0:	0000a830 	.word	0x0000a830
    4db4:	0000a838 	.word	0x0000a838
    4db8:	0000a7f8 	.word	0x0000a7f8
    4dbc:	200004ac 	.word	0x200004ac
    4dc0:	0000054d 	.word	0x0000054d

00004dc4 <main_tmc_enable>:
{
    4dc4:	b510      	push	{r4, lr}
   g_bulkIN_xfer_active = true;
    4dc6:	2201      	movs	r2, #1
    4dc8:	4b04      	ldr	r3, [pc, #16]	; (4ddc <main_tmc_enable+0x18>)
    4dca:	701a      	strb	r2, [r3, #0]
   UDI_TMC_RECEIVE_BULKOUT_COMMAND();
    4dcc:	2200      	movs	r2, #0
    4dce:	2100      	movs	r1, #0
    4dd0:	2000      	movs	r0, #0
    4dd2:	4b03      	ldr	r3, [pc, #12]	; (4de0 <main_tmc_enable+0x1c>)
    4dd4:	4798      	blx	r3
}
    4dd6:	2001      	movs	r0, #1
    4dd8:	bd10      	pop	{r4, pc}
    4dda:	46c0      	nop			; (mov r8, r8)
    4ddc:	20002bcc 	.word	0x20002bcc
    4de0:	0000054d 	.word	0x0000054d

00004de4 <main_tmc_disable>:
{
    4de4:	b510      	push	{r4, lr}
   abort_tmc_bulkIN_transfer();  // Abort any active transfer
    4de6:	4b01      	ldr	r3, [pc, #4]	; (4dec <main_tmc_disable+0x8>)
    4de8:	4798      	blx	r3
}
    4dea:	bd10      	pop	{r4, pc}
    4dec:	00004b65 	.word	0x00004b65

00004df0 <main_sof_action>:
{
    4df0:	b510      	push	{r4, lr}
   if ( g_bulkIN_xfer_active )
    4df2:	4b05      	ldr	r3, [pc, #20]	; (4e08 <main_sof_action+0x18>)
    4df4:	781b      	ldrb	r3, [r3, #0]
    4df6:	2b00      	cmp	r3, #0
    4df8:	d100      	bne.n	4dfc <main_sof_action+0xc>
}
    4dfa:	bd10      	pop	{r4, pc}
      uint16_t frame_number = udd_get_frame_number();
    4dfc:	4b03      	ldr	r3, [pc, #12]	; (4e0c <main_sof_action+0x1c>)
    4dfe:	4798      	blx	r3
      ui_process(frame_number);
    4e00:	4b03      	ldr	r3, [pc, #12]	; (4e10 <main_sof_action+0x20>)
    4e02:	4798      	blx	r3
}
    4e04:	e7f9      	b.n	4dfa <main_sof_action+0xa>
    4e06:	46c0      	nop			; (mov r8, r8)
    4e08:	20002bcc 	.word	0x20002bcc
    4e0c:	00002219 	.word	0x00002219
    4e10:	0000327d 	.word	0x0000327d

00004e14 <main_suspend_action>:
{
    4e14:	b510      	push	{r4, lr}
   ui_powerdown();
    4e16:	4b01      	ldr	r3, [pc, #4]	; (4e1c <main_suspend_action+0x8>)
    4e18:	4798      	blx	r3
}
    4e1a:	bd10      	pop	{r4, pc}
    4e1c:	0000326b 	.word	0x0000326b

00004e20 <main_resume_action>:
{
    4e20:	b510      	push	{r4, lr}
   ui_wakeup();
    4e22:	4b01      	ldr	r3, [pc, #4]	; (4e28 <main_resume_action+0x8>)
    4e24:	4798      	blx	r3
}
    4e26:	bd10      	pop	{r4, pc}
    4e28:	0000326d 	.word	0x0000326d

00004e2c <main_initiate_abort_bulkOUT>:
   g_bulk_abort_response.initiate_abort.usbtmc_status =
    4e2c:	4b04      	ldr	r3, [pc, #16]	; (4e40 <main_initiate_abort_bulkOUT+0x14>)
    4e2e:	2281      	movs	r2, #129	; 0x81
    4e30:	701a      	strb	r2, [r3, #0]
   g_bulk_abort_response.initiate_abort.bTag = 0;
    4e32:	2200      	movs	r2, #0
    4e34:	705a      	strb	r2, [r3, #1]
   udd_g_ctrlreq.payload = (uint8_t*)&g_bulk_abort_response.initiate_abort;
    4e36:	4a03      	ldr	r2, [pc, #12]	; (4e44 <main_initiate_abort_bulkOUT+0x18>)
    4e38:	6093      	str	r3, [r2, #8]
   udd_g_ctrlreq.payload_size = sizeof(TMC_initiate_abort_bulk_xfer_response_t);
    4e3a:	2302      	movs	r3, #2
    4e3c:	8193      	strh	r3, [r2, #12]
}
    4e3e:	4770      	bx	lr
    4e40:	20002bd0 	.word	0x20002bd0
    4e44:	20002f28 	.word	0x20002f28

00004e48 <main_check_abort_bulkOUT_status>:
   g_bulk_abort_response.check_abortOUT.nbytes_rxd = 0;
    4e48:	4b06      	ldr	r3, [pc, #24]	; (4e64 <main_check_abort_bulkOUT_status+0x1c>)
    4e4a:	2200      	movs	r2, #0
    4e4c:	605a      	str	r2, [r3, #4]
   g_bulk_abort_response.check_abortOUT.reserved[0] = 0;
    4e4e:	705a      	strb	r2, [r3, #1]
   g_bulk_abort_response.check_abortOUT.reserved[1] = 0;
    4e50:	709a      	strb	r2, [r3, #2]
   g_bulk_abort_response.check_abortOUT.reserved[2] = 0;
    4e52:	70da      	strb	r2, [r3, #3]
   g_bulk_abort_response.check_abortOUT.usbtmc_status = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
    4e54:	3281      	adds	r2, #129	; 0x81
    4e56:	701a      	strb	r2, [r3, #0]
   udd_g_ctrlreq.payload = (uint8_t*)&g_bulk_abort_response.check_abortOUT;
    4e58:	4a03      	ldr	r2, [pc, #12]	; (4e68 <main_check_abort_bulkOUT_status+0x20>)
    4e5a:	6093      	str	r3, [r2, #8]
   udd_g_ctrlreq.payload_size = sizeof(TMC_check_abort_bulkOUT_status_response_t);
    4e5c:	2308      	movs	r3, #8
    4e5e:	8193      	strh	r3, [r2, #12]
}
    4e60:	4770      	bx	lr
    4e62:	46c0      	nop			; (mov r8, r8)
    4e64:	20002bd0 	.word	0x20002bd0
    4e68:	20002f28 	.word	0x20002f28

00004e6c <main_initiate_abort_bulkIN>:
{
    4e6c:	b510      	push	{r4, lr}
   if ( INVALID_bTag != activeDataRequest.bTag )
    4e6e:	4b09      	ldr	r3, [pc, #36]	; (4e94 <main_initiate_abort_bulkIN+0x28>)
    4e70:	781b      	ldrb	r3, [r3, #0]
    4e72:	2b00      	cmp	r3, #0
    4e74:	d10a      	bne.n	4e8c <main_initiate_abort_bulkIN+0x20>
      g_bulk_abort_response.initiate_abort.usbtmc_status =
    4e76:	4b08      	ldr	r3, [pc, #32]	; (4e98 <main_initiate_abort_bulkIN+0x2c>)
    4e78:	2281      	movs	r2, #129	; 0x81
    4e7a:	701a      	strb	r2, [r3, #0]
   g_bulk_abort_response.initiate_abort.bTag = activeDataRequest.bTag;
    4e7c:	4a05      	ldr	r2, [pc, #20]	; (4e94 <main_initiate_abort_bulkIN+0x28>)
    4e7e:	7812      	ldrb	r2, [r2, #0]
    4e80:	705a      	strb	r2, [r3, #1]
   udd_g_ctrlreq.payload = (uint8_t*)&g_bulk_abort_response.initiate_abort;
    4e82:	4a06      	ldr	r2, [pc, #24]	; (4e9c <main_initiate_abort_bulkIN+0x30>)
    4e84:	6093      	str	r3, [r2, #8]
   udd_g_ctrlreq.payload_size = sizeof(TMC_initiate_abort_bulk_xfer_response_t);
    4e86:	2302      	movs	r3, #2
    4e88:	8193      	strh	r3, [r2, #12]
}
    4e8a:	bd10      	pop	{r4, pc}
      abort_tmc_bulkIN_transfer();     // Reset the active transfer
    4e8c:	4b04      	ldr	r3, [pc, #16]	; (4ea0 <main_initiate_abort_bulkIN+0x34>)
    4e8e:	4798      	blx	r3
    4e90:	e7f1      	b.n	4e76 <main_initiate_abort_bulkIN+0xa>
    4e92:	46c0      	nop			; (mov r8, r8)
    4e94:	200004a0 	.word	0x200004a0
    4e98:	20002bd0 	.word	0x20002bd0
    4e9c:	20002f28 	.word	0x20002f28
    4ea0:	00004b65 	.word	0x00004b65

00004ea4 <main_check_abort_bulkIN_status>:
   g_bulk_abort_response.check_abortIN.nbytes_txd =
    4ea4:	4b0a      	ldr	r3, [pc, #40]	; (4ed0 <main_check_abort_bulkIN_status+0x2c>)
                                       activeDataRequest.numBytesTransferred;
    4ea6:	4a0b      	ldr	r2, [pc, #44]	; (4ed4 <main_check_abort_bulkIN_status+0x30>)
   g_bulk_abort_response.check_abortIN.nbytes_txd =
    4ea8:	6892      	ldr	r2, [r2, #8]
    4eaa:	605a      	str	r2, [r3, #4]
   g_bulk_abort_response.check_abortIN.bmAbortBulkIn = 0;
    4eac:	2200      	movs	r2, #0
    4eae:	705a      	strb	r2, [r3, #1]
   g_bulk_abort_response.check_abortIN.reserved[0] = 0;
    4eb0:	709a      	strb	r2, [r3, #2]
   g_bulk_abort_response.check_abortIN.reserved[1] = 0;
    4eb2:	70da      	strb	r2, [r3, #3]
                  g_bulkIN_xfer_active ? TMC_STATUS_SUCCESS :
    4eb4:	4b08      	ldr	r3, [pc, #32]	; (4ed8 <main_check_abort_bulkIN_status+0x34>)
    4eb6:	781a      	ldrb	r2, [r3, #0]
   g_bulk_abort_response.check_abortIN.usbtmc_status =
    4eb8:	2301      	movs	r3, #1
    4eba:	2a00      	cmp	r2, #0
    4ebc:	d100      	bne.n	4ec0 <main_check_abort_bulkIN_status+0x1c>
    4ebe:	3380      	adds	r3, #128	; 0x80
    4ec0:	4a03      	ldr	r2, [pc, #12]	; (4ed0 <main_check_abort_bulkIN_status+0x2c>)
    4ec2:	7013      	strb	r3, [r2, #0]
   udd_g_ctrlreq.payload = (uint8_t*)&g_bulk_abort_response.check_abortIN;
    4ec4:	4b05      	ldr	r3, [pc, #20]	; (4edc <main_check_abort_bulkIN_status+0x38>)
    4ec6:	609a      	str	r2, [r3, #8]
   udd_g_ctrlreq.payload_size = sizeof(TMC_check_abort_bulkIN_status_response_t);
    4ec8:	2208      	movs	r2, #8
    4eca:	819a      	strh	r2, [r3, #12]
}
    4ecc:	4770      	bx	lr
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	20002bd0 	.word	0x20002bd0
    4ed4:	200004a0 	.word	0x200004a0
    4ed8:	20002bcc 	.word	0x20002bcc
    4edc:	20002f28 	.word	0x20002f28

00004ee0 <main_initiate_clear>:
   g_bulk_abort_response.initiate_clear = TMC_STATUS_SUCCESS;
    4ee0:	4903      	ldr	r1, [pc, #12]	; (4ef0 <main_initiate_clear+0x10>)
    4ee2:	2201      	movs	r2, #1
    4ee4:	700a      	strb	r2, [r1, #0]
   udd_g_ctrlreq.payload = &g_bulk_abort_response.initiate_clear;
    4ee6:	4b03      	ldr	r3, [pc, #12]	; (4ef4 <main_initiate_clear+0x14>)
    4ee8:	6099      	str	r1, [r3, #8]
   udd_g_ctrlreq.payload_size = sizeof(uint8_t);
    4eea:	819a      	strh	r2, [r3, #12]
}
    4eec:	4770      	bx	lr
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	20002bd0 	.word	0x20002bd0
    4ef4:	20002f28 	.word	0x20002f28

00004ef8 <main_check_clear_status>:
   g_bulk_abort_response.check_clear.usbtmc_status = TMC_STATUS_SUCCESS;
    4ef8:	4b04      	ldr	r3, [pc, #16]	; (4f0c <main_check_clear_status+0x14>)
    4efa:	2201      	movs	r2, #1
    4efc:	701a      	strb	r2, [r3, #0]
   g_bulk_abort_response.check_clear.bmClear = 0;
    4efe:	2200      	movs	r2, #0
    4f00:	705a      	strb	r2, [r3, #1]
   udd_g_ctrlreq.payload = (uint8_t*)&g_bulk_abort_response.check_clear;
    4f02:	4a03      	ldr	r2, [pc, #12]	; (4f10 <main_check_clear_status+0x18>)
    4f04:	6093      	str	r3, [r2, #8]
   udd_g_ctrlreq.payload_size = sizeof(TMC_check_clear_status_response_t);
    4f06:	2302      	movs	r3, #2
    4f08:	8193      	strh	r3, [r2, #12]
}
    4f0a:	4770      	bx	lr
    4f0c:	20002bd0 	.word	0x20002bd0
    4f10:	20002f28 	.word	0x20002f28

00004f14 <init>:
void init(void) {
    4f14:	b510      	push	{r4, lr}
	cpu_irq_enable();
    4f16:	2401      	movs	r4, #1
    4f18:	4b0c      	ldr	r3, [pc, #48]	; (4f4c <init+0x38>)
    4f1a:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("dmb");
    4f1c:	f3bf 8f5f 	dmb	sy
    4f20:	b662      	cpsie	i
	system_init();
    4f22:	4b0b      	ldr	r3, [pc, #44]	; (4f50 <init+0x3c>)
    4f24:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
    4f26:	4b0b      	ldr	r3, [pc, #44]	; (4f54 <init+0x40>)
    4f28:	2200      	movs	r2, #0
    4f2a:	701a      	strb	r2, [r3, #0]
    4f2c:	705a      	strb	r2, [r3, #1]
    4f2e:	709a      	strb	r2, [r3, #2]
    4f30:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4f32:	711c      	strb	r4, [r3, #4]
	init_timer();
    4f34:	4b08      	ldr	r3, [pc, #32]	; (4f58 <init+0x44>)
    4f36:	4798      	blx	r3
	initADC();
    4f38:	4b08      	ldr	r3, [pc, #32]	; (4f5c <init+0x48>)
    4f3a:	4798      	blx	r3
	sampling_init();
    4f3c:	4b08      	ldr	r3, [pc, #32]	; (4f60 <init+0x4c>)
    4f3e:	4798      	blx	r3
	ui_init();
    4f40:	4b08      	ldr	r3, [pc, #32]	; (4f64 <init+0x50>)
    4f42:	4798      	blx	r3
	udc_start();
    4f44:	4b08      	ldr	r3, [pc, #32]	; (4f68 <init+0x54>)
    4f46:	4798      	blx	r3
}
    4f48:	bd10      	pop	{r4, pc}
    4f4a:	46c0      	nop			; (mov r8, r8)
    4f4c:	200000d4 	.word	0x200000d4
    4f50:	00004a19 	.word	0x00004a19
    4f54:	20002bf8 	.word	0x20002bf8
    4f58:	00002f15 	.word	0x00002f15
    4f5c:	000003a1 	.word	0x000003a1
    4f60:	000028d1 	.word	0x000028d1
    4f64:	00003269 	.word	0x00003269
    4f68:	0000077d 	.word	0x0000077d

00004f6c <main>:
int main(void) {
    4f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f6e:	46c6      	mov	lr, r8
    4f70:	b500      	push	{lr}
	init();
    4f72:	4b28      	ldr	r3, [pc, #160]	; (5014 <main+0xa8>)
    4f74:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    4f76:	4f28      	ldr	r7, [pc, #160]	; (5018 <main+0xac>)
    4f78:	2400      	movs	r4, #0
    4f7a:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
    4f7c:	4d27      	ldr	r5, [pc, #156]	; (501c <main+0xb0>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    4f7e:	46b8      	mov	r8, r7
    4f80:	e010      	b.n	4fa4 <main+0x38>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    4f82:	0019      	movs	r1, r3
		lock_ptr++;
    4f84:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    4f86:	1c4b      	adds	r3, r1, #1
    4f88:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    4f8a:	7810      	ldrb	r0, [r2, #0]
    4f8c:	2800      	cmp	r0, #0
    4f8e:	d0f8      	beq.n	4f82 <main+0x16>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    4f90:	2b00      	cmp	r3, #0
    4f92:	d111      	bne.n	4fb8 <main+0x4c>
		cpu_irq_enable();
    4f94:	2301      	movs	r3, #1
    4f96:	4642      	mov	r2, r8
    4f98:	7013      	strb	r3, [r2, #0]
    4f9a:	f3bf 8f5f 	dmb	sy
    4f9e:	b662      	cpsie	i
		readData();
    4fa0:	4b1f      	ldr	r3, [pc, #124]	; (5020 <main+0xb4>)
    4fa2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    4fa4:	b672      	cpsid	i
    4fa6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4faa:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
    4fac:	782b      	ldrb	r3, [r5, #0]
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d1f0      	bne.n	4f94 <main+0x28>
    4fb2:	0021      	movs	r1, r4
    4fb4:	4a19      	ldr	r2, [pc, #100]	; (501c <main+0xb0>)
    4fb6:	e7e5      	b.n	4f84 <main+0x18>
    4fb8:	b672      	cpsid	i
    4fba:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    4fbe:	4b16      	ldr	r3, [pc, #88]	; (5018 <main+0xac>)
    4fc0:	701c      	strb	r4, [r3, #0]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    4fc2:	4b18      	ldr	r3, [pc, #96]	; (5024 <main+0xb8>)
    4fc4:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    4fc6:	051b      	lsls	r3, r3, #20
    4fc8:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    4fca:	2b02      	cmp	r3, #2
    4fcc:	d805      	bhi.n	4fda <main+0x6e>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    4fce:	4a16      	ldr	r2, [pc, #88]	; (5028 <main+0xbc>)
    4fd0:	6850      	ldr	r0, [r2, #4]
    4fd2:	23c0      	movs	r3, #192	; 0xc0
    4fd4:	009b      	lsls	r3, r3, #2
    4fd6:	4303      	orrs	r3, r0
    4fd8:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    4fda:	2902      	cmp	r1, #2
    4fdc:	d90b      	bls.n	4ff6 <main+0x8a>
    4fde:	2903      	cmp	r1, #3
    4fe0:	d011      	beq.n	5006 <main+0x9a>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    4fe2:	2201      	movs	r2, #1
    4fe4:	4b0c      	ldr	r3, [pc, #48]	; (5018 <main+0xac>)
    4fe6:	701a      	strb	r2, [r3, #0]
    4fe8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4fec:	b662      	cpsie	i
  __ASM volatile ("dsb");
    4fee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4ff2:	bf30      	wfi
    4ff4:	e7d4      	b.n	4fa0 <main+0x34>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4ff6:	4a0d      	ldr	r2, [pc, #52]	; (502c <main+0xc0>)
    4ff8:	6913      	ldr	r3, [r2, #16]
    4ffa:	2004      	movs	r0, #4
    4ffc:	4383      	bics	r3, r0
    4ffe:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    5000:	4b0b      	ldr	r3, [pc, #44]	; (5030 <main+0xc4>)
    5002:	7059      	strb	r1, [r3, #1]
    5004:	e7ed      	b.n	4fe2 <main+0x76>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    5006:	4a09      	ldr	r2, [pc, #36]	; (502c <main+0xc0>)
    5008:	6913      	ldr	r3, [r2, #16]
    500a:	2104      	movs	r1, #4
    500c:	430b      	orrs	r3, r1
    500e:	6113      	str	r3, [r2, #16]
    5010:	e7e7      	b.n	4fe2 <main+0x76>
    5012:	46c0      	nop			; (mov r8, r8)
    5014:	00004f15 	.word	0x00004f15
    5018:	200000d4 	.word	0x200000d4
    501c:	20002bf8 	.word	0x20002bf8
    5020:	000029fd 	.word	0x000029fd
    5024:	41002000 	.word	0x41002000
    5028:	41004000 	.word	0x41004000
    502c:	e000ed00 	.word	0xe000ed00
    5030:	40000400 	.word	0x40000400

00005034 <main_req_dev_dep_msg_in_received>:
bool main_req_dev_dep_msg_in_received(TMC_bulkOUT_request_dev_dep_msg_in_header_t const* header) {
    5034:	b570      	push	{r4, r5, r6, lr}
	if (activeDataRequest.bTag != header->header.bTag) {
    5036:	7843      	ldrb	r3, [r0, #1]
    5038:	4a34      	ldr	r2, [pc, #208]	; (510c <main_req_dev_dep_msg_in_received+0xd8>)
    503a:	7812      	ldrb	r2, [r2, #0]
    503c:	429a      	cmp	r2, r3
    503e:	d012      	beq.n	5066 <main_req_dev_dep_msg_in_received+0x32>
		activeDataRequest.bTag = header->header.bTag;
    5040:	4a32      	ldr	r2, [pc, #200]	; (510c <main_req_dev_dep_msg_in_received+0xd8>)
    5042:	7013      	strb	r3, [r2, #0]
		if (header->transferSize < ADC_BYTES_PER_SAMPLE) return 0;
    5044:	7903      	ldrb	r3, [r0, #4]
    5046:	7942      	ldrb	r2, [r0, #5]
    5048:	0212      	lsls	r2, r2, #8
    504a:	431a      	orrs	r2, r3
    504c:	7983      	ldrb	r3, [r0, #6]
    504e:	041b      	lsls	r3, r3, #16
    5050:	431a      	orrs	r2, r3
    5052:	79c3      	ldrb	r3, [r0, #7]
    5054:	061b      	lsls	r3, r3, #24
    5056:	4313      	orrs	r3, r2
    5058:	2000      	movs	r0, #0
    505a:	2b11      	cmp	r3, #17
    505c:	d94b      	bls.n	50f6 <main_req_dev_dep_msg_in_received+0xc2>
		activeDataRequest.numBytesRemaining = header->transferSize;
    505e:	4a2b      	ldr	r2, [pc, #172]	; (510c <main_req_dev_dep_msg_in_received+0xd8>)
    5060:	6053      	str	r3, [r2, #4]
		activeDataRequest.numBytesTransferred = 0;
    5062:	2300      	movs	r3, #0
    5064:	6093      	str	r3, [r2, #8]
	if (0 == activeDataRequest.numBytesRemaining) return 0;
    5066:	4b29      	ldr	r3, [pc, #164]	; (510c <main_req_dev_dep_msg_in_received+0xd8>)
    5068:	685c      	ldr	r4, [r3, #4]
    506a:	2000      	movs	r0, #0
    506c:	2c00      	cmp	r4, #0
    506e:	d042      	beq.n	50f6 <main_req_dev_dep_msg_in_received+0xc2>
    if (cmd_resp) {
    5070:	4b27      	ldr	r3, [pc, #156]	; (5110 <main_req_dev_dep_msg_in_received+0xdc>)
    5072:	781b      	ldrb	r3, [r3, #0]
    5074:	2b00      	cmp	r3, #0
    5076:	d03f      	beq.n	50f8 <main_req_dev_dep_msg_in_received+0xc4>
        strcpy(deviceDataResponse.data, cmd_txbuf);
    5078:	4d26      	ldr	r5, [pc, #152]	; (5114 <main_req_dev_dep_msg_in_received+0xe0>)
    507a:	0029      	movs	r1, r5
    507c:	4826      	ldr	r0, [pc, #152]	; (5118 <main_req_dev_dep_msg_in_received+0xe4>)
    507e:	300c      	adds	r0, #12
    5080:	4b26      	ldr	r3, [pc, #152]	; (511c <main_req_dev_dep_msg_in_received+0xe8>)
    5082:	4798      	blx	r3
        numBytesTransferred = min(min(activeDataRequest.numBytesRemaining, DEVICE_DATA_BUFFER_SIZE), strlen(cmd_txbuf));
    5084:	0028      	movs	r0, r5
    5086:	4b26      	ldr	r3, [pc, #152]	; (5120 <main_req_dev_dep_msg_in_received+0xec>)
    5088:	4798      	blx	r3
    508a:	0003      	movs	r3, r0
    508c:	0002      	movs	r2, r0
    508e:	4925      	ldr	r1, [pc, #148]	; (5124 <main_req_dev_dep_msg_in_received+0xf0>)
    5090:	428c      	cmp	r4, r1
    5092:	d900      	bls.n	5096 <main_req_dev_dep_msg_in_received+0x62>
    5094:	000c      	movs	r4, r1
    5096:	0020      	movs	r0, r4
    5098:	4294      	cmp	r4, r2
    509a:	d900      	bls.n	509e <main_req_dev_dep_msg_in_received+0x6a>
    509c:	0018      	movs	r0, r3
        cmd_resp = false;
    509e:	2200      	movs	r2, #0
    50a0:	4b1b      	ldr	r3, [pc, #108]	; (5110 <main_req_dev_dep_msg_in_received+0xdc>)
    50a2:	701a      	strb	r2, [r3, #0]
	if (numBytesTransferred == 0) {
    50a4:	2800      	cmp	r0, #0
    50a6:	d103      	bne.n	50b0 <main_req_dev_dep_msg_in_received+0x7c>
		deviceDataResponse.data[0] = NULL;
    50a8:	2200      	movs	r2, #0
    50aa:	4b1b      	ldr	r3, [pc, #108]	; (5118 <main_req_dev_dep_msg_in_received+0xe4>)
    50ac:	731a      	strb	r2, [r3, #12]
		numBytesTransferred = 1;
    50ae:	3001      	adds	r0, #1
	activeDataRequest.numBytesRemaining -= numBytesTransferred;
    50b0:	4916      	ldr	r1, [pc, #88]	; (510c <main_req_dev_dep_msg_in_received+0xd8>)
    50b2:	684b      	ldr	r3, [r1, #4]
    50b4:	1a1d      	subs	r5, r3, r0
    50b6:	604d      	str	r5, [r1, #4]
	activeDataRequest.numBytesTransferred += numBytesTransferred;
    50b8:	688b      	ldr	r3, [r1, #8]
    50ba:	181b      	adds	r3, r3, r0
    50bc:	608b      	str	r3, [r1, #8]
	bulkInHeader->MsgID = TMC_BULKIN_DEV_DEP_MSG_IN;
    50be:	4b16      	ldr	r3, [pc, #88]	; (5118 <main_req_dev_dep_msg_in_received+0xe4>)
    50c0:	2402      	movs	r4, #2
    50c2:	701c      	strb	r4, [r3, #0]
	bulkInHeader->bTag = activeDataRequest.bTag;
    50c4:	7809      	ldrb	r1, [r1, #0]
    50c6:	7059      	strb	r1, [r3, #1]
	bulkInHeader->bTagInverse = ~activeDataRequest.bTag;
    50c8:	43c9      	mvns	r1, r1
    50ca:	7099      	strb	r1, [r3, #2]
	bulkInHeader->reserved = 0;
    50cc:	2100      	movs	r1, #0
    50ce:	70d9      	strb	r1, [r3, #3]
	responseHeader->transferSize = numBytesTransferred;
    50d0:	6058      	str	r0, [r3, #4]
    responseHeader->bmTransferAttributes = (activeDataRequest.numBytesRemaining > 0) ? 0 : 1;
    50d2:	426a      	negs	r2, r5
    50d4:	416a      	adcs	r2, r5
    50d6:	721a      	strb	r2, [r3, #8]
	responseHeader->reserved[0] = 0;
    50d8:	7259      	strb	r1, [r3, #9]
	responseHeader->reserved[1] = 0;
    50da:	7299      	strb	r1, [r3, #10]
	responseHeader->reserved[2] = 0;
    50dc:	72d9      	strb	r1, [r3, #11]
    if ((numBytesTransferred % 64) == 52) numBytesTransferred++;
    50de:	233f      	movs	r3, #63	; 0x3f
    50e0:	4003      	ands	r3, r0
    50e2:	3b34      	subs	r3, #52	; 0x34
    50e4:	4259      	negs	r1, r3
    50e6:	4159      	adcs	r1, r3
    50e8:	1840      	adds	r0, r0, r1
	return 1 == udi_tmc_bulk_in_run((uint8_t*)&deviceDataResponse, (sizeof(TMC_bulkIN_dev_dep_msg_in_header_t) + numBytesTransferred), main_req_dev_dep_msg_in_sent);
    50ea:	0001      	movs	r1, r0
    50ec:	310c      	adds	r1, #12
    50ee:	4a0e      	ldr	r2, [pc, #56]	; (5128 <main_req_dev_dep_msg_in_received+0xf4>)
    50f0:	4809      	ldr	r0, [pc, #36]	; (5118 <main_req_dev_dep_msg_in_received+0xe4>)
    50f2:	4b0e      	ldr	r3, [pc, #56]	; (512c <main_req_dev_dep_msg_in_received+0xf8>)
    50f4:	4798      	blx	r3
}
    50f6:	bd70      	pop	{r4, r5, r6, pc}
    else numBytesTransferred = send_ADC_data(deviceDataResponse.data, min(activeDataRequest.numBytesRemaining, DEVICE_DATA_BUFFER_SIZE));
    50f8:	4b0a      	ldr	r3, [pc, #40]	; (5124 <main_req_dev_dep_msg_in_received+0xf0>)
    50fa:	429c      	cmp	r4, r3
    50fc:	d900      	bls.n	5100 <main_req_dev_dep_msg_in_received+0xcc>
    50fe:	001c      	movs	r4, r3
    5100:	b2a1      	uxth	r1, r4
    5102:	4805      	ldr	r0, [pc, #20]	; (5118 <main_req_dev_dep_msg_in_received+0xe4>)
    5104:	300c      	adds	r0, #12
    5106:	4b0a      	ldr	r3, [pc, #40]	; (5130 <main_req_dev_dep_msg_in_received+0xfc>)
    5108:	4798      	blx	r3
    510a:	e7cb      	b.n	50a4 <main_req_dev_dep_msg_in_received+0x70>
    510c:	200004a0 	.word	0x200004a0
    5110:	200004ac 	.word	0x200004ac
    5114:	200057b4 	.word	0x200057b4
    5118:	200004b0 	.word	0x200004b0
    511c:	000074c1 	.word	0x000074c1
    5120:	000074d1 	.word	0x000074d1
    5124:	00002710 	.word	0x00002710
    5128:	00004b51 	.word	0x00004b51
    512c:	00000531 	.word	0x00000531
    5130:	00002aad 	.word	0x00002aad

00005134 <floor>:
    5134:	4a45      	ldr	r2, [pc, #276]	; (524c <floor+0x118>)
    5136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5138:	4657      	mov	r7, sl
    513a:	4692      	mov	sl, r2
    513c:	004b      	lsls	r3, r1, #1
    513e:	0d5b      	lsrs	r3, r3, #21
    5140:	449a      	add	sl, r3
    5142:	464e      	mov	r6, r9
    5144:	4645      	mov	r5, r8
    5146:	46de      	mov	lr, fp
    5148:	4652      	mov	r2, sl
    514a:	b5e0      	push	{r5, r6, r7, lr}
    514c:	000c      	movs	r4, r1
    514e:	0005      	movs	r5, r0
    5150:	000e      	movs	r6, r1
    5152:	4689      	mov	r9, r1
    5154:	0007      	movs	r7, r0
    5156:	2a13      	cmp	r2, #19
    5158:	dc22      	bgt.n	51a0 <floor+0x6c>
    515a:	2a00      	cmp	r2, #0
    515c:	db47      	blt.n	51ee <floor+0xba>
    515e:	4652      	mov	r2, sl
    5160:	4b3b      	ldr	r3, [pc, #236]	; (5250 <floor+0x11c>)
    5162:	4113      	asrs	r3, r2
    5164:	4698      	mov	r8, r3
    5166:	000b      	movs	r3, r1
    5168:	4642      	mov	r2, r8
    516a:	4013      	ands	r3, r2
    516c:	4303      	orrs	r3, r0
    516e:	d011      	beq.n	5194 <floor+0x60>
    5170:	4a38      	ldr	r2, [pc, #224]	; (5254 <floor+0x120>)
    5172:	4b39      	ldr	r3, [pc, #228]	; (5258 <floor+0x124>)
    5174:	f000 ffea 	bl	614c <__aeabi_dadd>
    5178:	2200      	movs	r2, #0
    517a:	2300      	movs	r3, #0
    517c:	f000 fa12 	bl	55a4 <__aeabi_dcmpgt>
    5180:	2800      	cmp	r0, #0
    5182:	d005      	beq.n	5190 <floor+0x5c>
    5184:	2c00      	cmp	r4, #0
    5186:	db41      	blt.n	520c <floor+0xd8>
    5188:	464e      	mov	r6, r9
    518a:	4643      	mov	r3, r8
    518c:	2700      	movs	r7, #0
    518e:	439e      	bics	r6, r3
    5190:	0038      	movs	r0, r7
    5192:	0031      	movs	r1, r6
    5194:	bc3c      	pop	{r2, r3, r4, r5}
    5196:	4690      	mov	r8, r2
    5198:	4699      	mov	r9, r3
    519a:	46a2      	mov	sl, r4
    519c:	46ab      	mov	fp, r5
    519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51a0:	4652      	mov	r2, sl
    51a2:	2a33      	cmp	r2, #51	; 0x33
    51a4:	dd08      	ble.n	51b8 <floor+0x84>
    51a6:	2380      	movs	r3, #128	; 0x80
    51a8:	00db      	lsls	r3, r3, #3
    51aa:	459a      	cmp	sl, r3
    51ac:	d1f2      	bne.n	5194 <floor+0x60>
    51ae:	0002      	movs	r2, r0
    51b0:	000b      	movs	r3, r1
    51b2:	f000 ffcb 	bl	614c <__aeabi_dadd>
    51b6:	e7ed      	b.n	5194 <floor+0x60>
    51b8:	4a28      	ldr	r2, [pc, #160]	; (525c <floor+0x128>)
    51ba:	4694      	mov	ip, r2
    51bc:	2201      	movs	r2, #1
    51be:	4463      	add	r3, ip
    51c0:	4252      	negs	r2, r2
    51c2:	40da      	lsrs	r2, r3
    51c4:	4693      	mov	fp, r2
    51c6:	4202      	tst	r2, r0
    51c8:	d0e4      	beq.n	5194 <floor+0x60>
    51ca:	4a22      	ldr	r2, [pc, #136]	; (5254 <floor+0x120>)
    51cc:	4b22      	ldr	r3, [pc, #136]	; (5258 <floor+0x124>)
    51ce:	f000 ffbd 	bl	614c <__aeabi_dadd>
    51d2:	2200      	movs	r2, #0
    51d4:	2300      	movs	r3, #0
    51d6:	f000 f9e5 	bl	55a4 <__aeabi_dcmpgt>
    51da:	2800      	cmp	r0, #0
    51dc:	d0d8      	beq.n	5190 <floor+0x5c>
    51de:	2c00      	cmp	r4, #0
    51e0:	db1a      	blt.n	5218 <floor+0xe4>
    51e2:	465b      	mov	r3, fp
    51e4:	464e      	mov	r6, r9
    51e6:	439f      	bics	r7, r3
    51e8:	0038      	movs	r0, r7
    51ea:	0031      	movs	r1, r6
    51ec:	e7d2      	b.n	5194 <floor+0x60>
    51ee:	4a19      	ldr	r2, [pc, #100]	; (5254 <floor+0x120>)
    51f0:	4b19      	ldr	r3, [pc, #100]	; (5258 <floor+0x124>)
    51f2:	f000 ffab 	bl	614c <__aeabi_dadd>
    51f6:	2200      	movs	r2, #0
    51f8:	2300      	movs	r3, #0
    51fa:	f000 f9d3 	bl	55a4 <__aeabi_dcmpgt>
    51fe:	2800      	cmp	r0, #0
    5200:	d0c6      	beq.n	5190 <floor+0x5c>
    5202:	2c00      	cmp	r4, #0
    5204:	db16      	blt.n	5234 <floor+0x100>
    5206:	2700      	movs	r7, #0
    5208:	2600      	movs	r6, #0
    520a:	e7c1      	b.n	5190 <floor+0x5c>
    520c:	2380      	movs	r3, #128	; 0x80
    520e:	4652      	mov	r2, sl
    5210:	035b      	lsls	r3, r3, #13
    5212:	4113      	asrs	r3, r2
    5214:	4499      	add	r9, r3
    5216:	e7b7      	b.n	5188 <floor+0x54>
    5218:	4653      	mov	r3, sl
    521a:	2b14      	cmp	r3, #20
    521c:	d012      	beq.n	5244 <floor+0x110>
    521e:	2334      	movs	r3, #52	; 0x34
    5220:	4652      	mov	r2, sl
    5222:	2701      	movs	r7, #1
    5224:	1a9b      	subs	r3, r3, r2
    5226:	409f      	lsls	r7, r3
    5228:	197f      	adds	r7, r7, r5
    522a:	42af      	cmp	r7, r5
    522c:	419b      	sbcs	r3, r3
    522e:	425b      	negs	r3, r3
    5230:	4499      	add	r9, r3
    5232:	e7d6      	b.n	51e2 <floor+0xae>
    5234:	0064      	lsls	r4, r4, #1
    5236:	0864      	lsrs	r4, r4, #1
    5238:	4325      	orrs	r5, r4
    523a:	2700      	movs	r7, #0
    523c:	2d00      	cmp	r5, #0
    523e:	d0a7      	beq.n	5190 <floor+0x5c>
    5240:	4e07      	ldr	r6, [pc, #28]	; (5260 <floor+0x12c>)
    5242:	e7a5      	b.n	5190 <floor+0x5c>
    5244:	3b13      	subs	r3, #19
    5246:	469c      	mov	ip, r3
    5248:	44e1      	add	r9, ip
    524a:	e7ca      	b.n	51e2 <floor+0xae>
    524c:	fffffc01 	.word	0xfffffc01
    5250:	000fffff 	.word	0x000fffff
    5254:	8800759c 	.word	0x8800759c
    5258:	7e37e43c 	.word	0x7e37e43c
    525c:	fffffbed 	.word	0xfffffbed
    5260:	bff00000 	.word	0xbff00000

00005264 <__udivsi3>:
    5264:	2200      	movs	r2, #0
    5266:	0843      	lsrs	r3, r0, #1
    5268:	428b      	cmp	r3, r1
    526a:	d374      	bcc.n	5356 <__udivsi3+0xf2>
    526c:	0903      	lsrs	r3, r0, #4
    526e:	428b      	cmp	r3, r1
    5270:	d35f      	bcc.n	5332 <__udivsi3+0xce>
    5272:	0a03      	lsrs	r3, r0, #8
    5274:	428b      	cmp	r3, r1
    5276:	d344      	bcc.n	5302 <__udivsi3+0x9e>
    5278:	0b03      	lsrs	r3, r0, #12
    527a:	428b      	cmp	r3, r1
    527c:	d328      	bcc.n	52d0 <__udivsi3+0x6c>
    527e:	0c03      	lsrs	r3, r0, #16
    5280:	428b      	cmp	r3, r1
    5282:	d30d      	bcc.n	52a0 <__udivsi3+0x3c>
    5284:	22ff      	movs	r2, #255	; 0xff
    5286:	0209      	lsls	r1, r1, #8
    5288:	ba12      	rev	r2, r2
    528a:	0c03      	lsrs	r3, r0, #16
    528c:	428b      	cmp	r3, r1
    528e:	d302      	bcc.n	5296 <__udivsi3+0x32>
    5290:	1212      	asrs	r2, r2, #8
    5292:	0209      	lsls	r1, r1, #8
    5294:	d065      	beq.n	5362 <__udivsi3+0xfe>
    5296:	0b03      	lsrs	r3, r0, #12
    5298:	428b      	cmp	r3, r1
    529a:	d319      	bcc.n	52d0 <__udivsi3+0x6c>
    529c:	e000      	b.n	52a0 <__udivsi3+0x3c>
    529e:	0a09      	lsrs	r1, r1, #8
    52a0:	0bc3      	lsrs	r3, r0, #15
    52a2:	428b      	cmp	r3, r1
    52a4:	d301      	bcc.n	52aa <__udivsi3+0x46>
    52a6:	03cb      	lsls	r3, r1, #15
    52a8:	1ac0      	subs	r0, r0, r3
    52aa:	4152      	adcs	r2, r2
    52ac:	0b83      	lsrs	r3, r0, #14
    52ae:	428b      	cmp	r3, r1
    52b0:	d301      	bcc.n	52b6 <__udivsi3+0x52>
    52b2:	038b      	lsls	r3, r1, #14
    52b4:	1ac0      	subs	r0, r0, r3
    52b6:	4152      	adcs	r2, r2
    52b8:	0b43      	lsrs	r3, r0, #13
    52ba:	428b      	cmp	r3, r1
    52bc:	d301      	bcc.n	52c2 <__udivsi3+0x5e>
    52be:	034b      	lsls	r3, r1, #13
    52c0:	1ac0      	subs	r0, r0, r3
    52c2:	4152      	adcs	r2, r2
    52c4:	0b03      	lsrs	r3, r0, #12
    52c6:	428b      	cmp	r3, r1
    52c8:	d301      	bcc.n	52ce <__udivsi3+0x6a>
    52ca:	030b      	lsls	r3, r1, #12
    52cc:	1ac0      	subs	r0, r0, r3
    52ce:	4152      	adcs	r2, r2
    52d0:	0ac3      	lsrs	r3, r0, #11
    52d2:	428b      	cmp	r3, r1
    52d4:	d301      	bcc.n	52da <__udivsi3+0x76>
    52d6:	02cb      	lsls	r3, r1, #11
    52d8:	1ac0      	subs	r0, r0, r3
    52da:	4152      	adcs	r2, r2
    52dc:	0a83      	lsrs	r3, r0, #10
    52de:	428b      	cmp	r3, r1
    52e0:	d301      	bcc.n	52e6 <__udivsi3+0x82>
    52e2:	028b      	lsls	r3, r1, #10
    52e4:	1ac0      	subs	r0, r0, r3
    52e6:	4152      	adcs	r2, r2
    52e8:	0a43      	lsrs	r3, r0, #9
    52ea:	428b      	cmp	r3, r1
    52ec:	d301      	bcc.n	52f2 <__udivsi3+0x8e>
    52ee:	024b      	lsls	r3, r1, #9
    52f0:	1ac0      	subs	r0, r0, r3
    52f2:	4152      	adcs	r2, r2
    52f4:	0a03      	lsrs	r3, r0, #8
    52f6:	428b      	cmp	r3, r1
    52f8:	d301      	bcc.n	52fe <__udivsi3+0x9a>
    52fa:	020b      	lsls	r3, r1, #8
    52fc:	1ac0      	subs	r0, r0, r3
    52fe:	4152      	adcs	r2, r2
    5300:	d2cd      	bcs.n	529e <__udivsi3+0x3a>
    5302:	09c3      	lsrs	r3, r0, #7
    5304:	428b      	cmp	r3, r1
    5306:	d301      	bcc.n	530c <__udivsi3+0xa8>
    5308:	01cb      	lsls	r3, r1, #7
    530a:	1ac0      	subs	r0, r0, r3
    530c:	4152      	adcs	r2, r2
    530e:	0983      	lsrs	r3, r0, #6
    5310:	428b      	cmp	r3, r1
    5312:	d301      	bcc.n	5318 <__udivsi3+0xb4>
    5314:	018b      	lsls	r3, r1, #6
    5316:	1ac0      	subs	r0, r0, r3
    5318:	4152      	adcs	r2, r2
    531a:	0943      	lsrs	r3, r0, #5
    531c:	428b      	cmp	r3, r1
    531e:	d301      	bcc.n	5324 <__udivsi3+0xc0>
    5320:	014b      	lsls	r3, r1, #5
    5322:	1ac0      	subs	r0, r0, r3
    5324:	4152      	adcs	r2, r2
    5326:	0903      	lsrs	r3, r0, #4
    5328:	428b      	cmp	r3, r1
    532a:	d301      	bcc.n	5330 <__udivsi3+0xcc>
    532c:	010b      	lsls	r3, r1, #4
    532e:	1ac0      	subs	r0, r0, r3
    5330:	4152      	adcs	r2, r2
    5332:	08c3      	lsrs	r3, r0, #3
    5334:	428b      	cmp	r3, r1
    5336:	d301      	bcc.n	533c <__udivsi3+0xd8>
    5338:	00cb      	lsls	r3, r1, #3
    533a:	1ac0      	subs	r0, r0, r3
    533c:	4152      	adcs	r2, r2
    533e:	0883      	lsrs	r3, r0, #2
    5340:	428b      	cmp	r3, r1
    5342:	d301      	bcc.n	5348 <__udivsi3+0xe4>
    5344:	008b      	lsls	r3, r1, #2
    5346:	1ac0      	subs	r0, r0, r3
    5348:	4152      	adcs	r2, r2
    534a:	0843      	lsrs	r3, r0, #1
    534c:	428b      	cmp	r3, r1
    534e:	d301      	bcc.n	5354 <__udivsi3+0xf0>
    5350:	004b      	lsls	r3, r1, #1
    5352:	1ac0      	subs	r0, r0, r3
    5354:	4152      	adcs	r2, r2
    5356:	1a41      	subs	r1, r0, r1
    5358:	d200      	bcs.n	535c <__udivsi3+0xf8>
    535a:	4601      	mov	r1, r0
    535c:	4152      	adcs	r2, r2
    535e:	4610      	mov	r0, r2
    5360:	4770      	bx	lr
    5362:	e7ff      	b.n	5364 <__udivsi3+0x100>
    5364:	b501      	push	{r0, lr}
    5366:	2000      	movs	r0, #0
    5368:	f000 f8f0 	bl	554c <__aeabi_idiv0>
    536c:	bd02      	pop	{r1, pc}
    536e:	46c0      	nop			; (mov r8, r8)

00005370 <__aeabi_uidivmod>:
    5370:	2900      	cmp	r1, #0
    5372:	d0f7      	beq.n	5364 <__udivsi3+0x100>
    5374:	e776      	b.n	5264 <__udivsi3>
    5376:	4770      	bx	lr

00005378 <__divsi3>:
    5378:	4603      	mov	r3, r0
    537a:	430b      	orrs	r3, r1
    537c:	d47f      	bmi.n	547e <__divsi3+0x106>
    537e:	2200      	movs	r2, #0
    5380:	0843      	lsrs	r3, r0, #1
    5382:	428b      	cmp	r3, r1
    5384:	d374      	bcc.n	5470 <__divsi3+0xf8>
    5386:	0903      	lsrs	r3, r0, #4
    5388:	428b      	cmp	r3, r1
    538a:	d35f      	bcc.n	544c <__divsi3+0xd4>
    538c:	0a03      	lsrs	r3, r0, #8
    538e:	428b      	cmp	r3, r1
    5390:	d344      	bcc.n	541c <__divsi3+0xa4>
    5392:	0b03      	lsrs	r3, r0, #12
    5394:	428b      	cmp	r3, r1
    5396:	d328      	bcc.n	53ea <__divsi3+0x72>
    5398:	0c03      	lsrs	r3, r0, #16
    539a:	428b      	cmp	r3, r1
    539c:	d30d      	bcc.n	53ba <__divsi3+0x42>
    539e:	22ff      	movs	r2, #255	; 0xff
    53a0:	0209      	lsls	r1, r1, #8
    53a2:	ba12      	rev	r2, r2
    53a4:	0c03      	lsrs	r3, r0, #16
    53a6:	428b      	cmp	r3, r1
    53a8:	d302      	bcc.n	53b0 <__divsi3+0x38>
    53aa:	1212      	asrs	r2, r2, #8
    53ac:	0209      	lsls	r1, r1, #8
    53ae:	d065      	beq.n	547c <__divsi3+0x104>
    53b0:	0b03      	lsrs	r3, r0, #12
    53b2:	428b      	cmp	r3, r1
    53b4:	d319      	bcc.n	53ea <__divsi3+0x72>
    53b6:	e000      	b.n	53ba <__divsi3+0x42>
    53b8:	0a09      	lsrs	r1, r1, #8
    53ba:	0bc3      	lsrs	r3, r0, #15
    53bc:	428b      	cmp	r3, r1
    53be:	d301      	bcc.n	53c4 <__divsi3+0x4c>
    53c0:	03cb      	lsls	r3, r1, #15
    53c2:	1ac0      	subs	r0, r0, r3
    53c4:	4152      	adcs	r2, r2
    53c6:	0b83      	lsrs	r3, r0, #14
    53c8:	428b      	cmp	r3, r1
    53ca:	d301      	bcc.n	53d0 <__divsi3+0x58>
    53cc:	038b      	lsls	r3, r1, #14
    53ce:	1ac0      	subs	r0, r0, r3
    53d0:	4152      	adcs	r2, r2
    53d2:	0b43      	lsrs	r3, r0, #13
    53d4:	428b      	cmp	r3, r1
    53d6:	d301      	bcc.n	53dc <__divsi3+0x64>
    53d8:	034b      	lsls	r3, r1, #13
    53da:	1ac0      	subs	r0, r0, r3
    53dc:	4152      	adcs	r2, r2
    53de:	0b03      	lsrs	r3, r0, #12
    53e0:	428b      	cmp	r3, r1
    53e2:	d301      	bcc.n	53e8 <__divsi3+0x70>
    53e4:	030b      	lsls	r3, r1, #12
    53e6:	1ac0      	subs	r0, r0, r3
    53e8:	4152      	adcs	r2, r2
    53ea:	0ac3      	lsrs	r3, r0, #11
    53ec:	428b      	cmp	r3, r1
    53ee:	d301      	bcc.n	53f4 <__divsi3+0x7c>
    53f0:	02cb      	lsls	r3, r1, #11
    53f2:	1ac0      	subs	r0, r0, r3
    53f4:	4152      	adcs	r2, r2
    53f6:	0a83      	lsrs	r3, r0, #10
    53f8:	428b      	cmp	r3, r1
    53fa:	d301      	bcc.n	5400 <__divsi3+0x88>
    53fc:	028b      	lsls	r3, r1, #10
    53fe:	1ac0      	subs	r0, r0, r3
    5400:	4152      	adcs	r2, r2
    5402:	0a43      	lsrs	r3, r0, #9
    5404:	428b      	cmp	r3, r1
    5406:	d301      	bcc.n	540c <__divsi3+0x94>
    5408:	024b      	lsls	r3, r1, #9
    540a:	1ac0      	subs	r0, r0, r3
    540c:	4152      	adcs	r2, r2
    540e:	0a03      	lsrs	r3, r0, #8
    5410:	428b      	cmp	r3, r1
    5412:	d301      	bcc.n	5418 <__divsi3+0xa0>
    5414:	020b      	lsls	r3, r1, #8
    5416:	1ac0      	subs	r0, r0, r3
    5418:	4152      	adcs	r2, r2
    541a:	d2cd      	bcs.n	53b8 <__divsi3+0x40>
    541c:	09c3      	lsrs	r3, r0, #7
    541e:	428b      	cmp	r3, r1
    5420:	d301      	bcc.n	5426 <__divsi3+0xae>
    5422:	01cb      	lsls	r3, r1, #7
    5424:	1ac0      	subs	r0, r0, r3
    5426:	4152      	adcs	r2, r2
    5428:	0983      	lsrs	r3, r0, #6
    542a:	428b      	cmp	r3, r1
    542c:	d301      	bcc.n	5432 <__divsi3+0xba>
    542e:	018b      	lsls	r3, r1, #6
    5430:	1ac0      	subs	r0, r0, r3
    5432:	4152      	adcs	r2, r2
    5434:	0943      	lsrs	r3, r0, #5
    5436:	428b      	cmp	r3, r1
    5438:	d301      	bcc.n	543e <__divsi3+0xc6>
    543a:	014b      	lsls	r3, r1, #5
    543c:	1ac0      	subs	r0, r0, r3
    543e:	4152      	adcs	r2, r2
    5440:	0903      	lsrs	r3, r0, #4
    5442:	428b      	cmp	r3, r1
    5444:	d301      	bcc.n	544a <__divsi3+0xd2>
    5446:	010b      	lsls	r3, r1, #4
    5448:	1ac0      	subs	r0, r0, r3
    544a:	4152      	adcs	r2, r2
    544c:	08c3      	lsrs	r3, r0, #3
    544e:	428b      	cmp	r3, r1
    5450:	d301      	bcc.n	5456 <__divsi3+0xde>
    5452:	00cb      	lsls	r3, r1, #3
    5454:	1ac0      	subs	r0, r0, r3
    5456:	4152      	adcs	r2, r2
    5458:	0883      	lsrs	r3, r0, #2
    545a:	428b      	cmp	r3, r1
    545c:	d301      	bcc.n	5462 <__divsi3+0xea>
    545e:	008b      	lsls	r3, r1, #2
    5460:	1ac0      	subs	r0, r0, r3
    5462:	4152      	adcs	r2, r2
    5464:	0843      	lsrs	r3, r0, #1
    5466:	428b      	cmp	r3, r1
    5468:	d301      	bcc.n	546e <__divsi3+0xf6>
    546a:	004b      	lsls	r3, r1, #1
    546c:	1ac0      	subs	r0, r0, r3
    546e:	4152      	adcs	r2, r2
    5470:	1a41      	subs	r1, r0, r1
    5472:	d200      	bcs.n	5476 <__divsi3+0xfe>
    5474:	4601      	mov	r1, r0
    5476:	4152      	adcs	r2, r2
    5478:	4610      	mov	r0, r2
    547a:	4770      	bx	lr
    547c:	e05d      	b.n	553a <__divsi3+0x1c2>
    547e:	0fca      	lsrs	r2, r1, #31
    5480:	d000      	beq.n	5484 <__divsi3+0x10c>
    5482:	4249      	negs	r1, r1
    5484:	1003      	asrs	r3, r0, #32
    5486:	d300      	bcc.n	548a <__divsi3+0x112>
    5488:	4240      	negs	r0, r0
    548a:	4053      	eors	r3, r2
    548c:	2200      	movs	r2, #0
    548e:	469c      	mov	ip, r3
    5490:	0903      	lsrs	r3, r0, #4
    5492:	428b      	cmp	r3, r1
    5494:	d32d      	bcc.n	54f2 <__divsi3+0x17a>
    5496:	0a03      	lsrs	r3, r0, #8
    5498:	428b      	cmp	r3, r1
    549a:	d312      	bcc.n	54c2 <__divsi3+0x14a>
    549c:	22fc      	movs	r2, #252	; 0xfc
    549e:	0189      	lsls	r1, r1, #6
    54a0:	ba12      	rev	r2, r2
    54a2:	0a03      	lsrs	r3, r0, #8
    54a4:	428b      	cmp	r3, r1
    54a6:	d30c      	bcc.n	54c2 <__divsi3+0x14a>
    54a8:	0189      	lsls	r1, r1, #6
    54aa:	1192      	asrs	r2, r2, #6
    54ac:	428b      	cmp	r3, r1
    54ae:	d308      	bcc.n	54c2 <__divsi3+0x14a>
    54b0:	0189      	lsls	r1, r1, #6
    54b2:	1192      	asrs	r2, r2, #6
    54b4:	428b      	cmp	r3, r1
    54b6:	d304      	bcc.n	54c2 <__divsi3+0x14a>
    54b8:	0189      	lsls	r1, r1, #6
    54ba:	d03a      	beq.n	5532 <__divsi3+0x1ba>
    54bc:	1192      	asrs	r2, r2, #6
    54be:	e000      	b.n	54c2 <__divsi3+0x14a>
    54c0:	0989      	lsrs	r1, r1, #6
    54c2:	09c3      	lsrs	r3, r0, #7
    54c4:	428b      	cmp	r3, r1
    54c6:	d301      	bcc.n	54cc <__divsi3+0x154>
    54c8:	01cb      	lsls	r3, r1, #7
    54ca:	1ac0      	subs	r0, r0, r3
    54cc:	4152      	adcs	r2, r2
    54ce:	0983      	lsrs	r3, r0, #6
    54d0:	428b      	cmp	r3, r1
    54d2:	d301      	bcc.n	54d8 <__divsi3+0x160>
    54d4:	018b      	lsls	r3, r1, #6
    54d6:	1ac0      	subs	r0, r0, r3
    54d8:	4152      	adcs	r2, r2
    54da:	0943      	lsrs	r3, r0, #5
    54dc:	428b      	cmp	r3, r1
    54de:	d301      	bcc.n	54e4 <__divsi3+0x16c>
    54e0:	014b      	lsls	r3, r1, #5
    54e2:	1ac0      	subs	r0, r0, r3
    54e4:	4152      	adcs	r2, r2
    54e6:	0903      	lsrs	r3, r0, #4
    54e8:	428b      	cmp	r3, r1
    54ea:	d301      	bcc.n	54f0 <__divsi3+0x178>
    54ec:	010b      	lsls	r3, r1, #4
    54ee:	1ac0      	subs	r0, r0, r3
    54f0:	4152      	adcs	r2, r2
    54f2:	08c3      	lsrs	r3, r0, #3
    54f4:	428b      	cmp	r3, r1
    54f6:	d301      	bcc.n	54fc <__divsi3+0x184>
    54f8:	00cb      	lsls	r3, r1, #3
    54fa:	1ac0      	subs	r0, r0, r3
    54fc:	4152      	adcs	r2, r2
    54fe:	0883      	lsrs	r3, r0, #2
    5500:	428b      	cmp	r3, r1
    5502:	d301      	bcc.n	5508 <__divsi3+0x190>
    5504:	008b      	lsls	r3, r1, #2
    5506:	1ac0      	subs	r0, r0, r3
    5508:	4152      	adcs	r2, r2
    550a:	d2d9      	bcs.n	54c0 <__divsi3+0x148>
    550c:	0843      	lsrs	r3, r0, #1
    550e:	428b      	cmp	r3, r1
    5510:	d301      	bcc.n	5516 <__divsi3+0x19e>
    5512:	004b      	lsls	r3, r1, #1
    5514:	1ac0      	subs	r0, r0, r3
    5516:	4152      	adcs	r2, r2
    5518:	1a41      	subs	r1, r0, r1
    551a:	d200      	bcs.n	551e <__divsi3+0x1a6>
    551c:	4601      	mov	r1, r0
    551e:	4663      	mov	r3, ip
    5520:	4152      	adcs	r2, r2
    5522:	105b      	asrs	r3, r3, #1
    5524:	4610      	mov	r0, r2
    5526:	d301      	bcc.n	552c <__divsi3+0x1b4>
    5528:	4240      	negs	r0, r0
    552a:	2b00      	cmp	r3, #0
    552c:	d500      	bpl.n	5530 <__divsi3+0x1b8>
    552e:	4249      	negs	r1, r1
    5530:	4770      	bx	lr
    5532:	4663      	mov	r3, ip
    5534:	105b      	asrs	r3, r3, #1
    5536:	d300      	bcc.n	553a <__divsi3+0x1c2>
    5538:	4240      	negs	r0, r0
    553a:	b501      	push	{r0, lr}
    553c:	2000      	movs	r0, #0
    553e:	f000 f805 	bl	554c <__aeabi_idiv0>
    5542:	bd02      	pop	{r1, pc}

00005544 <__aeabi_idivmod>:
    5544:	2900      	cmp	r1, #0
    5546:	d0f8      	beq.n	553a <__divsi3+0x1c2>
    5548:	e716      	b.n	5378 <__divsi3>
    554a:	4770      	bx	lr

0000554c <__aeabi_idiv0>:
    554c:	4770      	bx	lr
    554e:	46c0      	nop			; (mov r8, r8)

00005550 <__aeabi_cdrcmple>:
    5550:	4684      	mov	ip, r0
    5552:	1c10      	adds	r0, r2, #0
    5554:	4662      	mov	r2, ip
    5556:	468c      	mov	ip, r1
    5558:	1c19      	adds	r1, r3, #0
    555a:	4663      	mov	r3, ip
    555c:	e000      	b.n	5560 <__aeabi_cdcmpeq>
    555e:	46c0      	nop			; (mov r8, r8)

00005560 <__aeabi_cdcmpeq>:
    5560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5562:	f001 f9a1 	bl	68a8 <__ledf2>
    5566:	2800      	cmp	r0, #0
    5568:	d401      	bmi.n	556e <__aeabi_cdcmpeq+0xe>
    556a:	2100      	movs	r1, #0
    556c:	42c8      	cmn	r0, r1
    556e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005570 <__aeabi_dcmpeq>:
    5570:	b510      	push	{r4, lr}
    5572:	f001 f8fb 	bl	676c <__eqdf2>
    5576:	4240      	negs	r0, r0
    5578:	3001      	adds	r0, #1
    557a:	bd10      	pop	{r4, pc}

0000557c <__aeabi_dcmplt>:
    557c:	b510      	push	{r4, lr}
    557e:	f001 f993 	bl	68a8 <__ledf2>
    5582:	2800      	cmp	r0, #0
    5584:	db01      	blt.n	558a <__aeabi_dcmplt+0xe>
    5586:	2000      	movs	r0, #0
    5588:	bd10      	pop	{r4, pc}
    558a:	2001      	movs	r0, #1
    558c:	bd10      	pop	{r4, pc}
    558e:	46c0      	nop			; (mov r8, r8)

00005590 <__aeabi_dcmple>:
    5590:	b510      	push	{r4, lr}
    5592:	f001 f989 	bl	68a8 <__ledf2>
    5596:	2800      	cmp	r0, #0
    5598:	dd01      	ble.n	559e <__aeabi_dcmple+0xe>
    559a:	2000      	movs	r0, #0
    559c:	bd10      	pop	{r4, pc}
    559e:	2001      	movs	r0, #1
    55a0:	bd10      	pop	{r4, pc}
    55a2:	46c0      	nop			; (mov r8, r8)

000055a4 <__aeabi_dcmpgt>:
    55a4:	b510      	push	{r4, lr}
    55a6:	f001 f91b 	bl	67e0 <__gedf2>
    55aa:	2800      	cmp	r0, #0
    55ac:	dc01      	bgt.n	55b2 <__aeabi_dcmpgt+0xe>
    55ae:	2000      	movs	r0, #0
    55b0:	bd10      	pop	{r4, pc}
    55b2:	2001      	movs	r0, #1
    55b4:	bd10      	pop	{r4, pc}
    55b6:	46c0      	nop			; (mov r8, r8)

000055b8 <__aeabi_dcmpge>:
    55b8:	b510      	push	{r4, lr}
    55ba:	f001 f911 	bl	67e0 <__gedf2>
    55be:	2800      	cmp	r0, #0
    55c0:	da01      	bge.n	55c6 <__aeabi_dcmpge+0xe>
    55c2:	2000      	movs	r0, #0
    55c4:	bd10      	pop	{r4, pc}
    55c6:	2001      	movs	r0, #1
    55c8:	bd10      	pop	{r4, pc}
    55ca:	46c0      	nop			; (mov r8, r8)

000055cc <__aeabi_cfrcmple>:
    55cc:	4684      	mov	ip, r0
    55ce:	1c08      	adds	r0, r1, #0
    55d0:	4661      	mov	r1, ip
    55d2:	e7ff      	b.n	55d4 <__aeabi_cfcmpeq>

000055d4 <__aeabi_cfcmpeq>:
    55d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    55d6:	f000 fa55 	bl	5a84 <__lesf2>
    55da:	2800      	cmp	r0, #0
    55dc:	d401      	bmi.n	55e2 <__aeabi_cfcmpeq+0xe>
    55de:	2100      	movs	r1, #0
    55e0:	42c8      	cmn	r0, r1
    55e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000055e4 <__aeabi_fcmpeq>:
    55e4:	b510      	push	{r4, lr}
    55e6:	f000 f9e7 	bl	59b8 <__eqsf2>
    55ea:	4240      	negs	r0, r0
    55ec:	3001      	adds	r0, #1
    55ee:	bd10      	pop	{r4, pc}

000055f0 <__aeabi_fcmplt>:
    55f0:	b510      	push	{r4, lr}
    55f2:	f000 fa47 	bl	5a84 <__lesf2>
    55f6:	2800      	cmp	r0, #0
    55f8:	db01      	blt.n	55fe <__aeabi_fcmplt+0xe>
    55fa:	2000      	movs	r0, #0
    55fc:	bd10      	pop	{r4, pc}
    55fe:	2001      	movs	r0, #1
    5600:	bd10      	pop	{r4, pc}
    5602:	46c0      	nop			; (mov r8, r8)

00005604 <__aeabi_fcmple>:
    5604:	b510      	push	{r4, lr}
    5606:	f000 fa3d 	bl	5a84 <__lesf2>
    560a:	2800      	cmp	r0, #0
    560c:	dd01      	ble.n	5612 <__aeabi_fcmple+0xe>
    560e:	2000      	movs	r0, #0
    5610:	bd10      	pop	{r4, pc}
    5612:	2001      	movs	r0, #1
    5614:	bd10      	pop	{r4, pc}
    5616:	46c0      	nop			; (mov r8, r8)

00005618 <__aeabi_fcmpgt>:
    5618:	b510      	push	{r4, lr}
    561a:	f000 f9f3 	bl	5a04 <__gesf2>
    561e:	2800      	cmp	r0, #0
    5620:	dc01      	bgt.n	5626 <__aeabi_fcmpgt+0xe>
    5622:	2000      	movs	r0, #0
    5624:	bd10      	pop	{r4, pc}
    5626:	2001      	movs	r0, #1
    5628:	bd10      	pop	{r4, pc}
    562a:	46c0      	nop			; (mov r8, r8)

0000562c <__aeabi_fcmpge>:
    562c:	b510      	push	{r4, lr}
    562e:	f000 f9e9 	bl	5a04 <__gesf2>
    5632:	2800      	cmp	r0, #0
    5634:	da01      	bge.n	563a <__aeabi_fcmpge+0xe>
    5636:	2000      	movs	r0, #0
    5638:	bd10      	pop	{r4, pc}
    563a:	2001      	movs	r0, #1
    563c:	bd10      	pop	{r4, pc}
    563e:	46c0      	nop			; (mov r8, r8)

00005640 <__clzsi2>:
    5640:	211c      	movs	r1, #28
    5642:	2301      	movs	r3, #1
    5644:	041b      	lsls	r3, r3, #16
    5646:	4298      	cmp	r0, r3
    5648:	d301      	bcc.n	564e <__clzsi2+0xe>
    564a:	0c00      	lsrs	r0, r0, #16
    564c:	3910      	subs	r1, #16
    564e:	0a1b      	lsrs	r3, r3, #8
    5650:	4298      	cmp	r0, r3
    5652:	d301      	bcc.n	5658 <__clzsi2+0x18>
    5654:	0a00      	lsrs	r0, r0, #8
    5656:	3908      	subs	r1, #8
    5658:	091b      	lsrs	r3, r3, #4
    565a:	4298      	cmp	r0, r3
    565c:	d301      	bcc.n	5662 <__clzsi2+0x22>
    565e:	0900      	lsrs	r0, r0, #4
    5660:	3904      	subs	r1, #4
    5662:	a202      	add	r2, pc, #8	; (adr r2, 566c <__clzsi2+0x2c>)
    5664:	5c10      	ldrb	r0, [r2, r0]
    5666:	1840      	adds	r0, r0, r1
    5668:	4770      	bx	lr
    566a:	46c0      	nop			; (mov r8, r8)
    566c:	02020304 	.word	0x02020304
    5670:	01010101 	.word	0x01010101
	...

0000567c <__ctzsi2>:
    567c:	4241      	negs	r1, r0
    567e:	4008      	ands	r0, r1
    5680:	211c      	movs	r1, #28
    5682:	2301      	movs	r3, #1
    5684:	041b      	lsls	r3, r3, #16
    5686:	4298      	cmp	r0, r3
    5688:	d301      	bcc.n	568e <__ctzsi2+0x12>
    568a:	0c00      	lsrs	r0, r0, #16
    568c:	3910      	subs	r1, #16
    568e:	0a1b      	lsrs	r3, r3, #8
    5690:	4298      	cmp	r0, r3
    5692:	d301      	bcc.n	5698 <__ctzsi2+0x1c>
    5694:	0a00      	lsrs	r0, r0, #8
    5696:	3908      	subs	r1, #8
    5698:	091b      	lsrs	r3, r3, #4
    569a:	4298      	cmp	r0, r3
    569c:	d301      	bcc.n	56a2 <__ctzsi2+0x26>
    569e:	0900      	lsrs	r0, r0, #4
    56a0:	3904      	subs	r1, #4
    56a2:	a202      	add	r2, pc, #8	; (adr r2, 56ac <__ctzsi2+0x30>)
    56a4:	5c10      	ldrb	r0, [r2, r0]
    56a6:	1a40      	subs	r0, r0, r1
    56a8:	4770      	bx	lr
    56aa:	46c0      	nop			; (mov r8, r8)
    56ac:	1d1d1c1b 	.word	0x1d1d1c1b
    56b0:	1e1e1e1e 	.word	0x1e1e1e1e
    56b4:	1f1f1f1f 	.word	0x1f1f1f1f
    56b8:	1f1f1f1f 	.word	0x1f1f1f1f

000056bc <__aeabi_f2uiz>:
    56bc:	219e      	movs	r1, #158	; 0x9e
    56be:	b510      	push	{r4, lr}
    56c0:	05c9      	lsls	r1, r1, #23
    56c2:	1c04      	adds	r4, r0, #0
    56c4:	f7ff ffb2 	bl	562c <__aeabi_fcmpge>
    56c8:	2800      	cmp	r0, #0
    56ca:	d103      	bne.n	56d4 <__aeabi_f2uiz+0x18>
    56cc:	1c20      	adds	r0, r4, #0
    56ce:	f000 fcd7 	bl	6080 <__aeabi_f2iz>
    56d2:	bd10      	pop	{r4, pc}
    56d4:	219e      	movs	r1, #158	; 0x9e
    56d6:	1c20      	adds	r0, r4, #0
    56d8:	05c9      	lsls	r1, r1, #23
    56da:	f000 fb35 	bl	5d48 <__aeabi_fsub>
    56de:	f000 fccf 	bl	6080 <__aeabi_f2iz>
    56e2:	2380      	movs	r3, #128	; 0x80
    56e4:	061b      	lsls	r3, r3, #24
    56e6:	469c      	mov	ip, r3
    56e8:	4460      	add	r0, ip
    56ea:	e7f2      	b.n	56d2 <__aeabi_f2uiz+0x16>

000056ec <__aeabi_d2uiz>:
    56ec:	b570      	push	{r4, r5, r6, lr}
    56ee:	2200      	movs	r2, #0
    56f0:	4b0c      	ldr	r3, [pc, #48]	; (5724 <__aeabi_d2uiz+0x38>)
    56f2:	0004      	movs	r4, r0
    56f4:	000d      	movs	r5, r1
    56f6:	f7ff ff5f 	bl	55b8 <__aeabi_dcmpge>
    56fa:	2800      	cmp	r0, #0
    56fc:	d104      	bne.n	5708 <__aeabi_d2uiz+0x1c>
    56fe:	0020      	movs	r0, r4
    5700:	0029      	movs	r1, r5
    5702:	f001 fc49 	bl	6f98 <__aeabi_d2iz>
    5706:	bd70      	pop	{r4, r5, r6, pc}
    5708:	4b06      	ldr	r3, [pc, #24]	; (5724 <__aeabi_d2uiz+0x38>)
    570a:	2200      	movs	r2, #0
    570c:	0020      	movs	r0, r4
    570e:	0029      	movs	r1, r5
    5710:	f001 f92c 	bl	696c <__aeabi_dsub>
    5714:	f001 fc40 	bl	6f98 <__aeabi_d2iz>
    5718:	2380      	movs	r3, #128	; 0x80
    571a:	061b      	lsls	r3, r3, #24
    571c:	469c      	mov	ip, r3
    571e:	4460      	add	r0, ip
    5720:	e7f1      	b.n	5706 <__aeabi_d2uiz+0x1a>
    5722:	46c0      	nop			; (mov r8, r8)
    5724:	41e00000 	.word	0x41e00000

00005728 <__aeabi_fdiv>:
    5728:	b5f0      	push	{r4, r5, r6, r7, lr}
    572a:	4657      	mov	r7, sl
    572c:	464e      	mov	r6, r9
    572e:	46de      	mov	lr, fp
    5730:	4645      	mov	r5, r8
    5732:	b5e0      	push	{r5, r6, r7, lr}
    5734:	0244      	lsls	r4, r0, #9
    5736:	0043      	lsls	r3, r0, #1
    5738:	0fc6      	lsrs	r6, r0, #31
    573a:	b083      	sub	sp, #12
    573c:	1c0f      	adds	r7, r1, #0
    573e:	0a64      	lsrs	r4, r4, #9
    5740:	0e1b      	lsrs	r3, r3, #24
    5742:	46b2      	mov	sl, r6
    5744:	d053      	beq.n	57ee <__aeabi_fdiv+0xc6>
    5746:	2bff      	cmp	r3, #255	; 0xff
    5748:	d027      	beq.n	579a <__aeabi_fdiv+0x72>
    574a:	2280      	movs	r2, #128	; 0x80
    574c:	00e4      	lsls	r4, r4, #3
    574e:	04d2      	lsls	r2, r2, #19
    5750:	4314      	orrs	r4, r2
    5752:	227f      	movs	r2, #127	; 0x7f
    5754:	4252      	negs	r2, r2
    5756:	4690      	mov	r8, r2
    5758:	4498      	add	r8, r3
    575a:	2300      	movs	r3, #0
    575c:	4699      	mov	r9, r3
    575e:	469b      	mov	fp, r3
    5760:	027d      	lsls	r5, r7, #9
    5762:	0078      	lsls	r0, r7, #1
    5764:	0ffb      	lsrs	r3, r7, #31
    5766:	0a6d      	lsrs	r5, r5, #9
    5768:	0e00      	lsrs	r0, r0, #24
    576a:	9300      	str	r3, [sp, #0]
    576c:	d024      	beq.n	57b8 <__aeabi_fdiv+0x90>
    576e:	28ff      	cmp	r0, #255	; 0xff
    5770:	d046      	beq.n	5800 <__aeabi_fdiv+0xd8>
    5772:	2380      	movs	r3, #128	; 0x80
    5774:	2100      	movs	r1, #0
    5776:	00ed      	lsls	r5, r5, #3
    5778:	04db      	lsls	r3, r3, #19
    577a:	431d      	orrs	r5, r3
    577c:	387f      	subs	r0, #127	; 0x7f
    577e:	4647      	mov	r7, r8
    5780:	1a38      	subs	r0, r7, r0
    5782:	464f      	mov	r7, r9
    5784:	430f      	orrs	r7, r1
    5786:	00bf      	lsls	r7, r7, #2
    5788:	46b9      	mov	r9, r7
    578a:	0033      	movs	r3, r6
    578c:	9a00      	ldr	r2, [sp, #0]
    578e:	4f87      	ldr	r7, [pc, #540]	; (59ac <__aeabi_fdiv+0x284>)
    5790:	4053      	eors	r3, r2
    5792:	464a      	mov	r2, r9
    5794:	58ba      	ldr	r2, [r7, r2]
    5796:	9301      	str	r3, [sp, #4]
    5798:	4697      	mov	pc, r2
    579a:	2c00      	cmp	r4, #0
    579c:	d14e      	bne.n	583c <__aeabi_fdiv+0x114>
    579e:	2308      	movs	r3, #8
    57a0:	4699      	mov	r9, r3
    57a2:	33f7      	adds	r3, #247	; 0xf7
    57a4:	4698      	mov	r8, r3
    57a6:	3bfd      	subs	r3, #253	; 0xfd
    57a8:	469b      	mov	fp, r3
    57aa:	027d      	lsls	r5, r7, #9
    57ac:	0078      	lsls	r0, r7, #1
    57ae:	0ffb      	lsrs	r3, r7, #31
    57b0:	0a6d      	lsrs	r5, r5, #9
    57b2:	0e00      	lsrs	r0, r0, #24
    57b4:	9300      	str	r3, [sp, #0]
    57b6:	d1da      	bne.n	576e <__aeabi_fdiv+0x46>
    57b8:	2d00      	cmp	r5, #0
    57ba:	d126      	bne.n	580a <__aeabi_fdiv+0xe2>
    57bc:	2000      	movs	r0, #0
    57be:	2101      	movs	r1, #1
    57c0:	0033      	movs	r3, r6
    57c2:	9a00      	ldr	r2, [sp, #0]
    57c4:	4f7a      	ldr	r7, [pc, #488]	; (59b0 <__aeabi_fdiv+0x288>)
    57c6:	4053      	eors	r3, r2
    57c8:	4642      	mov	r2, r8
    57ca:	1a10      	subs	r0, r2, r0
    57cc:	464a      	mov	r2, r9
    57ce:	430a      	orrs	r2, r1
    57d0:	0092      	lsls	r2, r2, #2
    57d2:	58ba      	ldr	r2, [r7, r2]
    57d4:	001d      	movs	r5, r3
    57d6:	4697      	mov	pc, r2
    57d8:	9b00      	ldr	r3, [sp, #0]
    57da:	002c      	movs	r4, r5
    57dc:	469a      	mov	sl, r3
    57de:	468b      	mov	fp, r1
    57e0:	465b      	mov	r3, fp
    57e2:	2b02      	cmp	r3, #2
    57e4:	d131      	bne.n	584a <__aeabi_fdiv+0x122>
    57e6:	4653      	mov	r3, sl
    57e8:	21ff      	movs	r1, #255	; 0xff
    57ea:	2400      	movs	r4, #0
    57ec:	e038      	b.n	5860 <__aeabi_fdiv+0x138>
    57ee:	2c00      	cmp	r4, #0
    57f0:	d117      	bne.n	5822 <__aeabi_fdiv+0xfa>
    57f2:	2304      	movs	r3, #4
    57f4:	4699      	mov	r9, r3
    57f6:	2300      	movs	r3, #0
    57f8:	4698      	mov	r8, r3
    57fa:	3301      	adds	r3, #1
    57fc:	469b      	mov	fp, r3
    57fe:	e7af      	b.n	5760 <__aeabi_fdiv+0x38>
    5800:	20ff      	movs	r0, #255	; 0xff
    5802:	2d00      	cmp	r5, #0
    5804:	d10b      	bne.n	581e <__aeabi_fdiv+0xf6>
    5806:	2102      	movs	r1, #2
    5808:	e7da      	b.n	57c0 <__aeabi_fdiv+0x98>
    580a:	0028      	movs	r0, r5
    580c:	f7ff ff18 	bl	5640 <__clzsi2>
    5810:	1f43      	subs	r3, r0, #5
    5812:	409d      	lsls	r5, r3
    5814:	2376      	movs	r3, #118	; 0x76
    5816:	425b      	negs	r3, r3
    5818:	1a18      	subs	r0, r3, r0
    581a:	2100      	movs	r1, #0
    581c:	e7af      	b.n	577e <__aeabi_fdiv+0x56>
    581e:	2103      	movs	r1, #3
    5820:	e7ad      	b.n	577e <__aeabi_fdiv+0x56>
    5822:	0020      	movs	r0, r4
    5824:	f7ff ff0c 	bl	5640 <__clzsi2>
    5828:	1f43      	subs	r3, r0, #5
    582a:	409c      	lsls	r4, r3
    582c:	2376      	movs	r3, #118	; 0x76
    582e:	425b      	negs	r3, r3
    5830:	1a1b      	subs	r3, r3, r0
    5832:	4698      	mov	r8, r3
    5834:	2300      	movs	r3, #0
    5836:	4699      	mov	r9, r3
    5838:	469b      	mov	fp, r3
    583a:	e791      	b.n	5760 <__aeabi_fdiv+0x38>
    583c:	230c      	movs	r3, #12
    583e:	4699      	mov	r9, r3
    5840:	33f3      	adds	r3, #243	; 0xf3
    5842:	4698      	mov	r8, r3
    5844:	3bfc      	subs	r3, #252	; 0xfc
    5846:	469b      	mov	fp, r3
    5848:	e78a      	b.n	5760 <__aeabi_fdiv+0x38>
    584a:	2b03      	cmp	r3, #3
    584c:	d100      	bne.n	5850 <__aeabi_fdiv+0x128>
    584e:	e0a5      	b.n	599c <__aeabi_fdiv+0x274>
    5850:	4655      	mov	r5, sl
    5852:	2b01      	cmp	r3, #1
    5854:	d000      	beq.n	5858 <__aeabi_fdiv+0x130>
    5856:	e081      	b.n	595c <__aeabi_fdiv+0x234>
    5858:	2301      	movs	r3, #1
    585a:	2100      	movs	r1, #0
    585c:	2400      	movs	r4, #0
    585e:	402b      	ands	r3, r5
    5860:	0264      	lsls	r4, r4, #9
    5862:	05c9      	lsls	r1, r1, #23
    5864:	0a60      	lsrs	r0, r4, #9
    5866:	07db      	lsls	r3, r3, #31
    5868:	4308      	orrs	r0, r1
    586a:	4318      	orrs	r0, r3
    586c:	b003      	add	sp, #12
    586e:	bc3c      	pop	{r2, r3, r4, r5}
    5870:	4690      	mov	r8, r2
    5872:	4699      	mov	r9, r3
    5874:	46a2      	mov	sl, r4
    5876:	46ab      	mov	fp, r5
    5878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    587a:	2480      	movs	r4, #128	; 0x80
    587c:	2300      	movs	r3, #0
    587e:	03e4      	lsls	r4, r4, #15
    5880:	21ff      	movs	r1, #255	; 0xff
    5882:	e7ed      	b.n	5860 <__aeabi_fdiv+0x138>
    5884:	21ff      	movs	r1, #255	; 0xff
    5886:	2400      	movs	r4, #0
    5888:	e7ea      	b.n	5860 <__aeabi_fdiv+0x138>
    588a:	2301      	movs	r3, #1
    588c:	1a59      	subs	r1, r3, r1
    588e:	291b      	cmp	r1, #27
    5890:	dd66      	ble.n	5960 <__aeabi_fdiv+0x238>
    5892:	9a01      	ldr	r2, [sp, #4]
    5894:	4013      	ands	r3, r2
    5896:	2100      	movs	r1, #0
    5898:	2400      	movs	r4, #0
    589a:	e7e1      	b.n	5860 <__aeabi_fdiv+0x138>
    589c:	2380      	movs	r3, #128	; 0x80
    589e:	03db      	lsls	r3, r3, #15
    58a0:	421c      	tst	r4, r3
    58a2:	d038      	beq.n	5916 <__aeabi_fdiv+0x1ee>
    58a4:	421d      	tst	r5, r3
    58a6:	d051      	beq.n	594c <__aeabi_fdiv+0x224>
    58a8:	431c      	orrs	r4, r3
    58aa:	0264      	lsls	r4, r4, #9
    58ac:	0a64      	lsrs	r4, r4, #9
    58ae:	0033      	movs	r3, r6
    58b0:	21ff      	movs	r1, #255	; 0xff
    58b2:	e7d5      	b.n	5860 <__aeabi_fdiv+0x138>
    58b4:	0163      	lsls	r3, r4, #5
    58b6:	016c      	lsls	r4, r5, #5
    58b8:	42a3      	cmp	r3, r4
    58ba:	d23b      	bcs.n	5934 <__aeabi_fdiv+0x20c>
    58bc:	261b      	movs	r6, #27
    58be:	2100      	movs	r1, #0
    58c0:	3801      	subs	r0, #1
    58c2:	2501      	movs	r5, #1
    58c4:	001f      	movs	r7, r3
    58c6:	0049      	lsls	r1, r1, #1
    58c8:	005b      	lsls	r3, r3, #1
    58ca:	2f00      	cmp	r7, #0
    58cc:	db01      	blt.n	58d2 <__aeabi_fdiv+0x1aa>
    58ce:	429c      	cmp	r4, r3
    58d0:	d801      	bhi.n	58d6 <__aeabi_fdiv+0x1ae>
    58d2:	1b1b      	subs	r3, r3, r4
    58d4:	4329      	orrs	r1, r5
    58d6:	3e01      	subs	r6, #1
    58d8:	2e00      	cmp	r6, #0
    58da:	d1f3      	bne.n	58c4 <__aeabi_fdiv+0x19c>
    58dc:	001c      	movs	r4, r3
    58de:	1e63      	subs	r3, r4, #1
    58e0:	419c      	sbcs	r4, r3
    58e2:	430c      	orrs	r4, r1
    58e4:	0001      	movs	r1, r0
    58e6:	317f      	adds	r1, #127	; 0x7f
    58e8:	2900      	cmp	r1, #0
    58ea:	ddce      	ble.n	588a <__aeabi_fdiv+0x162>
    58ec:	0763      	lsls	r3, r4, #29
    58ee:	d004      	beq.n	58fa <__aeabi_fdiv+0x1d2>
    58f0:	230f      	movs	r3, #15
    58f2:	4023      	ands	r3, r4
    58f4:	2b04      	cmp	r3, #4
    58f6:	d000      	beq.n	58fa <__aeabi_fdiv+0x1d2>
    58f8:	3404      	adds	r4, #4
    58fa:	0123      	lsls	r3, r4, #4
    58fc:	d503      	bpl.n	5906 <__aeabi_fdiv+0x1de>
    58fe:	0001      	movs	r1, r0
    5900:	4b2c      	ldr	r3, [pc, #176]	; (59b4 <__aeabi_fdiv+0x28c>)
    5902:	3180      	adds	r1, #128	; 0x80
    5904:	401c      	ands	r4, r3
    5906:	29fe      	cmp	r1, #254	; 0xfe
    5908:	dd0d      	ble.n	5926 <__aeabi_fdiv+0x1fe>
    590a:	2301      	movs	r3, #1
    590c:	9a01      	ldr	r2, [sp, #4]
    590e:	21ff      	movs	r1, #255	; 0xff
    5910:	4013      	ands	r3, r2
    5912:	2400      	movs	r4, #0
    5914:	e7a4      	b.n	5860 <__aeabi_fdiv+0x138>
    5916:	2380      	movs	r3, #128	; 0x80
    5918:	03db      	lsls	r3, r3, #15
    591a:	431c      	orrs	r4, r3
    591c:	0264      	lsls	r4, r4, #9
    591e:	0a64      	lsrs	r4, r4, #9
    5920:	0033      	movs	r3, r6
    5922:	21ff      	movs	r1, #255	; 0xff
    5924:	e79c      	b.n	5860 <__aeabi_fdiv+0x138>
    5926:	2301      	movs	r3, #1
    5928:	9a01      	ldr	r2, [sp, #4]
    592a:	01a4      	lsls	r4, r4, #6
    592c:	0a64      	lsrs	r4, r4, #9
    592e:	b2c9      	uxtb	r1, r1
    5930:	4013      	ands	r3, r2
    5932:	e795      	b.n	5860 <__aeabi_fdiv+0x138>
    5934:	1b1b      	subs	r3, r3, r4
    5936:	261a      	movs	r6, #26
    5938:	2101      	movs	r1, #1
    593a:	e7c2      	b.n	58c2 <__aeabi_fdiv+0x19a>
    593c:	9b00      	ldr	r3, [sp, #0]
    593e:	468b      	mov	fp, r1
    5940:	469a      	mov	sl, r3
    5942:	2400      	movs	r4, #0
    5944:	e74c      	b.n	57e0 <__aeabi_fdiv+0xb8>
    5946:	0263      	lsls	r3, r4, #9
    5948:	d5e5      	bpl.n	5916 <__aeabi_fdiv+0x1ee>
    594a:	2500      	movs	r5, #0
    594c:	2480      	movs	r4, #128	; 0x80
    594e:	03e4      	lsls	r4, r4, #15
    5950:	432c      	orrs	r4, r5
    5952:	0264      	lsls	r4, r4, #9
    5954:	0a64      	lsrs	r4, r4, #9
    5956:	9b00      	ldr	r3, [sp, #0]
    5958:	21ff      	movs	r1, #255	; 0xff
    595a:	e781      	b.n	5860 <__aeabi_fdiv+0x138>
    595c:	9501      	str	r5, [sp, #4]
    595e:	e7c1      	b.n	58e4 <__aeabi_fdiv+0x1bc>
    5960:	0023      	movs	r3, r4
    5962:	2020      	movs	r0, #32
    5964:	40cb      	lsrs	r3, r1
    5966:	1a41      	subs	r1, r0, r1
    5968:	408c      	lsls	r4, r1
    596a:	1e61      	subs	r1, r4, #1
    596c:	418c      	sbcs	r4, r1
    596e:	431c      	orrs	r4, r3
    5970:	0763      	lsls	r3, r4, #29
    5972:	d004      	beq.n	597e <__aeabi_fdiv+0x256>
    5974:	230f      	movs	r3, #15
    5976:	4023      	ands	r3, r4
    5978:	2b04      	cmp	r3, #4
    597a:	d000      	beq.n	597e <__aeabi_fdiv+0x256>
    597c:	3404      	adds	r4, #4
    597e:	0163      	lsls	r3, r4, #5
    5980:	d505      	bpl.n	598e <__aeabi_fdiv+0x266>
    5982:	2301      	movs	r3, #1
    5984:	9a01      	ldr	r2, [sp, #4]
    5986:	2101      	movs	r1, #1
    5988:	4013      	ands	r3, r2
    598a:	2400      	movs	r4, #0
    598c:	e768      	b.n	5860 <__aeabi_fdiv+0x138>
    598e:	2301      	movs	r3, #1
    5990:	9a01      	ldr	r2, [sp, #4]
    5992:	01a4      	lsls	r4, r4, #6
    5994:	0a64      	lsrs	r4, r4, #9
    5996:	4013      	ands	r3, r2
    5998:	2100      	movs	r1, #0
    599a:	e761      	b.n	5860 <__aeabi_fdiv+0x138>
    599c:	2380      	movs	r3, #128	; 0x80
    599e:	03db      	lsls	r3, r3, #15
    59a0:	431c      	orrs	r4, r3
    59a2:	0264      	lsls	r4, r4, #9
    59a4:	0a64      	lsrs	r4, r4, #9
    59a6:	4653      	mov	r3, sl
    59a8:	21ff      	movs	r1, #255	; 0xff
    59aa:	e759      	b.n	5860 <__aeabi_fdiv+0x138>
    59ac:	0000a840 	.word	0x0000a840
    59b0:	0000a880 	.word	0x0000a880
    59b4:	f7ffffff 	.word	0xf7ffffff

000059b8 <__eqsf2>:
    59b8:	b570      	push	{r4, r5, r6, lr}
    59ba:	0042      	lsls	r2, r0, #1
    59bc:	0245      	lsls	r5, r0, #9
    59be:	024e      	lsls	r6, r1, #9
    59c0:	004c      	lsls	r4, r1, #1
    59c2:	0fc3      	lsrs	r3, r0, #31
    59c4:	0a6d      	lsrs	r5, r5, #9
    59c6:	0e12      	lsrs	r2, r2, #24
    59c8:	0a76      	lsrs	r6, r6, #9
    59ca:	0e24      	lsrs	r4, r4, #24
    59cc:	0fc9      	lsrs	r1, r1, #31
    59ce:	2001      	movs	r0, #1
    59d0:	2aff      	cmp	r2, #255	; 0xff
    59d2:	d006      	beq.n	59e2 <__eqsf2+0x2a>
    59d4:	2cff      	cmp	r4, #255	; 0xff
    59d6:	d003      	beq.n	59e0 <__eqsf2+0x28>
    59d8:	42a2      	cmp	r2, r4
    59da:	d101      	bne.n	59e0 <__eqsf2+0x28>
    59dc:	42b5      	cmp	r5, r6
    59de:	d006      	beq.n	59ee <__eqsf2+0x36>
    59e0:	bd70      	pop	{r4, r5, r6, pc}
    59e2:	2d00      	cmp	r5, #0
    59e4:	d1fc      	bne.n	59e0 <__eqsf2+0x28>
    59e6:	2cff      	cmp	r4, #255	; 0xff
    59e8:	d1fa      	bne.n	59e0 <__eqsf2+0x28>
    59ea:	2e00      	cmp	r6, #0
    59ec:	d1f8      	bne.n	59e0 <__eqsf2+0x28>
    59ee:	428b      	cmp	r3, r1
    59f0:	d006      	beq.n	5a00 <__eqsf2+0x48>
    59f2:	2001      	movs	r0, #1
    59f4:	2a00      	cmp	r2, #0
    59f6:	d1f3      	bne.n	59e0 <__eqsf2+0x28>
    59f8:	0028      	movs	r0, r5
    59fa:	1e45      	subs	r5, r0, #1
    59fc:	41a8      	sbcs	r0, r5
    59fe:	e7ef      	b.n	59e0 <__eqsf2+0x28>
    5a00:	2000      	movs	r0, #0
    5a02:	e7ed      	b.n	59e0 <__eqsf2+0x28>

00005a04 <__gesf2>:
    5a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a06:	0042      	lsls	r2, r0, #1
    5a08:	0245      	lsls	r5, r0, #9
    5a0a:	024c      	lsls	r4, r1, #9
    5a0c:	0fc3      	lsrs	r3, r0, #31
    5a0e:	0048      	lsls	r0, r1, #1
    5a10:	0a6d      	lsrs	r5, r5, #9
    5a12:	0e12      	lsrs	r2, r2, #24
    5a14:	0a64      	lsrs	r4, r4, #9
    5a16:	0e00      	lsrs	r0, r0, #24
    5a18:	0fc9      	lsrs	r1, r1, #31
    5a1a:	2aff      	cmp	r2, #255	; 0xff
    5a1c:	d01e      	beq.n	5a5c <__gesf2+0x58>
    5a1e:	28ff      	cmp	r0, #255	; 0xff
    5a20:	d021      	beq.n	5a66 <__gesf2+0x62>
    5a22:	2a00      	cmp	r2, #0
    5a24:	d10a      	bne.n	5a3c <__gesf2+0x38>
    5a26:	426e      	negs	r6, r5
    5a28:	416e      	adcs	r6, r5
    5a2a:	b2f6      	uxtb	r6, r6
    5a2c:	2800      	cmp	r0, #0
    5a2e:	d10f      	bne.n	5a50 <__gesf2+0x4c>
    5a30:	2c00      	cmp	r4, #0
    5a32:	d10d      	bne.n	5a50 <__gesf2+0x4c>
    5a34:	2000      	movs	r0, #0
    5a36:	2d00      	cmp	r5, #0
    5a38:	d009      	beq.n	5a4e <__gesf2+0x4a>
    5a3a:	e005      	b.n	5a48 <__gesf2+0x44>
    5a3c:	2800      	cmp	r0, #0
    5a3e:	d101      	bne.n	5a44 <__gesf2+0x40>
    5a40:	2c00      	cmp	r4, #0
    5a42:	d001      	beq.n	5a48 <__gesf2+0x44>
    5a44:	428b      	cmp	r3, r1
    5a46:	d011      	beq.n	5a6c <__gesf2+0x68>
    5a48:	2101      	movs	r1, #1
    5a4a:	4258      	negs	r0, r3
    5a4c:	4308      	orrs	r0, r1
    5a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a50:	2e00      	cmp	r6, #0
    5a52:	d0f7      	beq.n	5a44 <__gesf2+0x40>
    5a54:	2001      	movs	r0, #1
    5a56:	3901      	subs	r1, #1
    5a58:	4308      	orrs	r0, r1
    5a5a:	e7f8      	b.n	5a4e <__gesf2+0x4a>
    5a5c:	2d00      	cmp	r5, #0
    5a5e:	d0de      	beq.n	5a1e <__gesf2+0x1a>
    5a60:	2002      	movs	r0, #2
    5a62:	4240      	negs	r0, r0
    5a64:	e7f3      	b.n	5a4e <__gesf2+0x4a>
    5a66:	2c00      	cmp	r4, #0
    5a68:	d0db      	beq.n	5a22 <__gesf2+0x1e>
    5a6a:	e7f9      	b.n	5a60 <__gesf2+0x5c>
    5a6c:	4282      	cmp	r2, r0
    5a6e:	dceb      	bgt.n	5a48 <__gesf2+0x44>
    5a70:	db04      	blt.n	5a7c <__gesf2+0x78>
    5a72:	42a5      	cmp	r5, r4
    5a74:	d8e8      	bhi.n	5a48 <__gesf2+0x44>
    5a76:	2000      	movs	r0, #0
    5a78:	42a5      	cmp	r5, r4
    5a7a:	d2e8      	bcs.n	5a4e <__gesf2+0x4a>
    5a7c:	2101      	movs	r1, #1
    5a7e:	1e58      	subs	r0, r3, #1
    5a80:	4308      	orrs	r0, r1
    5a82:	e7e4      	b.n	5a4e <__gesf2+0x4a>

00005a84 <__lesf2>:
    5a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a86:	0042      	lsls	r2, r0, #1
    5a88:	024d      	lsls	r5, r1, #9
    5a8a:	004c      	lsls	r4, r1, #1
    5a8c:	0246      	lsls	r6, r0, #9
    5a8e:	0a76      	lsrs	r6, r6, #9
    5a90:	0e12      	lsrs	r2, r2, #24
    5a92:	0fc3      	lsrs	r3, r0, #31
    5a94:	0a6d      	lsrs	r5, r5, #9
    5a96:	0e24      	lsrs	r4, r4, #24
    5a98:	0fc9      	lsrs	r1, r1, #31
    5a9a:	2aff      	cmp	r2, #255	; 0xff
    5a9c:	d016      	beq.n	5acc <__lesf2+0x48>
    5a9e:	2cff      	cmp	r4, #255	; 0xff
    5aa0:	d018      	beq.n	5ad4 <__lesf2+0x50>
    5aa2:	2a00      	cmp	r2, #0
    5aa4:	d10a      	bne.n	5abc <__lesf2+0x38>
    5aa6:	4270      	negs	r0, r6
    5aa8:	4170      	adcs	r0, r6
    5aaa:	b2c0      	uxtb	r0, r0
    5aac:	2c00      	cmp	r4, #0
    5aae:	d015      	beq.n	5adc <__lesf2+0x58>
    5ab0:	2800      	cmp	r0, #0
    5ab2:	d005      	beq.n	5ac0 <__lesf2+0x3c>
    5ab4:	2001      	movs	r0, #1
    5ab6:	3901      	subs	r1, #1
    5ab8:	4308      	orrs	r0, r1
    5aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5abc:	2c00      	cmp	r4, #0
    5abe:	d013      	beq.n	5ae8 <__lesf2+0x64>
    5ac0:	4299      	cmp	r1, r3
    5ac2:	d014      	beq.n	5aee <__lesf2+0x6a>
    5ac4:	2001      	movs	r0, #1
    5ac6:	425b      	negs	r3, r3
    5ac8:	4318      	orrs	r0, r3
    5aca:	e7f6      	b.n	5aba <__lesf2+0x36>
    5acc:	2002      	movs	r0, #2
    5ace:	2e00      	cmp	r6, #0
    5ad0:	d1f3      	bne.n	5aba <__lesf2+0x36>
    5ad2:	e7e4      	b.n	5a9e <__lesf2+0x1a>
    5ad4:	2002      	movs	r0, #2
    5ad6:	2d00      	cmp	r5, #0
    5ad8:	d1ef      	bne.n	5aba <__lesf2+0x36>
    5ada:	e7e2      	b.n	5aa2 <__lesf2+0x1e>
    5adc:	2d00      	cmp	r5, #0
    5ade:	d1e7      	bne.n	5ab0 <__lesf2+0x2c>
    5ae0:	2000      	movs	r0, #0
    5ae2:	2e00      	cmp	r6, #0
    5ae4:	d0e9      	beq.n	5aba <__lesf2+0x36>
    5ae6:	e7ed      	b.n	5ac4 <__lesf2+0x40>
    5ae8:	2d00      	cmp	r5, #0
    5aea:	d1e9      	bne.n	5ac0 <__lesf2+0x3c>
    5aec:	e7ea      	b.n	5ac4 <__lesf2+0x40>
    5aee:	42a2      	cmp	r2, r4
    5af0:	dc06      	bgt.n	5b00 <__lesf2+0x7c>
    5af2:	dbdf      	blt.n	5ab4 <__lesf2+0x30>
    5af4:	42ae      	cmp	r6, r5
    5af6:	d803      	bhi.n	5b00 <__lesf2+0x7c>
    5af8:	2000      	movs	r0, #0
    5afa:	42ae      	cmp	r6, r5
    5afc:	d3da      	bcc.n	5ab4 <__lesf2+0x30>
    5afe:	e7dc      	b.n	5aba <__lesf2+0x36>
    5b00:	2001      	movs	r0, #1
    5b02:	4249      	negs	r1, r1
    5b04:	4308      	orrs	r0, r1
    5b06:	e7d8      	b.n	5aba <__lesf2+0x36>

00005b08 <__aeabi_fmul>:
    5b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b0a:	4657      	mov	r7, sl
    5b0c:	464e      	mov	r6, r9
    5b0e:	4645      	mov	r5, r8
    5b10:	46de      	mov	lr, fp
    5b12:	b5e0      	push	{r5, r6, r7, lr}
    5b14:	0247      	lsls	r7, r0, #9
    5b16:	0046      	lsls	r6, r0, #1
    5b18:	4688      	mov	r8, r1
    5b1a:	0a7f      	lsrs	r7, r7, #9
    5b1c:	0e36      	lsrs	r6, r6, #24
    5b1e:	0fc4      	lsrs	r4, r0, #31
    5b20:	2e00      	cmp	r6, #0
    5b22:	d047      	beq.n	5bb4 <__aeabi_fmul+0xac>
    5b24:	2eff      	cmp	r6, #255	; 0xff
    5b26:	d024      	beq.n	5b72 <__aeabi_fmul+0x6a>
    5b28:	00fb      	lsls	r3, r7, #3
    5b2a:	2780      	movs	r7, #128	; 0x80
    5b2c:	04ff      	lsls	r7, r7, #19
    5b2e:	431f      	orrs	r7, r3
    5b30:	2300      	movs	r3, #0
    5b32:	4699      	mov	r9, r3
    5b34:	469a      	mov	sl, r3
    5b36:	3e7f      	subs	r6, #127	; 0x7f
    5b38:	4643      	mov	r3, r8
    5b3a:	025d      	lsls	r5, r3, #9
    5b3c:	0058      	lsls	r0, r3, #1
    5b3e:	0fdb      	lsrs	r3, r3, #31
    5b40:	0a6d      	lsrs	r5, r5, #9
    5b42:	0e00      	lsrs	r0, r0, #24
    5b44:	4698      	mov	r8, r3
    5b46:	d043      	beq.n	5bd0 <__aeabi_fmul+0xc8>
    5b48:	28ff      	cmp	r0, #255	; 0xff
    5b4a:	d03b      	beq.n	5bc4 <__aeabi_fmul+0xbc>
    5b4c:	00eb      	lsls	r3, r5, #3
    5b4e:	2580      	movs	r5, #128	; 0x80
    5b50:	2200      	movs	r2, #0
    5b52:	04ed      	lsls	r5, r5, #19
    5b54:	431d      	orrs	r5, r3
    5b56:	387f      	subs	r0, #127	; 0x7f
    5b58:	1836      	adds	r6, r6, r0
    5b5a:	1c73      	adds	r3, r6, #1
    5b5c:	4641      	mov	r1, r8
    5b5e:	469b      	mov	fp, r3
    5b60:	464b      	mov	r3, r9
    5b62:	4061      	eors	r1, r4
    5b64:	4313      	orrs	r3, r2
    5b66:	2b0f      	cmp	r3, #15
    5b68:	d864      	bhi.n	5c34 <__aeabi_fmul+0x12c>
    5b6a:	4875      	ldr	r0, [pc, #468]	; (5d40 <__aeabi_fmul+0x238>)
    5b6c:	009b      	lsls	r3, r3, #2
    5b6e:	58c3      	ldr	r3, [r0, r3]
    5b70:	469f      	mov	pc, r3
    5b72:	2f00      	cmp	r7, #0
    5b74:	d142      	bne.n	5bfc <__aeabi_fmul+0xf4>
    5b76:	2308      	movs	r3, #8
    5b78:	4699      	mov	r9, r3
    5b7a:	3b06      	subs	r3, #6
    5b7c:	26ff      	movs	r6, #255	; 0xff
    5b7e:	469a      	mov	sl, r3
    5b80:	e7da      	b.n	5b38 <__aeabi_fmul+0x30>
    5b82:	4641      	mov	r1, r8
    5b84:	2a02      	cmp	r2, #2
    5b86:	d028      	beq.n	5bda <__aeabi_fmul+0xd2>
    5b88:	2a03      	cmp	r2, #3
    5b8a:	d100      	bne.n	5b8e <__aeabi_fmul+0x86>
    5b8c:	e0ce      	b.n	5d2c <__aeabi_fmul+0x224>
    5b8e:	2a01      	cmp	r2, #1
    5b90:	d000      	beq.n	5b94 <__aeabi_fmul+0x8c>
    5b92:	e0ac      	b.n	5cee <__aeabi_fmul+0x1e6>
    5b94:	4011      	ands	r1, r2
    5b96:	2000      	movs	r0, #0
    5b98:	2200      	movs	r2, #0
    5b9a:	b2cc      	uxtb	r4, r1
    5b9c:	0240      	lsls	r0, r0, #9
    5b9e:	05d2      	lsls	r2, r2, #23
    5ba0:	0a40      	lsrs	r0, r0, #9
    5ba2:	07e4      	lsls	r4, r4, #31
    5ba4:	4310      	orrs	r0, r2
    5ba6:	4320      	orrs	r0, r4
    5ba8:	bc3c      	pop	{r2, r3, r4, r5}
    5baa:	4690      	mov	r8, r2
    5bac:	4699      	mov	r9, r3
    5bae:	46a2      	mov	sl, r4
    5bb0:	46ab      	mov	fp, r5
    5bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bb4:	2f00      	cmp	r7, #0
    5bb6:	d115      	bne.n	5be4 <__aeabi_fmul+0xdc>
    5bb8:	2304      	movs	r3, #4
    5bba:	4699      	mov	r9, r3
    5bbc:	3b03      	subs	r3, #3
    5bbe:	2600      	movs	r6, #0
    5bc0:	469a      	mov	sl, r3
    5bc2:	e7b9      	b.n	5b38 <__aeabi_fmul+0x30>
    5bc4:	20ff      	movs	r0, #255	; 0xff
    5bc6:	2202      	movs	r2, #2
    5bc8:	2d00      	cmp	r5, #0
    5bca:	d0c5      	beq.n	5b58 <__aeabi_fmul+0x50>
    5bcc:	2203      	movs	r2, #3
    5bce:	e7c3      	b.n	5b58 <__aeabi_fmul+0x50>
    5bd0:	2d00      	cmp	r5, #0
    5bd2:	d119      	bne.n	5c08 <__aeabi_fmul+0x100>
    5bd4:	2000      	movs	r0, #0
    5bd6:	2201      	movs	r2, #1
    5bd8:	e7be      	b.n	5b58 <__aeabi_fmul+0x50>
    5bda:	2401      	movs	r4, #1
    5bdc:	22ff      	movs	r2, #255	; 0xff
    5bde:	400c      	ands	r4, r1
    5be0:	2000      	movs	r0, #0
    5be2:	e7db      	b.n	5b9c <__aeabi_fmul+0x94>
    5be4:	0038      	movs	r0, r7
    5be6:	f7ff fd2b 	bl	5640 <__clzsi2>
    5bea:	2676      	movs	r6, #118	; 0x76
    5bec:	1f43      	subs	r3, r0, #5
    5bee:	409f      	lsls	r7, r3
    5bf0:	2300      	movs	r3, #0
    5bf2:	4276      	negs	r6, r6
    5bf4:	1a36      	subs	r6, r6, r0
    5bf6:	4699      	mov	r9, r3
    5bf8:	469a      	mov	sl, r3
    5bfa:	e79d      	b.n	5b38 <__aeabi_fmul+0x30>
    5bfc:	230c      	movs	r3, #12
    5bfe:	4699      	mov	r9, r3
    5c00:	3b09      	subs	r3, #9
    5c02:	26ff      	movs	r6, #255	; 0xff
    5c04:	469a      	mov	sl, r3
    5c06:	e797      	b.n	5b38 <__aeabi_fmul+0x30>
    5c08:	0028      	movs	r0, r5
    5c0a:	f7ff fd19 	bl	5640 <__clzsi2>
    5c0e:	1f43      	subs	r3, r0, #5
    5c10:	409d      	lsls	r5, r3
    5c12:	2376      	movs	r3, #118	; 0x76
    5c14:	425b      	negs	r3, r3
    5c16:	1a18      	subs	r0, r3, r0
    5c18:	2200      	movs	r2, #0
    5c1a:	e79d      	b.n	5b58 <__aeabi_fmul+0x50>
    5c1c:	2080      	movs	r0, #128	; 0x80
    5c1e:	2400      	movs	r4, #0
    5c20:	03c0      	lsls	r0, r0, #15
    5c22:	22ff      	movs	r2, #255	; 0xff
    5c24:	e7ba      	b.n	5b9c <__aeabi_fmul+0x94>
    5c26:	003d      	movs	r5, r7
    5c28:	4652      	mov	r2, sl
    5c2a:	e7ab      	b.n	5b84 <__aeabi_fmul+0x7c>
    5c2c:	003d      	movs	r5, r7
    5c2e:	0021      	movs	r1, r4
    5c30:	4652      	mov	r2, sl
    5c32:	e7a7      	b.n	5b84 <__aeabi_fmul+0x7c>
    5c34:	0c3b      	lsrs	r3, r7, #16
    5c36:	469c      	mov	ip, r3
    5c38:	042a      	lsls	r2, r5, #16
    5c3a:	0c12      	lsrs	r2, r2, #16
    5c3c:	0c2b      	lsrs	r3, r5, #16
    5c3e:	0014      	movs	r4, r2
    5c40:	4660      	mov	r0, ip
    5c42:	4665      	mov	r5, ip
    5c44:	043f      	lsls	r7, r7, #16
    5c46:	0c3f      	lsrs	r7, r7, #16
    5c48:	437c      	muls	r4, r7
    5c4a:	4342      	muls	r2, r0
    5c4c:	435d      	muls	r5, r3
    5c4e:	437b      	muls	r3, r7
    5c50:	0c27      	lsrs	r7, r4, #16
    5c52:	189b      	adds	r3, r3, r2
    5c54:	18ff      	adds	r7, r7, r3
    5c56:	42ba      	cmp	r2, r7
    5c58:	d903      	bls.n	5c62 <__aeabi_fmul+0x15a>
    5c5a:	2380      	movs	r3, #128	; 0x80
    5c5c:	025b      	lsls	r3, r3, #9
    5c5e:	469c      	mov	ip, r3
    5c60:	4465      	add	r5, ip
    5c62:	0424      	lsls	r4, r4, #16
    5c64:	043a      	lsls	r2, r7, #16
    5c66:	0c24      	lsrs	r4, r4, #16
    5c68:	1912      	adds	r2, r2, r4
    5c6a:	0193      	lsls	r3, r2, #6
    5c6c:	1e5c      	subs	r4, r3, #1
    5c6e:	41a3      	sbcs	r3, r4
    5c70:	0c3f      	lsrs	r7, r7, #16
    5c72:	0e92      	lsrs	r2, r2, #26
    5c74:	197d      	adds	r5, r7, r5
    5c76:	431a      	orrs	r2, r3
    5c78:	01ad      	lsls	r5, r5, #6
    5c7a:	4315      	orrs	r5, r2
    5c7c:	012b      	lsls	r3, r5, #4
    5c7e:	d504      	bpl.n	5c8a <__aeabi_fmul+0x182>
    5c80:	2301      	movs	r3, #1
    5c82:	465e      	mov	r6, fp
    5c84:	086a      	lsrs	r2, r5, #1
    5c86:	401d      	ands	r5, r3
    5c88:	4315      	orrs	r5, r2
    5c8a:	0032      	movs	r2, r6
    5c8c:	327f      	adds	r2, #127	; 0x7f
    5c8e:	2a00      	cmp	r2, #0
    5c90:	dd25      	ble.n	5cde <__aeabi_fmul+0x1d6>
    5c92:	076b      	lsls	r3, r5, #29
    5c94:	d004      	beq.n	5ca0 <__aeabi_fmul+0x198>
    5c96:	230f      	movs	r3, #15
    5c98:	402b      	ands	r3, r5
    5c9a:	2b04      	cmp	r3, #4
    5c9c:	d000      	beq.n	5ca0 <__aeabi_fmul+0x198>
    5c9e:	3504      	adds	r5, #4
    5ca0:	012b      	lsls	r3, r5, #4
    5ca2:	d503      	bpl.n	5cac <__aeabi_fmul+0x1a4>
    5ca4:	0032      	movs	r2, r6
    5ca6:	4b27      	ldr	r3, [pc, #156]	; (5d44 <__aeabi_fmul+0x23c>)
    5ca8:	3280      	adds	r2, #128	; 0x80
    5caa:	401d      	ands	r5, r3
    5cac:	2afe      	cmp	r2, #254	; 0xfe
    5cae:	dc94      	bgt.n	5bda <__aeabi_fmul+0xd2>
    5cb0:	2401      	movs	r4, #1
    5cb2:	01a8      	lsls	r0, r5, #6
    5cb4:	0a40      	lsrs	r0, r0, #9
    5cb6:	b2d2      	uxtb	r2, r2
    5cb8:	400c      	ands	r4, r1
    5cba:	e76f      	b.n	5b9c <__aeabi_fmul+0x94>
    5cbc:	2080      	movs	r0, #128	; 0x80
    5cbe:	03c0      	lsls	r0, r0, #15
    5cc0:	4207      	tst	r7, r0
    5cc2:	d007      	beq.n	5cd4 <__aeabi_fmul+0x1cc>
    5cc4:	4205      	tst	r5, r0
    5cc6:	d105      	bne.n	5cd4 <__aeabi_fmul+0x1cc>
    5cc8:	4328      	orrs	r0, r5
    5cca:	0240      	lsls	r0, r0, #9
    5ccc:	0a40      	lsrs	r0, r0, #9
    5cce:	4644      	mov	r4, r8
    5cd0:	22ff      	movs	r2, #255	; 0xff
    5cd2:	e763      	b.n	5b9c <__aeabi_fmul+0x94>
    5cd4:	4338      	orrs	r0, r7
    5cd6:	0240      	lsls	r0, r0, #9
    5cd8:	0a40      	lsrs	r0, r0, #9
    5cda:	22ff      	movs	r2, #255	; 0xff
    5cdc:	e75e      	b.n	5b9c <__aeabi_fmul+0x94>
    5cde:	2401      	movs	r4, #1
    5ce0:	1aa3      	subs	r3, r4, r2
    5ce2:	2b1b      	cmp	r3, #27
    5ce4:	dd05      	ble.n	5cf2 <__aeabi_fmul+0x1ea>
    5ce6:	400c      	ands	r4, r1
    5ce8:	2200      	movs	r2, #0
    5cea:	2000      	movs	r0, #0
    5cec:	e756      	b.n	5b9c <__aeabi_fmul+0x94>
    5cee:	465e      	mov	r6, fp
    5cf0:	e7cb      	b.n	5c8a <__aeabi_fmul+0x182>
    5cf2:	002a      	movs	r2, r5
    5cf4:	2020      	movs	r0, #32
    5cf6:	40da      	lsrs	r2, r3
    5cf8:	1ac3      	subs	r3, r0, r3
    5cfa:	409d      	lsls	r5, r3
    5cfc:	002b      	movs	r3, r5
    5cfe:	1e5d      	subs	r5, r3, #1
    5d00:	41ab      	sbcs	r3, r5
    5d02:	4313      	orrs	r3, r2
    5d04:	075a      	lsls	r2, r3, #29
    5d06:	d004      	beq.n	5d12 <__aeabi_fmul+0x20a>
    5d08:	220f      	movs	r2, #15
    5d0a:	401a      	ands	r2, r3
    5d0c:	2a04      	cmp	r2, #4
    5d0e:	d000      	beq.n	5d12 <__aeabi_fmul+0x20a>
    5d10:	3304      	adds	r3, #4
    5d12:	015a      	lsls	r2, r3, #5
    5d14:	d504      	bpl.n	5d20 <__aeabi_fmul+0x218>
    5d16:	2401      	movs	r4, #1
    5d18:	2201      	movs	r2, #1
    5d1a:	400c      	ands	r4, r1
    5d1c:	2000      	movs	r0, #0
    5d1e:	e73d      	b.n	5b9c <__aeabi_fmul+0x94>
    5d20:	2401      	movs	r4, #1
    5d22:	019b      	lsls	r3, r3, #6
    5d24:	0a58      	lsrs	r0, r3, #9
    5d26:	400c      	ands	r4, r1
    5d28:	2200      	movs	r2, #0
    5d2a:	e737      	b.n	5b9c <__aeabi_fmul+0x94>
    5d2c:	2080      	movs	r0, #128	; 0x80
    5d2e:	2401      	movs	r4, #1
    5d30:	03c0      	lsls	r0, r0, #15
    5d32:	4328      	orrs	r0, r5
    5d34:	0240      	lsls	r0, r0, #9
    5d36:	0a40      	lsrs	r0, r0, #9
    5d38:	400c      	ands	r4, r1
    5d3a:	22ff      	movs	r2, #255	; 0xff
    5d3c:	e72e      	b.n	5b9c <__aeabi_fmul+0x94>
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	0000a8c0 	.word	0x0000a8c0
    5d44:	f7ffffff 	.word	0xf7ffffff

00005d48 <__aeabi_fsub>:
    5d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d4a:	464f      	mov	r7, r9
    5d4c:	46d6      	mov	lr, sl
    5d4e:	4646      	mov	r6, r8
    5d50:	0044      	lsls	r4, r0, #1
    5d52:	b5c0      	push	{r6, r7, lr}
    5d54:	0fc2      	lsrs	r2, r0, #31
    5d56:	0247      	lsls	r7, r0, #9
    5d58:	0248      	lsls	r0, r1, #9
    5d5a:	0a40      	lsrs	r0, r0, #9
    5d5c:	4684      	mov	ip, r0
    5d5e:	4666      	mov	r6, ip
    5d60:	0a7b      	lsrs	r3, r7, #9
    5d62:	0048      	lsls	r0, r1, #1
    5d64:	0fc9      	lsrs	r1, r1, #31
    5d66:	469a      	mov	sl, r3
    5d68:	0e24      	lsrs	r4, r4, #24
    5d6a:	0015      	movs	r5, r2
    5d6c:	00db      	lsls	r3, r3, #3
    5d6e:	0e00      	lsrs	r0, r0, #24
    5d70:	4689      	mov	r9, r1
    5d72:	00f6      	lsls	r6, r6, #3
    5d74:	28ff      	cmp	r0, #255	; 0xff
    5d76:	d100      	bne.n	5d7a <__aeabi_fsub+0x32>
    5d78:	e08f      	b.n	5e9a <__aeabi_fsub+0x152>
    5d7a:	2101      	movs	r1, #1
    5d7c:	464f      	mov	r7, r9
    5d7e:	404f      	eors	r7, r1
    5d80:	0039      	movs	r1, r7
    5d82:	4291      	cmp	r1, r2
    5d84:	d066      	beq.n	5e54 <__aeabi_fsub+0x10c>
    5d86:	1a22      	subs	r2, r4, r0
    5d88:	2a00      	cmp	r2, #0
    5d8a:	dc00      	bgt.n	5d8e <__aeabi_fsub+0x46>
    5d8c:	e09d      	b.n	5eca <__aeabi_fsub+0x182>
    5d8e:	2800      	cmp	r0, #0
    5d90:	d13d      	bne.n	5e0e <__aeabi_fsub+0xc6>
    5d92:	2e00      	cmp	r6, #0
    5d94:	d100      	bne.n	5d98 <__aeabi_fsub+0x50>
    5d96:	e08b      	b.n	5eb0 <__aeabi_fsub+0x168>
    5d98:	1e51      	subs	r1, r2, #1
    5d9a:	2900      	cmp	r1, #0
    5d9c:	d000      	beq.n	5da0 <__aeabi_fsub+0x58>
    5d9e:	e0b5      	b.n	5f0c <__aeabi_fsub+0x1c4>
    5da0:	2401      	movs	r4, #1
    5da2:	1b9b      	subs	r3, r3, r6
    5da4:	015a      	lsls	r2, r3, #5
    5da6:	d544      	bpl.n	5e32 <__aeabi_fsub+0xea>
    5da8:	019b      	lsls	r3, r3, #6
    5daa:	099f      	lsrs	r7, r3, #6
    5dac:	0038      	movs	r0, r7
    5dae:	f7ff fc47 	bl	5640 <__clzsi2>
    5db2:	3805      	subs	r0, #5
    5db4:	4087      	lsls	r7, r0
    5db6:	4284      	cmp	r4, r0
    5db8:	dd00      	ble.n	5dbc <__aeabi_fsub+0x74>
    5dba:	e096      	b.n	5eea <__aeabi_fsub+0x1a2>
    5dbc:	1b04      	subs	r4, r0, r4
    5dbe:	003a      	movs	r2, r7
    5dc0:	2020      	movs	r0, #32
    5dc2:	3401      	adds	r4, #1
    5dc4:	40e2      	lsrs	r2, r4
    5dc6:	1b04      	subs	r4, r0, r4
    5dc8:	40a7      	lsls	r7, r4
    5dca:	003b      	movs	r3, r7
    5dcc:	1e5f      	subs	r7, r3, #1
    5dce:	41bb      	sbcs	r3, r7
    5dd0:	2400      	movs	r4, #0
    5dd2:	4313      	orrs	r3, r2
    5dd4:	075a      	lsls	r2, r3, #29
    5dd6:	d004      	beq.n	5de2 <__aeabi_fsub+0x9a>
    5dd8:	220f      	movs	r2, #15
    5dda:	401a      	ands	r2, r3
    5ddc:	2a04      	cmp	r2, #4
    5dde:	d000      	beq.n	5de2 <__aeabi_fsub+0x9a>
    5de0:	3304      	adds	r3, #4
    5de2:	015a      	lsls	r2, r3, #5
    5de4:	d527      	bpl.n	5e36 <__aeabi_fsub+0xee>
    5de6:	3401      	adds	r4, #1
    5de8:	2cff      	cmp	r4, #255	; 0xff
    5dea:	d100      	bne.n	5dee <__aeabi_fsub+0xa6>
    5dec:	e079      	b.n	5ee2 <__aeabi_fsub+0x19a>
    5dee:	2201      	movs	r2, #1
    5df0:	019b      	lsls	r3, r3, #6
    5df2:	0a5b      	lsrs	r3, r3, #9
    5df4:	b2e4      	uxtb	r4, r4
    5df6:	402a      	ands	r2, r5
    5df8:	025b      	lsls	r3, r3, #9
    5dfa:	05e4      	lsls	r4, r4, #23
    5dfc:	0a58      	lsrs	r0, r3, #9
    5dfe:	07d2      	lsls	r2, r2, #31
    5e00:	4320      	orrs	r0, r4
    5e02:	4310      	orrs	r0, r2
    5e04:	bc1c      	pop	{r2, r3, r4}
    5e06:	4690      	mov	r8, r2
    5e08:	4699      	mov	r9, r3
    5e0a:	46a2      	mov	sl, r4
    5e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e0e:	2cff      	cmp	r4, #255	; 0xff
    5e10:	d0e0      	beq.n	5dd4 <__aeabi_fsub+0x8c>
    5e12:	2180      	movs	r1, #128	; 0x80
    5e14:	04c9      	lsls	r1, r1, #19
    5e16:	430e      	orrs	r6, r1
    5e18:	2a1b      	cmp	r2, #27
    5e1a:	dc7b      	bgt.n	5f14 <__aeabi_fsub+0x1cc>
    5e1c:	0031      	movs	r1, r6
    5e1e:	2020      	movs	r0, #32
    5e20:	40d1      	lsrs	r1, r2
    5e22:	1a82      	subs	r2, r0, r2
    5e24:	4096      	lsls	r6, r2
    5e26:	1e72      	subs	r2, r6, #1
    5e28:	4196      	sbcs	r6, r2
    5e2a:	430e      	orrs	r6, r1
    5e2c:	1b9b      	subs	r3, r3, r6
    5e2e:	015a      	lsls	r2, r3, #5
    5e30:	d4ba      	bmi.n	5da8 <__aeabi_fsub+0x60>
    5e32:	075a      	lsls	r2, r3, #29
    5e34:	d1d0      	bne.n	5dd8 <__aeabi_fsub+0x90>
    5e36:	2201      	movs	r2, #1
    5e38:	08df      	lsrs	r7, r3, #3
    5e3a:	402a      	ands	r2, r5
    5e3c:	2cff      	cmp	r4, #255	; 0xff
    5e3e:	d133      	bne.n	5ea8 <__aeabi_fsub+0x160>
    5e40:	2f00      	cmp	r7, #0
    5e42:	d100      	bne.n	5e46 <__aeabi_fsub+0xfe>
    5e44:	e0a8      	b.n	5f98 <__aeabi_fsub+0x250>
    5e46:	2380      	movs	r3, #128	; 0x80
    5e48:	03db      	lsls	r3, r3, #15
    5e4a:	433b      	orrs	r3, r7
    5e4c:	025b      	lsls	r3, r3, #9
    5e4e:	0a5b      	lsrs	r3, r3, #9
    5e50:	24ff      	movs	r4, #255	; 0xff
    5e52:	e7d1      	b.n	5df8 <__aeabi_fsub+0xb0>
    5e54:	1a21      	subs	r1, r4, r0
    5e56:	2900      	cmp	r1, #0
    5e58:	dd4c      	ble.n	5ef4 <__aeabi_fsub+0x1ac>
    5e5a:	2800      	cmp	r0, #0
    5e5c:	d02a      	beq.n	5eb4 <__aeabi_fsub+0x16c>
    5e5e:	2cff      	cmp	r4, #255	; 0xff
    5e60:	d0b8      	beq.n	5dd4 <__aeabi_fsub+0x8c>
    5e62:	2080      	movs	r0, #128	; 0x80
    5e64:	04c0      	lsls	r0, r0, #19
    5e66:	4306      	orrs	r6, r0
    5e68:	291b      	cmp	r1, #27
    5e6a:	dd00      	ble.n	5e6e <__aeabi_fsub+0x126>
    5e6c:	e0af      	b.n	5fce <__aeabi_fsub+0x286>
    5e6e:	0030      	movs	r0, r6
    5e70:	2720      	movs	r7, #32
    5e72:	40c8      	lsrs	r0, r1
    5e74:	1a79      	subs	r1, r7, r1
    5e76:	408e      	lsls	r6, r1
    5e78:	1e71      	subs	r1, r6, #1
    5e7a:	418e      	sbcs	r6, r1
    5e7c:	4306      	orrs	r6, r0
    5e7e:	199b      	adds	r3, r3, r6
    5e80:	0159      	lsls	r1, r3, #5
    5e82:	d5d6      	bpl.n	5e32 <__aeabi_fsub+0xea>
    5e84:	3401      	adds	r4, #1
    5e86:	2cff      	cmp	r4, #255	; 0xff
    5e88:	d100      	bne.n	5e8c <__aeabi_fsub+0x144>
    5e8a:	e085      	b.n	5f98 <__aeabi_fsub+0x250>
    5e8c:	2201      	movs	r2, #1
    5e8e:	497a      	ldr	r1, [pc, #488]	; (6078 <__aeabi_fsub+0x330>)
    5e90:	401a      	ands	r2, r3
    5e92:	085b      	lsrs	r3, r3, #1
    5e94:	400b      	ands	r3, r1
    5e96:	4313      	orrs	r3, r2
    5e98:	e79c      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5e9a:	2e00      	cmp	r6, #0
    5e9c:	d000      	beq.n	5ea0 <__aeabi_fsub+0x158>
    5e9e:	e770      	b.n	5d82 <__aeabi_fsub+0x3a>
    5ea0:	e76b      	b.n	5d7a <__aeabi_fsub+0x32>
    5ea2:	1e3b      	subs	r3, r7, #0
    5ea4:	d1c5      	bne.n	5e32 <__aeabi_fsub+0xea>
    5ea6:	2200      	movs	r2, #0
    5ea8:	027b      	lsls	r3, r7, #9
    5eaa:	0a5b      	lsrs	r3, r3, #9
    5eac:	b2e4      	uxtb	r4, r4
    5eae:	e7a3      	b.n	5df8 <__aeabi_fsub+0xb0>
    5eb0:	0014      	movs	r4, r2
    5eb2:	e78f      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5eb4:	2e00      	cmp	r6, #0
    5eb6:	d04d      	beq.n	5f54 <__aeabi_fsub+0x20c>
    5eb8:	1e48      	subs	r0, r1, #1
    5eba:	2800      	cmp	r0, #0
    5ebc:	d157      	bne.n	5f6e <__aeabi_fsub+0x226>
    5ebe:	199b      	adds	r3, r3, r6
    5ec0:	2401      	movs	r4, #1
    5ec2:	015a      	lsls	r2, r3, #5
    5ec4:	d5b5      	bpl.n	5e32 <__aeabi_fsub+0xea>
    5ec6:	2402      	movs	r4, #2
    5ec8:	e7e0      	b.n	5e8c <__aeabi_fsub+0x144>
    5eca:	2a00      	cmp	r2, #0
    5ecc:	d125      	bne.n	5f1a <__aeabi_fsub+0x1d2>
    5ece:	1c62      	adds	r2, r4, #1
    5ed0:	b2d2      	uxtb	r2, r2
    5ed2:	2a01      	cmp	r2, #1
    5ed4:	dd72      	ble.n	5fbc <__aeabi_fsub+0x274>
    5ed6:	1b9f      	subs	r7, r3, r6
    5ed8:	017a      	lsls	r2, r7, #5
    5eda:	d535      	bpl.n	5f48 <__aeabi_fsub+0x200>
    5edc:	1af7      	subs	r7, r6, r3
    5ede:	000d      	movs	r5, r1
    5ee0:	e764      	b.n	5dac <__aeabi_fsub+0x64>
    5ee2:	2201      	movs	r2, #1
    5ee4:	2300      	movs	r3, #0
    5ee6:	402a      	ands	r2, r5
    5ee8:	e786      	b.n	5df8 <__aeabi_fsub+0xb0>
    5eea:	003b      	movs	r3, r7
    5eec:	4a63      	ldr	r2, [pc, #396]	; (607c <__aeabi_fsub+0x334>)
    5eee:	1a24      	subs	r4, r4, r0
    5ef0:	4013      	ands	r3, r2
    5ef2:	e76f      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5ef4:	2900      	cmp	r1, #0
    5ef6:	d16c      	bne.n	5fd2 <__aeabi_fsub+0x28a>
    5ef8:	1c61      	adds	r1, r4, #1
    5efa:	b2c8      	uxtb	r0, r1
    5efc:	2801      	cmp	r0, #1
    5efe:	dd4e      	ble.n	5f9e <__aeabi_fsub+0x256>
    5f00:	29ff      	cmp	r1, #255	; 0xff
    5f02:	d049      	beq.n	5f98 <__aeabi_fsub+0x250>
    5f04:	199b      	adds	r3, r3, r6
    5f06:	085b      	lsrs	r3, r3, #1
    5f08:	000c      	movs	r4, r1
    5f0a:	e763      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5f0c:	2aff      	cmp	r2, #255	; 0xff
    5f0e:	d041      	beq.n	5f94 <__aeabi_fsub+0x24c>
    5f10:	000a      	movs	r2, r1
    5f12:	e781      	b.n	5e18 <__aeabi_fsub+0xd0>
    5f14:	2601      	movs	r6, #1
    5f16:	1b9b      	subs	r3, r3, r6
    5f18:	e789      	b.n	5e2e <__aeabi_fsub+0xe6>
    5f1a:	2c00      	cmp	r4, #0
    5f1c:	d01c      	beq.n	5f58 <__aeabi_fsub+0x210>
    5f1e:	28ff      	cmp	r0, #255	; 0xff
    5f20:	d021      	beq.n	5f66 <__aeabi_fsub+0x21e>
    5f22:	2480      	movs	r4, #128	; 0x80
    5f24:	04e4      	lsls	r4, r4, #19
    5f26:	4252      	negs	r2, r2
    5f28:	4323      	orrs	r3, r4
    5f2a:	2a1b      	cmp	r2, #27
    5f2c:	dd00      	ble.n	5f30 <__aeabi_fsub+0x1e8>
    5f2e:	e096      	b.n	605e <__aeabi_fsub+0x316>
    5f30:	001c      	movs	r4, r3
    5f32:	2520      	movs	r5, #32
    5f34:	40d4      	lsrs	r4, r2
    5f36:	1aaa      	subs	r2, r5, r2
    5f38:	4093      	lsls	r3, r2
    5f3a:	1e5a      	subs	r2, r3, #1
    5f3c:	4193      	sbcs	r3, r2
    5f3e:	4323      	orrs	r3, r4
    5f40:	1af3      	subs	r3, r6, r3
    5f42:	0004      	movs	r4, r0
    5f44:	000d      	movs	r5, r1
    5f46:	e72d      	b.n	5da4 <__aeabi_fsub+0x5c>
    5f48:	2f00      	cmp	r7, #0
    5f4a:	d000      	beq.n	5f4e <__aeabi_fsub+0x206>
    5f4c:	e72e      	b.n	5dac <__aeabi_fsub+0x64>
    5f4e:	2200      	movs	r2, #0
    5f50:	2400      	movs	r4, #0
    5f52:	e7a9      	b.n	5ea8 <__aeabi_fsub+0x160>
    5f54:	000c      	movs	r4, r1
    5f56:	e73d      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d058      	beq.n	600e <__aeabi_fsub+0x2c6>
    5f5c:	43d2      	mvns	r2, r2
    5f5e:	2a00      	cmp	r2, #0
    5f60:	d0ee      	beq.n	5f40 <__aeabi_fsub+0x1f8>
    5f62:	28ff      	cmp	r0, #255	; 0xff
    5f64:	d1e1      	bne.n	5f2a <__aeabi_fsub+0x1e2>
    5f66:	0033      	movs	r3, r6
    5f68:	24ff      	movs	r4, #255	; 0xff
    5f6a:	000d      	movs	r5, r1
    5f6c:	e732      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5f6e:	29ff      	cmp	r1, #255	; 0xff
    5f70:	d010      	beq.n	5f94 <__aeabi_fsub+0x24c>
    5f72:	0001      	movs	r1, r0
    5f74:	e778      	b.n	5e68 <__aeabi_fsub+0x120>
    5f76:	2b00      	cmp	r3, #0
    5f78:	d06e      	beq.n	6058 <__aeabi_fsub+0x310>
    5f7a:	24ff      	movs	r4, #255	; 0xff
    5f7c:	2e00      	cmp	r6, #0
    5f7e:	d100      	bne.n	5f82 <__aeabi_fsub+0x23a>
    5f80:	e728      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5f82:	2280      	movs	r2, #128	; 0x80
    5f84:	4651      	mov	r1, sl
    5f86:	03d2      	lsls	r2, r2, #15
    5f88:	4211      	tst	r1, r2
    5f8a:	d003      	beq.n	5f94 <__aeabi_fsub+0x24c>
    5f8c:	4661      	mov	r1, ip
    5f8e:	4211      	tst	r1, r2
    5f90:	d100      	bne.n	5f94 <__aeabi_fsub+0x24c>
    5f92:	0033      	movs	r3, r6
    5f94:	24ff      	movs	r4, #255	; 0xff
    5f96:	e71d      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5f98:	24ff      	movs	r4, #255	; 0xff
    5f9a:	2300      	movs	r3, #0
    5f9c:	e72c      	b.n	5df8 <__aeabi_fsub+0xb0>
    5f9e:	2c00      	cmp	r4, #0
    5fa0:	d1e9      	bne.n	5f76 <__aeabi_fsub+0x22e>
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d063      	beq.n	606e <__aeabi_fsub+0x326>
    5fa6:	2e00      	cmp	r6, #0
    5fa8:	d100      	bne.n	5fac <__aeabi_fsub+0x264>
    5faa:	e713      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5fac:	199b      	adds	r3, r3, r6
    5fae:	015a      	lsls	r2, r3, #5
    5fb0:	d400      	bmi.n	5fb4 <__aeabi_fsub+0x26c>
    5fb2:	e73e      	b.n	5e32 <__aeabi_fsub+0xea>
    5fb4:	4a31      	ldr	r2, [pc, #196]	; (607c <__aeabi_fsub+0x334>)
    5fb6:	000c      	movs	r4, r1
    5fb8:	4013      	ands	r3, r2
    5fba:	e70b      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5fbc:	2c00      	cmp	r4, #0
    5fbe:	d11e      	bne.n	5ffe <__aeabi_fsub+0x2b6>
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d12f      	bne.n	6024 <__aeabi_fsub+0x2dc>
    5fc4:	2e00      	cmp	r6, #0
    5fc6:	d04f      	beq.n	6068 <__aeabi_fsub+0x320>
    5fc8:	0033      	movs	r3, r6
    5fca:	000d      	movs	r5, r1
    5fcc:	e702      	b.n	5dd4 <__aeabi_fsub+0x8c>
    5fce:	2601      	movs	r6, #1
    5fd0:	e755      	b.n	5e7e <__aeabi_fsub+0x136>
    5fd2:	2c00      	cmp	r4, #0
    5fd4:	d11f      	bne.n	6016 <__aeabi_fsub+0x2ce>
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d043      	beq.n	6062 <__aeabi_fsub+0x31a>
    5fda:	43c9      	mvns	r1, r1
    5fdc:	2900      	cmp	r1, #0
    5fde:	d00b      	beq.n	5ff8 <__aeabi_fsub+0x2b0>
    5fe0:	28ff      	cmp	r0, #255	; 0xff
    5fe2:	d039      	beq.n	6058 <__aeabi_fsub+0x310>
    5fe4:	291b      	cmp	r1, #27
    5fe6:	dc44      	bgt.n	6072 <__aeabi_fsub+0x32a>
    5fe8:	001c      	movs	r4, r3
    5fea:	2720      	movs	r7, #32
    5fec:	40cc      	lsrs	r4, r1
    5fee:	1a79      	subs	r1, r7, r1
    5ff0:	408b      	lsls	r3, r1
    5ff2:	1e59      	subs	r1, r3, #1
    5ff4:	418b      	sbcs	r3, r1
    5ff6:	4323      	orrs	r3, r4
    5ff8:	199b      	adds	r3, r3, r6
    5ffa:	0004      	movs	r4, r0
    5ffc:	e740      	b.n	5e80 <__aeabi_fsub+0x138>
    5ffe:	2b00      	cmp	r3, #0
    6000:	d11a      	bne.n	6038 <__aeabi_fsub+0x2f0>
    6002:	2e00      	cmp	r6, #0
    6004:	d124      	bne.n	6050 <__aeabi_fsub+0x308>
    6006:	2780      	movs	r7, #128	; 0x80
    6008:	2200      	movs	r2, #0
    600a:	03ff      	lsls	r7, r7, #15
    600c:	e71b      	b.n	5e46 <__aeabi_fsub+0xfe>
    600e:	0033      	movs	r3, r6
    6010:	0004      	movs	r4, r0
    6012:	000d      	movs	r5, r1
    6014:	e6de      	b.n	5dd4 <__aeabi_fsub+0x8c>
    6016:	28ff      	cmp	r0, #255	; 0xff
    6018:	d01e      	beq.n	6058 <__aeabi_fsub+0x310>
    601a:	2480      	movs	r4, #128	; 0x80
    601c:	04e4      	lsls	r4, r4, #19
    601e:	4249      	negs	r1, r1
    6020:	4323      	orrs	r3, r4
    6022:	e7df      	b.n	5fe4 <__aeabi_fsub+0x29c>
    6024:	2e00      	cmp	r6, #0
    6026:	d100      	bne.n	602a <__aeabi_fsub+0x2e2>
    6028:	e6d4      	b.n	5dd4 <__aeabi_fsub+0x8c>
    602a:	1b9f      	subs	r7, r3, r6
    602c:	017a      	lsls	r2, r7, #5
    602e:	d400      	bmi.n	6032 <__aeabi_fsub+0x2ea>
    6030:	e737      	b.n	5ea2 <__aeabi_fsub+0x15a>
    6032:	1af3      	subs	r3, r6, r3
    6034:	000d      	movs	r5, r1
    6036:	e6cd      	b.n	5dd4 <__aeabi_fsub+0x8c>
    6038:	24ff      	movs	r4, #255	; 0xff
    603a:	2e00      	cmp	r6, #0
    603c:	d100      	bne.n	6040 <__aeabi_fsub+0x2f8>
    603e:	e6c9      	b.n	5dd4 <__aeabi_fsub+0x8c>
    6040:	2280      	movs	r2, #128	; 0x80
    6042:	4650      	mov	r0, sl
    6044:	03d2      	lsls	r2, r2, #15
    6046:	4210      	tst	r0, r2
    6048:	d0a4      	beq.n	5f94 <__aeabi_fsub+0x24c>
    604a:	4660      	mov	r0, ip
    604c:	4210      	tst	r0, r2
    604e:	d1a1      	bne.n	5f94 <__aeabi_fsub+0x24c>
    6050:	0033      	movs	r3, r6
    6052:	000d      	movs	r5, r1
    6054:	24ff      	movs	r4, #255	; 0xff
    6056:	e6bd      	b.n	5dd4 <__aeabi_fsub+0x8c>
    6058:	0033      	movs	r3, r6
    605a:	24ff      	movs	r4, #255	; 0xff
    605c:	e6ba      	b.n	5dd4 <__aeabi_fsub+0x8c>
    605e:	2301      	movs	r3, #1
    6060:	e76e      	b.n	5f40 <__aeabi_fsub+0x1f8>
    6062:	0033      	movs	r3, r6
    6064:	0004      	movs	r4, r0
    6066:	e6b5      	b.n	5dd4 <__aeabi_fsub+0x8c>
    6068:	2700      	movs	r7, #0
    606a:	2200      	movs	r2, #0
    606c:	e71c      	b.n	5ea8 <__aeabi_fsub+0x160>
    606e:	0033      	movs	r3, r6
    6070:	e6b0      	b.n	5dd4 <__aeabi_fsub+0x8c>
    6072:	2301      	movs	r3, #1
    6074:	e7c0      	b.n	5ff8 <__aeabi_fsub+0x2b0>
    6076:	46c0      	nop			; (mov r8, r8)
    6078:	7dffffff 	.word	0x7dffffff
    607c:	fbffffff 	.word	0xfbffffff

00006080 <__aeabi_f2iz>:
    6080:	0241      	lsls	r1, r0, #9
    6082:	0043      	lsls	r3, r0, #1
    6084:	0fc2      	lsrs	r2, r0, #31
    6086:	0a49      	lsrs	r1, r1, #9
    6088:	0e1b      	lsrs	r3, r3, #24
    608a:	2000      	movs	r0, #0
    608c:	2b7e      	cmp	r3, #126	; 0x7e
    608e:	dd0d      	ble.n	60ac <__aeabi_f2iz+0x2c>
    6090:	2b9d      	cmp	r3, #157	; 0x9d
    6092:	dc0c      	bgt.n	60ae <__aeabi_f2iz+0x2e>
    6094:	2080      	movs	r0, #128	; 0x80
    6096:	0400      	lsls	r0, r0, #16
    6098:	4301      	orrs	r1, r0
    609a:	2b95      	cmp	r3, #149	; 0x95
    609c:	dc0a      	bgt.n	60b4 <__aeabi_f2iz+0x34>
    609e:	2096      	movs	r0, #150	; 0x96
    60a0:	1ac3      	subs	r3, r0, r3
    60a2:	40d9      	lsrs	r1, r3
    60a4:	4248      	negs	r0, r1
    60a6:	2a00      	cmp	r2, #0
    60a8:	d100      	bne.n	60ac <__aeabi_f2iz+0x2c>
    60aa:	0008      	movs	r0, r1
    60ac:	4770      	bx	lr
    60ae:	4b03      	ldr	r3, [pc, #12]	; (60bc <__aeabi_f2iz+0x3c>)
    60b0:	18d0      	adds	r0, r2, r3
    60b2:	e7fb      	b.n	60ac <__aeabi_f2iz+0x2c>
    60b4:	3b96      	subs	r3, #150	; 0x96
    60b6:	4099      	lsls	r1, r3
    60b8:	e7f4      	b.n	60a4 <__aeabi_f2iz+0x24>
    60ba:	46c0      	nop			; (mov r8, r8)
    60bc:	7fffffff 	.word	0x7fffffff

000060c0 <__aeabi_ui2f>:
    60c0:	b510      	push	{r4, lr}
    60c2:	1e04      	subs	r4, r0, #0
    60c4:	d027      	beq.n	6116 <__aeabi_ui2f+0x56>
    60c6:	f7ff fabb 	bl	5640 <__clzsi2>
    60ca:	239e      	movs	r3, #158	; 0x9e
    60cc:	1a1b      	subs	r3, r3, r0
    60ce:	2b96      	cmp	r3, #150	; 0x96
    60d0:	dc0a      	bgt.n	60e8 <__aeabi_ui2f+0x28>
    60d2:	2296      	movs	r2, #150	; 0x96
    60d4:	1ad2      	subs	r2, r2, r3
    60d6:	4094      	lsls	r4, r2
    60d8:	0264      	lsls	r4, r4, #9
    60da:	0a64      	lsrs	r4, r4, #9
    60dc:	b2db      	uxtb	r3, r3
    60de:	0264      	lsls	r4, r4, #9
    60e0:	05db      	lsls	r3, r3, #23
    60e2:	0a60      	lsrs	r0, r4, #9
    60e4:	4318      	orrs	r0, r3
    60e6:	bd10      	pop	{r4, pc}
    60e8:	2b99      	cmp	r3, #153	; 0x99
    60ea:	dc17      	bgt.n	611c <__aeabi_ui2f+0x5c>
    60ec:	2299      	movs	r2, #153	; 0x99
    60ee:	1ad2      	subs	r2, r2, r3
    60f0:	2a00      	cmp	r2, #0
    60f2:	dd27      	ble.n	6144 <__aeabi_ui2f+0x84>
    60f4:	4094      	lsls	r4, r2
    60f6:	0022      	movs	r2, r4
    60f8:	4c13      	ldr	r4, [pc, #76]	; (6148 <__aeabi_ui2f+0x88>)
    60fa:	4014      	ands	r4, r2
    60fc:	0751      	lsls	r1, r2, #29
    60fe:	d004      	beq.n	610a <__aeabi_ui2f+0x4a>
    6100:	210f      	movs	r1, #15
    6102:	400a      	ands	r2, r1
    6104:	2a04      	cmp	r2, #4
    6106:	d000      	beq.n	610a <__aeabi_ui2f+0x4a>
    6108:	3404      	adds	r4, #4
    610a:	0162      	lsls	r2, r4, #5
    610c:	d412      	bmi.n	6134 <__aeabi_ui2f+0x74>
    610e:	01a4      	lsls	r4, r4, #6
    6110:	0a64      	lsrs	r4, r4, #9
    6112:	b2db      	uxtb	r3, r3
    6114:	e7e3      	b.n	60de <__aeabi_ui2f+0x1e>
    6116:	2300      	movs	r3, #0
    6118:	2400      	movs	r4, #0
    611a:	e7e0      	b.n	60de <__aeabi_ui2f+0x1e>
    611c:	22b9      	movs	r2, #185	; 0xb9
    611e:	0021      	movs	r1, r4
    6120:	1ad2      	subs	r2, r2, r3
    6122:	4091      	lsls	r1, r2
    6124:	000a      	movs	r2, r1
    6126:	1e51      	subs	r1, r2, #1
    6128:	418a      	sbcs	r2, r1
    612a:	2105      	movs	r1, #5
    612c:	1a09      	subs	r1, r1, r0
    612e:	40cc      	lsrs	r4, r1
    6130:	4314      	orrs	r4, r2
    6132:	e7db      	b.n	60ec <__aeabi_ui2f+0x2c>
    6134:	4b04      	ldr	r3, [pc, #16]	; (6148 <__aeabi_ui2f+0x88>)
    6136:	401c      	ands	r4, r3
    6138:	239f      	movs	r3, #159	; 0x9f
    613a:	01a4      	lsls	r4, r4, #6
    613c:	1a1b      	subs	r3, r3, r0
    613e:	0a64      	lsrs	r4, r4, #9
    6140:	b2db      	uxtb	r3, r3
    6142:	e7cc      	b.n	60de <__aeabi_ui2f+0x1e>
    6144:	0022      	movs	r2, r4
    6146:	e7d7      	b.n	60f8 <__aeabi_ui2f+0x38>
    6148:	fbffffff 	.word	0xfbffffff

0000614c <__aeabi_dadd>:
    614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    614e:	4645      	mov	r5, r8
    6150:	46de      	mov	lr, fp
    6152:	4657      	mov	r7, sl
    6154:	464e      	mov	r6, r9
    6156:	030c      	lsls	r4, r1, #12
    6158:	b5e0      	push	{r5, r6, r7, lr}
    615a:	004e      	lsls	r6, r1, #1
    615c:	0fc9      	lsrs	r1, r1, #31
    615e:	4688      	mov	r8, r1
    6160:	000d      	movs	r5, r1
    6162:	0a61      	lsrs	r1, r4, #9
    6164:	0f44      	lsrs	r4, r0, #29
    6166:	430c      	orrs	r4, r1
    6168:	00c7      	lsls	r7, r0, #3
    616a:	0319      	lsls	r1, r3, #12
    616c:	0058      	lsls	r0, r3, #1
    616e:	0fdb      	lsrs	r3, r3, #31
    6170:	469b      	mov	fp, r3
    6172:	0a4b      	lsrs	r3, r1, #9
    6174:	0f51      	lsrs	r1, r2, #29
    6176:	430b      	orrs	r3, r1
    6178:	0d76      	lsrs	r6, r6, #21
    617a:	0d40      	lsrs	r0, r0, #21
    617c:	0019      	movs	r1, r3
    617e:	00d2      	lsls	r2, r2, #3
    6180:	45d8      	cmp	r8, fp
    6182:	d100      	bne.n	6186 <__aeabi_dadd+0x3a>
    6184:	e0ae      	b.n	62e4 <__aeabi_dadd+0x198>
    6186:	1a35      	subs	r5, r6, r0
    6188:	2d00      	cmp	r5, #0
    618a:	dc00      	bgt.n	618e <__aeabi_dadd+0x42>
    618c:	e0f6      	b.n	637c <__aeabi_dadd+0x230>
    618e:	2800      	cmp	r0, #0
    6190:	d10f      	bne.n	61b2 <__aeabi_dadd+0x66>
    6192:	4313      	orrs	r3, r2
    6194:	d100      	bne.n	6198 <__aeabi_dadd+0x4c>
    6196:	e0db      	b.n	6350 <__aeabi_dadd+0x204>
    6198:	1e6b      	subs	r3, r5, #1
    619a:	2b00      	cmp	r3, #0
    619c:	d000      	beq.n	61a0 <__aeabi_dadd+0x54>
    619e:	e137      	b.n	6410 <__aeabi_dadd+0x2c4>
    61a0:	1aba      	subs	r2, r7, r2
    61a2:	4297      	cmp	r7, r2
    61a4:	41bf      	sbcs	r7, r7
    61a6:	1a64      	subs	r4, r4, r1
    61a8:	427f      	negs	r7, r7
    61aa:	1be4      	subs	r4, r4, r7
    61ac:	2601      	movs	r6, #1
    61ae:	0017      	movs	r7, r2
    61b0:	e024      	b.n	61fc <__aeabi_dadd+0xb0>
    61b2:	4bc6      	ldr	r3, [pc, #792]	; (64cc <__aeabi_dadd+0x380>)
    61b4:	429e      	cmp	r6, r3
    61b6:	d04d      	beq.n	6254 <__aeabi_dadd+0x108>
    61b8:	2380      	movs	r3, #128	; 0x80
    61ba:	041b      	lsls	r3, r3, #16
    61bc:	4319      	orrs	r1, r3
    61be:	2d38      	cmp	r5, #56	; 0x38
    61c0:	dd00      	ble.n	61c4 <__aeabi_dadd+0x78>
    61c2:	e107      	b.n	63d4 <__aeabi_dadd+0x288>
    61c4:	2d1f      	cmp	r5, #31
    61c6:	dd00      	ble.n	61ca <__aeabi_dadd+0x7e>
    61c8:	e138      	b.n	643c <__aeabi_dadd+0x2f0>
    61ca:	2020      	movs	r0, #32
    61cc:	1b43      	subs	r3, r0, r5
    61ce:	469a      	mov	sl, r3
    61d0:	000b      	movs	r3, r1
    61d2:	4650      	mov	r0, sl
    61d4:	4083      	lsls	r3, r0
    61d6:	4699      	mov	r9, r3
    61d8:	0013      	movs	r3, r2
    61da:	4648      	mov	r0, r9
    61dc:	40eb      	lsrs	r3, r5
    61de:	4318      	orrs	r0, r3
    61e0:	0003      	movs	r3, r0
    61e2:	4650      	mov	r0, sl
    61e4:	4082      	lsls	r2, r0
    61e6:	1e50      	subs	r0, r2, #1
    61e8:	4182      	sbcs	r2, r0
    61ea:	40e9      	lsrs	r1, r5
    61ec:	431a      	orrs	r2, r3
    61ee:	1aba      	subs	r2, r7, r2
    61f0:	1a61      	subs	r1, r4, r1
    61f2:	4297      	cmp	r7, r2
    61f4:	41a4      	sbcs	r4, r4
    61f6:	0017      	movs	r7, r2
    61f8:	4264      	negs	r4, r4
    61fa:	1b0c      	subs	r4, r1, r4
    61fc:	0223      	lsls	r3, r4, #8
    61fe:	d562      	bpl.n	62c6 <__aeabi_dadd+0x17a>
    6200:	0264      	lsls	r4, r4, #9
    6202:	0a65      	lsrs	r5, r4, #9
    6204:	2d00      	cmp	r5, #0
    6206:	d100      	bne.n	620a <__aeabi_dadd+0xbe>
    6208:	e0df      	b.n	63ca <__aeabi_dadd+0x27e>
    620a:	0028      	movs	r0, r5
    620c:	f7ff fa18 	bl	5640 <__clzsi2>
    6210:	0003      	movs	r3, r0
    6212:	3b08      	subs	r3, #8
    6214:	2b1f      	cmp	r3, #31
    6216:	dd00      	ble.n	621a <__aeabi_dadd+0xce>
    6218:	e0d2      	b.n	63c0 <__aeabi_dadd+0x274>
    621a:	2220      	movs	r2, #32
    621c:	003c      	movs	r4, r7
    621e:	1ad2      	subs	r2, r2, r3
    6220:	409d      	lsls	r5, r3
    6222:	40d4      	lsrs	r4, r2
    6224:	409f      	lsls	r7, r3
    6226:	4325      	orrs	r5, r4
    6228:	429e      	cmp	r6, r3
    622a:	dd00      	ble.n	622e <__aeabi_dadd+0xe2>
    622c:	e0c4      	b.n	63b8 <__aeabi_dadd+0x26c>
    622e:	1b9e      	subs	r6, r3, r6
    6230:	1c73      	adds	r3, r6, #1
    6232:	2b1f      	cmp	r3, #31
    6234:	dd00      	ble.n	6238 <__aeabi_dadd+0xec>
    6236:	e0f1      	b.n	641c <__aeabi_dadd+0x2d0>
    6238:	2220      	movs	r2, #32
    623a:	0038      	movs	r0, r7
    623c:	0029      	movs	r1, r5
    623e:	1ad2      	subs	r2, r2, r3
    6240:	40d8      	lsrs	r0, r3
    6242:	4091      	lsls	r1, r2
    6244:	4097      	lsls	r7, r2
    6246:	002c      	movs	r4, r5
    6248:	4301      	orrs	r1, r0
    624a:	1e78      	subs	r0, r7, #1
    624c:	4187      	sbcs	r7, r0
    624e:	40dc      	lsrs	r4, r3
    6250:	2600      	movs	r6, #0
    6252:	430f      	orrs	r7, r1
    6254:	077b      	lsls	r3, r7, #29
    6256:	d009      	beq.n	626c <__aeabi_dadd+0x120>
    6258:	230f      	movs	r3, #15
    625a:	403b      	ands	r3, r7
    625c:	2b04      	cmp	r3, #4
    625e:	d005      	beq.n	626c <__aeabi_dadd+0x120>
    6260:	1d3b      	adds	r3, r7, #4
    6262:	42bb      	cmp	r3, r7
    6264:	41bf      	sbcs	r7, r7
    6266:	427f      	negs	r7, r7
    6268:	19e4      	adds	r4, r4, r7
    626a:	001f      	movs	r7, r3
    626c:	0223      	lsls	r3, r4, #8
    626e:	d52c      	bpl.n	62ca <__aeabi_dadd+0x17e>
    6270:	4b96      	ldr	r3, [pc, #600]	; (64cc <__aeabi_dadd+0x380>)
    6272:	3601      	adds	r6, #1
    6274:	429e      	cmp	r6, r3
    6276:	d100      	bne.n	627a <__aeabi_dadd+0x12e>
    6278:	e09a      	b.n	63b0 <__aeabi_dadd+0x264>
    627a:	4645      	mov	r5, r8
    627c:	4b94      	ldr	r3, [pc, #592]	; (64d0 <__aeabi_dadd+0x384>)
    627e:	08ff      	lsrs	r7, r7, #3
    6280:	401c      	ands	r4, r3
    6282:	0760      	lsls	r0, r4, #29
    6284:	0576      	lsls	r6, r6, #21
    6286:	0264      	lsls	r4, r4, #9
    6288:	4307      	orrs	r7, r0
    628a:	0b24      	lsrs	r4, r4, #12
    628c:	0d76      	lsrs	r6, r6, #21
    628e:	2100      	movs	r1, #0
    6290:	0324      	lsls	r4, r4, #12
    6292:	0b23      	lsrs	r3, r4, #12
    6294:	0d0c      	lsrs	r4, r1, #20
    6296:	4a8f      	ldr	r2, [pc, #572]	; (64d4 <__aeabi_dadd+0x388>)
    6298:	0524      	lsls	r4, r4, #20
    629a:	431c      	orrs	r4, r3
    629c:	4014      	ands	r4, r2
    629e:	0533      	lsls	r3, r6, #20
    62a0:	4323      	orrs	r3, r4
    62a2:	005b      	lsls	r3, r3, #1
    62a4:	07ed      	lsls	r5, r5, #31
    62a6:	085b      	lsrs	r3, r3, #1
    62a8:	432b      	orrs	r3, r5
    62aa:	0038      	movs	r0, r7
    62ac:	0019      	movs	r1, r3
    62ae:	bc3c      	pop	{r2, r3, r4, r5}
    62b0:	4690      	mov	r8, r2
    62b2:	4699      	mov	r9, r3
    62b4:	46a2      	mov	sl, r4
    62b6:	46ab      	mov	fp, r5
    62b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62ba:	4664      	mov	r4, ip
    62bc:	4304      	orrs	r4, r0
    62be:	d100      	bne.n	62c2 <__aeabi_dadd+0x176>
    62c0:	e211      	b.n	66e6 <__aeabi_dadd+0x59a>
    62c2:	0004      	movs	r4, r0
    62c4:	4667      	mov	r7, ip
    62c6:	077b      	lsls	r3, r7, #29
    62c8:	d1c6      	bne.n	6258 <__aeabi_dadd+0x10c>
    62ca:	4645      	mov	r5, r8
    62cc:	0760      	lsls	r0, r4, #29
    62ce:	08ff      	lsrs	r7, r7, #3
    62d0:	4307      	orrs	r7, r0
    62d2:	08e4      	lsrs	r4, r4, #3
    62d4:	4b7d      	ldr	r3, [pc, #500]	; (64cc <__aeabi_dadd+0x380>)
    62d6:	429e      	cmp	r6, r3
    62d8:	d030      	beq.n	633c <__aeabi_dadd+0x1f0>
    62da:	0324      	lsls	r4, r4, #12
    62dc:	0576      	lsls	r6, r6, #21
    62de:	0b24      	lsrs	r4, r4, #12
    62e0:	0d76      	lsrs	r6, r6, #21
    62e2:	e7d4      	b.n	628e <__aeabi_dadd+0x142>
    62e4:	1a33      	subs	r3, r6, r0
    62e6:	469a      	mov	sl, r3
    62e8:	2b00      	cmp	r3, #0
    62ea:	dd78      	ble.n	63de <__aeabi_dadd+0x292>
    62ec:	2800      	cmp	r0, #0
    62ee:	d031      	beq.n	6354 <__aeabi_dadd+0x208>
    62f0:	4876      	ldr	r0, [pc, #472]	; (64cc <__aeabi_dadd+0x380>)
    62f2:	4286      	cmp	r6, r0
    62f4:	d0ae      	beq.n	6254 <__aeabi_dadd+0x108>
    62f6:	2080      	movs	r0, #128	; 0x80
    62f8:	0400      	lsls	r0, r0, #16
    62fa:	4301      	orrs	r1, r0
    62fc:	4653      	mov	r3, sl
    62fe:	2b38      	cmp	r3, #56	; 0x38
    6300:	dc00      	bgt.n	6304 <__aeabi_dadd+0x1b8>
    6302:	e0e9      	b.n	64d8 <__aeabi_dadd+0x38c>
    6304:	430a      	orrs	r2, r1
    6306:	1e51      	subs	r1, r2, #1
    6308:	418a      	sbcs	r2, r1
    630a:	2100      	movs	r1, #0
    630c:	19d2      	adds	r2, r2, r7
    630e:	42ba      	cmp	r2, r7
    6310:	41bf      	sbcs	r7, r7
    6312:	1909      	adds	r1, r1, r4
    6314:	427c      	negs	r4, r7
    6316:	0017      	movs	r7, r2
    6318:	190c      	adds	r4, r1, r4
    631a:	0223      	lsls	r3, r4, #8
    631c:	d5d3      	bpl.n	62c6 <__aeabi_dadd+0x17a>
    631e:	4b6b      	ldr	r3, [pc, #428]	; (64cc <__aeabi_dadd+0x380>)
    6320:	3601      	adds	r6, #1
    6322:	429e      	cmp	r6, r3
    6324:	d100      	bne.n	6328 <__aeabi_dadd+0x1dc>
    6326:	e13a      	b.n	659e <__aeabi_dadd+0x452>
    6328:	2001      	movs	r0, #1
    632a:	4b69      	ldr	r3, [pc, #420]	; (64d0 <__aeabi_dadd+0x384>)
    632c:	401c      	ands	r4, r3
    632e:	087b      	lsrs	r3, r7, #1
    6330:	4007      	ands	r7, r0
    6332:	431f      	orrs	r7, r3
    6334:	07e0      	lsls	r0, r4, #31
    6336:	4307      	orrs	r7, r0
    6338:	0864      	lsrs	r4, r4, #1
    633a:	e78b      	b.n	6254 <__aeabi_dadd+0x108>
    633c:	0023      	movs	r3, r4
    633e:	433b      	orrs	r3, r7
    6340:	d100      	bne.n	6344 <__aeabi_dadd+0x1f8>
    6342:	e1cb      	b.n	66dc <__aeabi_dadd+0x590>
    6344:	2280      	movs	r2, #128	; 0x80
    6346:	0312      	lsls	r2, r2, #12
    6348:	4314      	orrs	r4, r2
    634a:	0324      	lsls	r4, r4, #12
    634c:	0b24      	lsrs	r4, r4, #12
    634e:	e79e      	b.n	628e <__aeabi_dadd+0x142>
    6350:	002e      	movs	r6, r5
    6352:	e77f      	b.n	6254 <__aeabi_dadd+0x108>
    6354:	0008      	movs	r0, r1
    6356:	4310      	orrs	r0, r2
    6358:	d100      	bne.n	635c <__aeabi_dadd+0x210>
    635a:	e0b4      	b.n	64c6 <__aeabi_dadd+0x37a>
    635c:	1e58      	subs	r0, r3, #1
    635e:	2800      	cmp	r0, #0
    6360:	d000      	beq.n	6364 <__aeabi_dadd+0x218>
    6362:	e0de      	b.n	6522 <__aeabi_dadd+0x3d6>
    6364:	18ba      	adds	r2, r7, r2
    6366:	42ba      	cmp	r2, r7
    6368:	419b      	sbcs	r3, r3
    636a:	1864      	adds	r4, r4, r1
    636c:	425b      	negs	r3, r3
    636e:	18e4      	adds	r4, r4, r3
    6370:	0017      	movs	r7, r2
    6372:	2601      	movs	r6, #1
    6374:	0223      	lsls	r3, r4, #8
    6376:	d5a6      	bpl.n	62c6 <__aeabi_dadd+0x17a>
    6378:	2602      	movs	r6, #2
    637a:	e7d5      	b.n	6328 <__aeabi_dadd+0x1dc>
    637c:	2d00      	cmp	r5, #0
    637e:	d16e      	bne.n	645e <__aeabi_dadd+0x312>
    6380:	1c70      	adds	r0, r6, #1
    6382:	0540      	lsls	r0, r0, #21
    6384:	0d40      	lsrs	r0, r0, #21
    6386:	2801      	cmp	r0, #1
    6388:	dc00      	bgt.n	638c <__aeabi_dadd+0x240>
    638a:	e0f9      	b.n	6580 <__aeabi_dadd+0x434>
    638c:	1ab8      	subs	r0, r7, r2
    638e:	4684      	mov	ip, r0
    6390:	4287      	cmp	r7, r0
    6392:	4180      	sbcs	r0, r0
    6394:	1ae5      	subs	r5, r4, r3
    6396:	4240      	negs	r0, r0
    6398:	1a2d      	subs	r5, r5, r0
    639a:	0228      	lsls	r0, r5, #8
    639c:	d400      	bmi.n	63a0 <__aeabi_dadd+0x254>
    639e:	e089      	b.n	64b4 <__aeabi_dadd+0x368>
    63a0:	1bd7      	subs	r7, r2, r7
    63a2:	42ba      	cmp	r2, r7
    63a4:	4192      	sbcs	r2, r2
    63a6:	1b1c      	subs	r4, r3, r4
    63a8:	4252      	negs	r2, r2
    63aa:	1aa5      	subs	r5, r4, r2
    63ac:	46d8      	mov	r8, fp
    63ae:	e729      	b.n	6204 <__aeabi_dadd+0xb8>
    63b0:	4645      	mov	r5, r8
    63b2:	2400      	movs	r4, #0
    63b4:	2700      	movs	r7, #0
    63b6:	e76a      	b.n	628e <__aeabi_dadd+0x142>
    63b8:	4c45      	ldr	r4, [pc, #276]	; (64d0 <__aeabi_dadd+0x384>)
    63ba:	1af6      	subs	r6, r6, r3
    63bc:	402c      	ands	r4, r5
    63be:	e749      	b.n	6254 <__aeabi_dadd+0x108>
    63c0:	003d      	movs	r5, r7
    63c2:	3828      	subs	r0, #40	; 0x28
    63c4:	4085      	lsls	r5, r0
    63c6:	2700      	movs	r7, #0
    63c8:	e72e      	b.n	6228 <__aeabi_dadd+0xdc>
    63ca:	0038      	movs	r0, r7
    63cc:	f7ff f938 	bl	5640 <__clzsi2>
    63d0:	3020      	adds	r0, #32
    63d2:	e71d      	b.n	6210 <__aeabi_dadd+0xc4>
    63d4:	430a      	orrs	r2, r1
    63d6:	1e51      	subs	r1, r2, #1
    63d8:	418a      	sbcs	r2, r1
    63da:	2100      	movs	r1, #0
    63dc:	e707      	b.n	61ee <__aeabi_dadd+0xa2>
    63de:	2b00      	cmp	r3, #0
    63e0:	d000      	beq.n	63e4 <__aeabi_dadd+0x298>
    63e2:	e0f3      	b.n	65cc <__aeabi_dadd+0x480>
    63e4:	1c70      	adds	r0, r6, #1
    63e6:	0543      	lsls	r3, r0, #21
    63e8:	0d5b      	lsrs	r3, r3, #21
    63ea:	2b01      	cmp	r3, #1
    63ec:	dc00      	bgt.n	63f0 <__aeabi_dadd+0x2a4>
    63ee:	e0ad      	b.n	654c <__aeabi_dadd+0x400>
    63f0:	4b36      	ldr	r3, [pc, #216]	; (64cc <__aeabi_dadd+0x380>)
    63f2:	4298      	cmp	r0, r3
    63f4:	d100      	bne.n	63f8 <__aeabi_dadd+0x2ac>
    63f6:	e0d1      	b.n	659c <__aeabi_dadd+0x450>
    63f8:	18ba      	adds	r2, r7, r2
    63fa:	42ba      	cmp	r2, r7
    63fc:	41bf      	sbcs	r7, r7
    63fe:	1864      	adds	r4, r4, r1
    6400:	427f      	negs	r7, r7
    6402:	19e4      	adds	r4, r4, r7
    6404:	07e7      	lsls	r7, r4, #31
    6406:	0852      	lsrs	r2, r2, #1
    6408:	4317      	orrs	r7, r2
    640a:	0864      	lsrs	r4, r4, #1
    640c:	0006      	movs	r6, r0
    640e:	e721      	b.n	6254 <__aeabi_dadd+0x108>
    6410:	482e      	ldr	r0, [pc, #184]	; (64cc <__aeabi_dadd+0x380>)
    6412:	4285      	cmp	r5, r0
    6414:	d100      	bne.n	6418 <__aeabi_dadd+0x2cc>
    6416:	e093      	b.n	6540 <__aeabi_dadd+0x3f4>
    6418:	001d      	movs	r5, r3
    641a:	e6d0      	b.n	61be <__aeabi_dadd+0x72>
    641c:	0029      	movs	r1, r5
    641e:	3e1f      	subs	r6, #31
    6420:	40f1      	lsrs	r1, r6
    6422:	2b20      	cmp	r3, #32
    6424:	d100      	bne.n	6428 <__aeabi_dadd+0x2dc>
    6426:	e08d      	b.n	6544 <__aeabi_dadd+0x3f8>
    6428:	2240      	movs	r2, #64	; 0x40
    642a:	1ad3      	subs	r3, r2, r3
    642c:	409d      	lsls	r5, r3
    642e:	432f      	orrs	r7, r5
    6430:	1e7d      	subs	r5, r7, #1
    6432:	41af      	sbcs	r7, r5
    6434:	2400      	movs	r4, #0
    6436:	430f      	orrs	r7, r1
    6438:	2600      	movs	r6, #0
    643a:	e744      	b.n	62c6 <__aeabi_dadd+0x17a>
    643c:	002b      	movs	r3, r5
    643e:	0008      	movs	r0, r1
    6440:	3b20      	subs	r3, #32
    6442:	40d8      	lsrs	r0, r3
    6444:	0003      	movs	r3, r0
    6446:	2d20      	cmp	r5, #32
    6448:	d100      	bne.n	644c <__aeabi_dadd+0x300>
    644a:	e07d      	b.n	6548 <__aeabi_dadd+0x3fc>
    644c:	2040      	movs	r0, #64	; 0x40
    644e:	1b45      	subs	r5, r0, r5
    6450:	40a9      	lsls	r1, r5
    6452:	430a      	orrs	r2, r1
    6454:	1e51      	subs	r1, r2, #1
    6456:	418a      	sbcs	r2, r1
    6458:	2100      	movs	r1, #0
    645a:	431a      	orrs	r2, r3
    645c:	e6c7      	b.n	61ee <__aeabi_dadd+0xa2>
    645e:	2e00      	cmp	r6, #0
    6460:	d050      	beq.n	6504 <__aeabi_dadd+0x3b8>
    6462:	4e1a      	ldr	r6, [pc, #104]	; (64cc <__aeabi_dadd+0x380>)
    6464:	42b0      	cmp	r0, r6
    6466:	d057      	beq.n	6518 <__aeabi_dadd+0x3cc>
    6468:	2680      	movs	r6, #128	; 0x80
    646a:	426b      	negs	r3, r5
    646c:	4699      	mov	r9, r3
    646e:	0436      	lsls	r6, r6, #16
    6470:	4334      	orrs	r4, r6
    6472:	464b      	mov	r3, r9
    6474:	2b38      	cmp	r3, #56	; 0x38
    6476:	dd00      	ble.n	647a <__aeabi_dadd+0x32e>
    6478:	e0d6      	b.n	6628 <__aeabi_dadd+0x4dc>
    647a:	2b1f      	cmp	r3, #31
    647c:	dd00      	ble.n	6480 <__aeabi_dadd+0x334>
    647e:	e135      	b.n	66ec <__aeabi_dadd+0x5a0>
    6480:	2620      	movs	r6, #32
    6482:	1af5      	subs	r5, r6, r3
    6484:	0026      	movs	r6, r4
    6486:	40ae      	lsls	r6, r5
    6488:	46b2      	mov	sl, r6
    648a:	003e      	movs	r6, r7
    648c:	40de      	lsrs	r6, r3
    648e:	46ac      	mov	ip, r5
    6490:	0035      	movs	r5, r6
    6492:	4656      	mov	r6, sl
    6494:	432e      	orrs	r6, r5
    6496:	4665      	mov	r5, ip
    6498:	40af      	lsls	r7, r5
    649a:	1e7d      	subs	r5, r7, #1
    649c:	41af      	sbcs	r7, r5
    649e:	40dc      	lsrs	r4, r3
    64a0:	4337      	orrs	r7, r6
    64a2:	1bd7      	subs	r7, r2, r7
    64a4:	42ba      	cmp	r2, r7
    64a6:	4192      	sbcs	r2, r2
    64a8:	1b0c      	subs	r4, r1, r4
    64aa:	4252      	negs	r2, r2
    64ac:	1aa4      	subs	r4, r4, r2
    64ae:	0006      	movs	r6, r0
    64b0:	46d8      	mov	r8, fp
    64b2:	e6a3      	b.n	61fc <__aeabi_dadd+0xb0>
    64b4:	4664      	mov	r4, ip
    64b6:	4667      	mov	r7, ip
    64b8:	432c      	orrs	r4, r5
    64ba:	d000      	beq.n	64be <__aeabi_dadd+0x372>
    64bc:	e6a2      	b.n	6204 <__aeabi_dadd+0xb8>
    64be:	2500      	movs	r5, #0
    64c0:	2600      	movs	r6, #0
    64c2:	2700      	movs	r7, #0
    64c4:	e706      	b.n	62d4 <__aeabi_dadd+0x188>
    64c6:	001e      	movs	r6, r3
    64c8:	e6c4      	b.n	6254 <__aeabi_dadd+0x108>
    64ca:	46c0      	nop			; (mov r8, r8)
    64cc:	000007ff 	.word	0x000007ff
    64d0:	ff7fffff 	.word	0xff7fffff
    64d4:	800fffff 	.word	0x800fffff
    64d8:	2b1f      	cmp	r3, #31
    64da:	dc63      	bgt.n	65a4 <__aeabi_dadd+0x458>
    64dc:	2020      	movs	r0, #32
    64de:	1ac3      	subs	r3, r0, r3
    64e0:	0008      	movs	r0, r1
    64e2:	4098      	lsls	r0, r3
    64e4:	469c      	mov	ip, r3
    64e6:	4683      	mov	fp, r0
    64e8:	4653      	mov	r3, sl
    64ea:	0010      	movs	r0, r2
    64ec:	40d8      	lsrs	r0, r3
    64ee:	0003      	movs	r3, r0
    64f0:	4658      	mov	r0, fp
    64f2:	4318      	orrs	r0, r3
    64f4:	4663      	mov	r3, ip
    64f6:	409a      	lsls	r2, r3
    64f8:	1e53      	subs	r3, r2, #1
    64fa:	419a      	sbcs	r2, r3
    64fc:	4653      	mov	r3, sl
    64fe:	4302      	orrs	r2, r0
    6500:	40d9      	lsrs	r1, r3
    6502:	e703      	b.n	630c <__aeabi_dadd+0x1c0>
    6504:	0026      	movs	r6, r4
    6506:	433e      	orrs	r6, r7
    6508:	d006      	beq.n	6518 <__aeabi_dadd+0x3cc>
    650a:	43eb      	mvns	r3, r5
    650c:	4699      	mov	r9, r3
    650e:	2b00      	cmp	r3, #0
    6510:	d0c7      	beq.n	64a2 <__aeabi_dadd+0x356>
    6512:	4e94      	ldr	r6, [pc, #592]	; (6764 <__aeabi_dadd+0x618>)
    6514:	42b0      	cmp	r0, r6
    6516:	d1ac      	bne.n	6472 <__aeabi_dadd+0x326>
    6518:	000c      	movs	r4, r1
    651a:	0017      	movs	r7, r2
    651c:	0006      	movs	r6, r0
    651e:	46d8      	mov	r8, fp
    6520:	e698      	b.n	6254 <__aeabi_dadd+0x108>
    6522:	4b90      	ldr	r3, [pc, #576]	; (6764 <__aeabi_dadd+0x618>)
    6524:	459a      	cmp	sl, r3
    6526:	d00b      	beq.n	6540 <__aeabi_dadd+0x3f4>
    6528:	4682      	mov	sl, r0
    652a:	e6e7      	b.n	62fc <__aeabi_dadd+0x1b0>
    652c:	2800      	cmp	r0, #0
    652e:	d000      	beq.n	6532 <__aeabi_dadd+0x3e6>
    6530:	e09e      	b.n	6670 <__aeabi_dadd+0x524>
    6532:	0018      	movs	r0, r3
    6534:	4310      	orrs	r0, r2
    6536:	d100      	bne.n	653a <__aeabi_dadd+0x3ee>
    6538:	e0e9      	b.n	670e <__aeabi_dadd+0x5c2>
    653a:	001c      	movs	r4, r3
    653c:	0017      	movs	r7, r2
    653e:	46d8      	mov	r8, fp
    6540:	4e88      	ldr	r6, [pc, #544]	; (6764 <__aeabi_dadd+0x618>)
    6542:	e687      	b.n	6254 <__aeabi_dadd+0x108>
    6544:	2500      	movs	r5, #0
    6546:	e772      	b.n	642e <__aeabi_dadd+0x2e2>
    6548:	2100      	movs	r1, #0
    654a:	e782      	b.n	6452 <__aeabi_dadd+0x306>
    654c:	0023      	movs	r3, r4
    654e:	433b      	orrs	r3, r7
    6550:	2e00      	cmp	r6, #0
    6552:	d000      	beq.n	6556 <__aeabi_dadd+0x40a>
    6554:	e0ab      	b.n	66ae <__aeabi_dadd+0x562>
    6556:	2b00      	cmp	r3, #0
    6558:	d100      	bne.n	655c <__aeabi_dadd+0x410>
    655a:	e0e7      	b.n	672c <__aeabi_dadd+0x5e0>
    655c:	000b      	movs	r3, r1
    655e:	4313      	orrs	r3, r2
    6560:	d100      	bne.n	6564 <__aeabi_dadd+0x418>
    6562:	e677      	b.n	6254 <__aeabi_dadd+0x108>
    6564:	18ba      	adds	r2, r7, r2
    6566:	42ba      	cmp	r2, r7
    6568:	41bf      	sbcs	r7, r7
    656a:	1864      	adds	r4, r4, r1
    656c:	427f      	negs	r7, r7
    656e:	19e4      	adds	r4, r4, r7
    6570:	0223      	lsls	r3, r4, #8
    6572:	d400      	bmi.n	6576 <__aeabi_dadd+0x42a>
    6574:	e0f2      	b.n	675c <__aeabi_dadd+0x610>
    6576:	4b7c      	ldr	r3, [pc, #496]	; (6768 <__aeabi_dadd+0x61c>)
    6578:	0017      	movs	r7, r2
    657a:	401c      	ands	r4, r3
    657c:	0006      	movs	r6, r0
    657e:	e669      	b.n	6254 <__aeabi_dadd+0x108>
    6580:	0020      	movs	r0, r4
    6582:	4338      	orrs	r0, r7
    6584:	2e00      	cmp	r6, #0
    6586:	d1d1      	bne.n	652c <__aeabi_dadd+0x3e0>
    6588:	2800      	cmp	r0, #0
    658a:	d15b      	bne.n	6644 <__aeabi_dadd+0x4f8>
    658c:	001c      	movs	r4, r3
    658e:	4314      	orrs	r4, r2
    6590:	d100      	bne.n	6594 <__aeabi_dadd+0x448>
    6592:	e0a8      	b.n	66e6 <__aeabi_dadd+0x59a>
    6594:	001c      	movs	r4, r3
    6596:	0017      	movs	r7, r2
    6598:	46d8      	mov	r8, fp
    659a:	e65b      	b.n	6254 <__aeabi_dadd+0x108>
    659c:	0006      	movs	r6, r0
    659e:	2400      	movs	r4, #0
    65a0:	2700      	movs	r7, #0
    65a2:	e697      	b.n	62d4 <__aeabi_dadd+0x188>
    65a4:	4650      	mov	r0, sl
    65a6:	000b      	movs	r3, r1
    65a8:	3820      	subs	r0, #32
    65aa:	40c3      	lsrs	r3, r0
    65ac:	4699      	mov	r9, r3
    65ae:	4653      	mov	r3, sl
    65b0:	2b20      	cmp	r3, #32
    65b2:	d100      	bne.n	65b6 <__aeabi_dadd+0x46a>
    65b4:	e095      	b.n	66e2 <__aeabi_dadd+0x596>
    65b6:	2340      	movs	r3, #64	; 0x40
    65b8:	4650      	mov	r0, sl
    65ba:	1a1b      	subs	r3, r3, r0
    65bc:	4099      	lsls	r1, r3
    65be:	430a      	orrs	r2, r1
    65c0:	1e51      	subs	r1, r2, #1
    65c2:	418a      	sbcs	r2, r1
    65c4:	464b      	mov	r3, r9
    65c6:	2100      	movs	r1, #0
    65c8:	431a      	orrs	r2, r3
    65ca:	e69f      	b.n	630c <__aeabi_dadd+0x1c0>
    65cc:	2e00      	cmp	r6, #0
    65ce:	d130      	bne.n	6632 <__aeabi_dadd+0x4e6>
    65d0:	0026      	movs	r6, r4
    65d2:	433e      	orrs	r6, r7
    65d4:	d067      	beq.n	66a6 <__aeabi_dadd+0x55a>
    65d6:	43db      	mvns	r3, r3
    65d8:	469a      	mov	sl, r3
    65da:	2b00      	cmp	r3, #0
    65dc:	d01c      	beq.n	6618 <__aeabi_dadd+0x4cc>
    65de:	4e61      	ldr	r6, [pc, #388]	; (6764 <__aeabi_dadd+0x618>)
    65e0:	42b0      	cmp	r0, r6
    65e2:	d060      	beq.n	66a6 <__aeabi_dadd+0x55a>
    65e4:	4653      	mov	r3, sl
    65e6:	2b38      	cmp	r3, #56	; 0x38
    65e8:	dd00      	ble.n	65ec <__aeabi_dadd+0x4a0>
    65ea:	e096      	b.n	671a <__aeabi_dadd+0x5ce>
    65ec:	2b1f      	cmp	r3, #31
    65ee:	dd00      	ble.n	65f2 <__aeabi_dadd+0x4a6>
    65f0:	e09f      	b.n	6732 <__aeabi_dadd+0x5e6>
    65f2:	2620      	movs	r6, #32
    65f4:	1af3      	subs	r3, r6, r3
    65f6:	0026      	movs	r6, r4
    65f8:	409e      	lsls	r6, r3
    65fa:	469c      	mov	ip, r3
    65fc:	46b3      	mov	fp, r6
    65fe:	4653      	mov	r3, sl
    6600:	003e      	movs	r6, r7
    6602:	40de      	lsrs	r6, r3
    6604:	0033      	movs	r3, r6
    6606:	465e      	mov	r6, fp
    6608:	431e      	orrs	r6, r3
    660a:	4663      	mov	r3, ip
    660c:	409f      	lsls	r7, r3
    660e:	1e7b      	subs	r3, r7, #1
    6610:	419f      	sbcs	r7, r3
    6612:	4653      	mov	r3, sl
    6614:	40dc      	lsrs	r4, r3
    6616:	4337      	orrs	r7, r6
    6618:	18bf      	adds	r7, r7, r2
    661a:	4297      	cmp	r7, r2
    661c:	4192      	sbcs	r2, r2
    661e:	1864      	adds	r4, r4, r1
    6620:	4252      	negs	r2, r2
    6622:	18a4      	adds	r4, r4, r2
    6624:	0006      	movs	r6, r0
    6626:	e678      	b.n	631a <__aeabi_dadd+0x1ce>
    6628:	4327      	orrs	r7, r4
    662a:	1e7c      	subs	r4, r7, #1
    662c:	41a7      	sbcs	r7, r4
    662e:	2400      	movs	r4, #0
    6630:	e737      	b.n	64a2 <__aeabi_dadd+0x356>
    6632:	4e4c      	ldr	r6, [pc, #304]	; (6764 <__aeabi_dadd+0x618>)
    6634:	42b0      	cmp	r0, r6
    6636:	d036      	beq.n	66a6 <__aeabi_dadd+0x55a>
    6638:	2680      	movs	r6, #128	; 0x80
    663a:	425b      	negs	r3, r3
    663c:	0436      	lsls	r6, r6, #16
    663e:	469a      	mov	sl, r3
    6640:	4334      	orrs	r4, r6
    6642:	e7cf      	b.n	65e4 <__aeabi_dadd+0x498>
    6644:	0018      	movs	r0, r3
    6646:	4310      	orrs	r0, r2
    6648:	d100      	bne.n	664c <__aeabi_dadd+0x500>
    664a:	e603      	b.n	6254 <__aeabi_dadd+0x108>
    664c:	1ab8      	subs	r0, r7, r2
    664e:	4684      	mov	ip, r0
    6650:	4567      	cmp	r7, ip
    6652:	41ad      	sbcs	r5, r5
    6654:	1ae0      	subs	r0, r4, r3
    6656:	426d      	negs	r5, r5
    6658:	1b40      	subs	r0, r0, r5
    665a:	0205      	lsls	r5, r0, #8
    665c:	d400      	bmi.n	6660 <__aeabi_dadd+0x514>
    665e:	e62c      	b.n	62ba <__aeabi_dadd+0x16e>
    6660:	1bd7      	subs	r7, r2, r7
    6662:	42ba      	cmp	r2, r7
    6664:	4192      	sbcs	r2, r2
    6666:	1b1c      	subs	r4, r3, r4
    6668:	4252      	negs	r2, r2
    666a:	1aa4      	subs	r4, r4, r2
    666c:	46d8      	mov	r8, fp
    666e:	e5f1      	b.n	6254 <__aeabi_dadd+0x108>
    6670:	0018      	movs	r0, r3
    6672:	4310      	orrs	r0, r2
    6674:	d100      	bne.n	6678 <__aeabi_dadd+0x52c>
    6676:	e763      	b.n	6540 <__aeabi_dadd+0x3f4>
    6678:	08f8      	lsrs	r0, r7, #3
    667a:	0767      	lsls	r7, r4, #29
    667c:	4307      	orrs	r7, r0
    667e:	2080      	movs	r0, #128	; 0x80
    6680:	08e4      	lsrs	r4, r4, #3
    6682:	0300      	lsls	r0, r0, #12
    6684:	4204      	tst	r4, r0
    6686:	d008      	beq.n	669a <__aeabi_dadd+0x54e>
    6688:	08dd      	lsrs	r5, r3, #3
    668a:	4205      	tst	r5, r0
    668c:	d105      	bne.n	669a <__aeabi_dadd+0x54e>
    668e:	08d2      	lsrs	r2, r2, #3
    6690:	0759      	lsls	r1, r3, #29
    6692:	4311      	orrs	r1, r2
    6694:	000f      	movs	r7, r1
    6696:	002c      	movs	r4, r5
    6698:	46d8      	mov	r8, fp
    669a:	0f7b      	lsrs	r3, r7, #29
    669c:	00e4      	lsls	r4, r4, #3
    669e:	431c      	orrs	r4, r3
    66a0:	00ff      	lsls	r7, r7, #3
    66a2:	4e30      	ldr	r6, [pc, #192]	; (6764 <__aeabi_dadd+0x618>)
    66a4:	e5d6      	b.n	6254 <__aeabi_dadd+0x108>
    66a6:	000c      	movs	r4, r1
    66a8:	0017      	movs	r7, r2
    66aa:	0006      	movs	r6, r0
    66ac:	e5d2      	b.n	6254 <__aeabi_dadd+0x108>
    66ae:	2b00      	cmp	r3, #0
    66b0:	d038      	beq.n	6724 <__aeabi_dadd+0x5d8>
    66b2:	000b      	movs	r3, r1
    66b4:	4313      	orrs	r3, r2
    66b6:	d100      	bne.n	66ba <__aeabi_dadd+0x56e>
    66b8:	e742      	b.n	6540 <__aeabi_dadd+0x3f4>
    66ba:	08f8      	lsrs	r0, r7, #3
    66bc:	0767      	lsls	r7, r4, #29
    66be:	4307      	orrs	r7, r0
    66c0:	2080      	movs	r0, #128	; 0x80
    66c2:	08e4      	lsrs	r4, r4, #3
    66c4:	0300      	lsls	r0, r0, #12
    66c6:	4204      	tst	r4, r0
    66c8:	d0e7      	beq.n	669a <__aeabi_dadd+0x54e>
    66ca:	08cb      	lsrs	r3, r1, #3
    66cc:	4203      	tst	r3, r0
    66ce:	d1e4      	bne.n	669a <__aeabi_dadd+0x54e>
    66d0:	08d2      	lsrs	r2, r2, #3
    66d2:	0749      	lsls	r1, r1, #29
    66d4:	4311      	orrs	r1, r2
    66d6:	000f      	movs	r7, r1
    66d8:	001c      	movs	r4, r3
    66da:	e7de      	b.n	669a <__aeabi_dadd+0x54e>
    66dc:	2700      	movs	r7, #0
    66de:	2400      	movs	r4, #0
    66e0:	e5d5      	b.n	628e <__aeabi_dadd+0x142>
    66e2:	2100      	movs	r1, #0
    66e4:	e76b      	b.n	65be <__aeabi_dadd+0x472>
    66e6:	2500      	movs	r5, #0
    66e8:	2700      	movs	r7, #0
    66ea:	e5f3      	b.n	62d4 <__aeabi_dadd+0x188>
    66ec:	464e      	mov	r6, r9
    66ee:	0025      	movs	r5, r4
    66f0:	3e20      	subs	r6, #32
    66f2:	40f5      	lsrs	r5, r6
    66f4:	464b      	mov	r3, r9
    66f6:	002e      	movs	r6, r5
    66f8:	2b20      	cmp	r3, #32
    66fa:	d02d      	beq.n	6758 <__aeabi_dadd+0x60c>
    66fc:	2540      	movs	r5, #64	; 0x40
    66fe:	1aed      	subs	r5, r5, r3
    6700:	40ac      	lsls	r4, r5
    6702:	4327      	orrs	r7, r4
    6704:	1e7c      	subs	r4, r7, #1
    6706:	41a7      	sbcs	r7, r4
    6708:	2400      	movs	r4, #0
    670a:	4337      	orrs	r7, r6
    670c:	e6c9      	b.n	64a2 <__aeabi_dadd+0x356>
    670e:	2480      	movs	r4, #128	; 0x80
    6710:	2500      	movs	r5, #0
    6712:	0324      	lsls	r4, r4, #12
    6714:	4e13      	ldr	r6, [pc, #76]	; (6764 <__aeabi_dadd+0x618>)
    6716:	2700      	movs	r7, #0
    6718:	e5dc      	b.n	62d4 <__aeabi_dadd+0x188>
    671a:	4327      	orrs	r7, r4
    671c:	1e7c      	subs	r4, r7, #1
    671e:	41a7      	sbcs	r7, r4
    6720:	2400      	movs	r4, #0
    6722:	e779      	b.n	6618 <__aeabi_dadd+0x4cc>
    6724:	000c      	movs	r4, r1
    6726:	0017      	movs	r7, r2
    6728:	4e0e      	ldr	r6, [pc, #56]	; (6764 <__aeabi_dadd+0x618>)
    672a:	e593      	b.n	6254 <__aeabi_dadd+0x108>
    672c:	000c      	movs	r4, r1
    672e:	0017      	movs	r7, r2
    6730:	e590      	b.n	6254 <__aeabi_dadd+0x108>
    6732:	4656      	mov	r6, sl
    6734:	0023      	movs	r3, r4
    6736:	3e20      	subs	r6, #32
    6738:	40f3      	lsrs	r3, r6
    673a:	4699      	mov	r9, r3
    673c:	4653      	mov	r3, sl
    673e:	2b20      	cmp	r3, #32
    6740:	d00e      	beq.n	6760 <__aeabi_dadd+0x614>
    6742:	2340      	movs	r3, #64	; 0x40
    6744:	4656      	mov	r6, sl
    6746:	1b9b      	subs	r3, r3, r6
    6748:	409c      	lsls	r4, r3
    674a:	4327      	orrs	r7, r4
    674c:	1e7c      	subs	r4, r7, #1
    674e:	41a7      	sbcs	r7, r4
    6750:	464b      	mov	r3, r9
    6752:	2400      	movs	r4, #0
    6754:	431f      	orrs	r7, r3
    6756:	e75f      	b.n	6618 <__aeabi_dadd+0x4cc>
    6758:	2400      	movs	r4, #0
    675a:	e7d2      	b.n	6702 <__aeabi_dadd+0x5b6>
    675c:	0017      	movs	r7, r2
    675e:	e5b2      	b.n	62c6 <__aeabi_dadd+0x17a>
    6760:	2400      	movs	r4, #0
    6762:	e7f2      	b.n	674a <__aeabi_dadd+0x5fe>
    6764:	000007ff 	.word	0x000007ff
    6768:	ff7fffff 	.word	0xff7fffff

0000676c <__eqdf2>:
    676c:	b5f0      	push	{r4, r5, r6, r7, lr}
    676e:	464f      	mov	r7, r9
    6770:	4646      	mov	r6, r8
    6772:	46d6      	mov	lr, sl
    6774:	005c      	lsls	r4, r3, #1
    6776:	b5c0      	push	{r6, r7, lr}
    6778:	031f      	lsls	r7, r3, #12
    677a:	0fdb      	lsrs	r3, r3, #31
    677c:	469a      	mov	sl, r3
    677e:	4b17      	ldr	r3, [pc, #92]	; (67dc <__eqdf2+0x70>)
    6780:	030e      	lsls	r6, r1, #12
    6782:	004d      	lsls	r5, r1, #1
    6784:	4684      	mov	ip, r0
    6786:	4680      	mov	r8, r0
    6788:	0b36      	lsrs	r6, r6, #12
    678a:	0d6d      	lsrs	r5, r5, #21
    678c:	0fc9      	lsrs	r1, r1, #31
    678e:	4691      	mov	r9, r2
    6790:	0b3f      	lsrs	r7, r7, #12
    6792:	0d64      	lsrs	r4, r4, #21
    6794:	2001      	movs	r0, #1
    6796:	429d      	cmp	r5, r3
    6798:	d008      	beq.n	67ac <__eqdf2+0x40>
    679a:	429c      	cmp	r4, r3
    679c:	d001      	beq.n	67a2 <__eqdf2+0x36>
    679e:	42a5      	cmp	r5, r4
    67a0:	d00b      	beq.n	67ba <__eqdf2+0x4e>
    67a2:	bc1c      	pop	{r2, r3, r4}
    67a4:	4690      	mov	r8, r2
    67a6:	4699      	mov	r9, r3
    67a8:	46a2      	mov	sl, r4
    67aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67ac:	4663      	mov	r3, ip
    67ae:	4333      	orrs	r3, r6
    67b0:	d1f7      	bne.n	67a2 <__eqdf2+0x36>
    67b2:	42ac      	cmp	r4, r5
    67b4:	d1f5      	bne.n	67a2 <__eqdf2+0x36>
    67b6:	433a      	orrs	r2, r7
    67b8:	d1f3      	bne.n	67a2 <__eqdf2+0x36>
    67ba:	2001      	movs	r0, #1
    67bc:	42be      	cmp	r6, r7
    67be:	d1f0      	bne.n	67a2 <__eqdf2+0x36>
    67c0:	45c8      	cmp	r8, r9
    67c2:	d1ee      	bne.n	67a2 <__eqdf2+0x36>
    67c4:	4551      	cmp	r1, sl
    67c6:	d007      	beq.n	67d8 <__eqdf2+0x6c>
    67c8:	2d00      	cmp	r5, #0
    67ca:	d1ea      	bne.n	67a2 <__eqdf2+0x36>
    67cc:	4663      	mov	r3, ip
    67ce:	431e      	orrs	r6, r3
    67d0:	0030      	movs	r0, r6
    67d2:	1e46      	subs	r6, r0, #1
    67d4:	41b0      	sbcs	r0, r6
    67d6:	e7e4      	b.n	67a2 <__eqdf2+0x36>
    67d8:	2000      	movs	r0, #0
    67da:	e7e2      	b.n	67a2 <__eqdf2+0x36>
    67dc:	000007ff 	.word	0x000007ff

000067e0 <__gedf2>:
    67e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    67e2:	4645      	mov	r5, r8
    67e4:	46de      	mov	lr, fp
    67e6:	4657      	mov	r7, sl
    67e8:	464e      	mov	r6, r9
    67ea:	b5e0      	push	{r5, r6, r7, lr}
    67ec:	031f      	lsls	r7, r3, #12
    67ee:	0b3d      	lsrs	r5, r7, #12
    67f0:	4f2c      	ldr	r7, [pc, #176]	; (68a4 <__gedf2+0xc4>)
    67f2:	030e      	lsls	r6, r1, #12
    67f4:	004c      	lsls	r4, r1, #1
    67f6:	46ab      	mov	fp, r5
    67f8:	005d      	lsls	r5, r3, #1
    67fa:	4684      	mov	ip, r0
    67fc:	0b36      	lsrs	r6, r6, #12
    67fe:	0d64      	lsrs	r4, r4, #21
    6800:	0fc9      	lsrs	r1, r1, #31
    6802:	4690      	mov	r8, r2
    6804:	0d6d      	lsrs	r5, r5, #21
    6806:	0fdb      	lsrs	r3, r3, #31
    6808:	42bc      	cmp	r4, r7
    680a:	d02a      	beq.n	6862 <__gedf2+0x82>
    680c:	4f25      	ldr	r7, [pc, #148]	; (68a4 <__gedf2+0xc4>)
    680e:	42bd      	cmp	r5, r7
    6810:	d02d      	beq.n	686e <__gedf2+0x8e>
    6812:	2c00      	cmp	r4, #0
    6814:	d10f      	bne.n	6836 <__gedf2+0x56>
    6816:	4330      	orrs	r0, r6
    6818:	0007      	movs	r7, r0
    681a:	4681      	mov	r9, r0
    681c:	4278      	negs	r0, r7
    681e:	4178      	adcs	r0, r7
    6820:	b2c0      	uxtb	r0, r0
    6822:	2d00      	cmp	r5, #0
    6824:	d117      	bne.n	6856 <__gedf2+0x76>
    6826:	465f      	mov	r7, fp
    6828:	433a      	orrs	r2, r7
    682a:	d114      	bne.n	6856 <__gedf2+0x76>
    682c:	464b      	mov	r3, r9
    682e:	2000      	movs	r0, #0
    6830:	2b00      	cmp	r3, #0
    6832:	d00a      	beq.n	684a <__gedf2+0x6a>
    6834:	e006      	b.n	6844 <__gedf2+0x64>
    6836:	2d00      	cmp	r5, #0
    6838:	d102      	bne.n	6840 <__gedf2+0x60>
    683a:	4658      	mov	r0, fp
    683c:	4302      	orrs	r2, r0
    683e:	d001      	beq.n	6844 <__gedf2+0x64>
    6840:	4299      	cmp	r1, r3
    6842:	d018      	beq.n	6876 <__gedf2+0x96>
    6844:	4248      	negs	r0, r1
    6846:	2101      	movs	r1, #1
    6848:	4308      	orrs	r0, r1
    684a:	bc3c      	pop	{r2, r3, r4, r5}
    684c:	4690      	mov	r8, r2
    684e:	4699      	mov	r9, r3
    6850:	46a2      	mov	sl, r4
    6852:	46ab      	mov	fp, r5
    6854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6856:	2800      	cmp	r0, #0
    6858:	d0f2      	beq.n	6840 <__gedf2+0x60>
    685a:	2001      	movs	r0, #1
    685c:	3b01      	subs	r3, #1
    685e:	4318      	orrs	r0, r3
    6860:	e7f3      	b.n	684a <__gedf2+0x6a>
    6862:	0037      	movs	r7, r6
    6864:	4307      	orrs	r7, r0
    6866:	d0d1      	beq.n	680c <__gedf2+0x2c>
    6868:	2002      	movs	r0, #2
    686a:	4240      	negs	r0, r0
    686c:	e7ed      	b.n	684a <__gedf2+0x6a>
    686e:	465f      	mov	r7, fp
    6870:	4317      	orrs	r7, r2
    6872:	d0ce      	beq.n	6812 <__gedf2+0x32>
    6874:	e7f8      	b.n	6868 <__gedf2+0x88>
    6876:	42ac      	cmp	r4, r5
    6878:	dce4      	bgt.n	6844 <__gedf2+0x64>
    687a:	da03      	bge.n	6884 <__gedf2+0xa4>
    687c:	1e48      	subs	r0, r1, #1
    687e:	2101      	movs	r1, #1
    6880:	4308      	orrs	r0, r1
    6882:	e7e2      	b.n	684a <__gedf2+0x6a>
    6884:	455e      	cmp	r6, fp
    6886:	d8dd      	bhi.n	6844 <__gedf2+0x64>
    6888:	d006      	beq.n	6898 <__gedf2+0xb8>
    688a:	2000      	movs	r0, #0
    688c:	455e      	cmp	r6, fp
    688e:	d2dc      	bcs.n	684a <__gedf2+0x6a>
    6890:	2301      	movs	r3, #1
    6892:	1e48      	subs	r0, r1, #1
    6894:	4318      	orrs	r0, r3
    6896:	e7d8      	b.n	684a <__gedf2+0x6a>
    6898:	45c4      	cmp	ip, r8
    689a:	d8d3      	bhi.n	6844 <__gedf2+0x64>
    689c:	2000      	movs	r0, #0
    689e:	45c4      	cmp	ip, r8
    68a0:	d3f6      	bcc.n	6890 <__gedf2+0xb0>
    68a2:	e7d2      	b.n	684a <__gedf2+0x6a>
    68a4:	000007ff 	.word	0x000007ff

000068a8 <__ledf2>:
    68a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68aa:	464e      	mov	r6, r9
    68ac:	4645      	mov	r5, r8
    68ae:	46de      	mov	lr, fp
    68b0:	4657      	mov	r7, sl
    68b2:	005c      	lsls	r4, r3, #1
    68b4:	b5e0      	push	{r5, r6, r7, lr}
    68b6:	031f      	lsls	r7, r3, #12
    68b8:	0fdb      	lsrs	r3, r3, #31
    68ba:	4699      	mov	r9, r3
    68bc:	4b2a      	ldr	r3, [pc, #168]	; (6968 <__ledf2+0xc0>)
    68be:	030e      	lsls	r6, r1, #12
    68c0:	004d      	lsls	r5, r1, #1
    68c2:	0fc9      	lsrs	r1, r1, #31
    68c4:	4684      	mov	ip, r0
    68c6:	0b36      	lsrs	r6, r6, #12
    68c8:	0d6d      	lsrs	r5, r5, #21
    68ca:	468b      	mov	fp, r1
    68cc:	4690      	mov	r8, r2
    68ce:	0b3f      	lsrs	r7, r7, #12
    68d0:	0d64      	lsrs	r4, r4, #21
    68d2:	429d      	cmp	r5, r3
    68d4:	d020      	beq.n	6918 <__ledf2+0x70>
    68d6:	4b24      	ldr	r3, [pc, #144]	; (6968 <__ledf2+0xc0>)
    68d8:	429c      	cmp	r4, r3
    68da:	d022      	beq.n	6922 <__ledf2+0x7a>
    68dc:	2d00      	cmp	r5, #0
    68de:	d112      	bne.n	6906 <__ledf2+0x5e>
    68e0:	4330      	orrs	r0, r6
    68e2:	4243      	negs	r3, r0
    68e4:	4143      	adcs	r3, r0
    68e6:	b2db      	uxtb	r3, r3
    68e8:	2c00      	cmp	r4, #0
    68ea:	d01f      	beq.n	692c <__ledf2+0x84>
    68ec:	2b00      	cmp	r3, #0
    68ee:	d00c      	beq.n	690a <__ledf2+0x62>
    68f0:	464b      	mov	r3, r9
    68f2:	2001      	movs	r0, #1
    68f4:	3b01      	subs	r3, #1
    68f6:	4303      	orrs	r3, r0
    68f8:	0018      	movs	r0, r3
    68fa:	bc3c      	pop	{r2, r3, r4, r5}
    68fc:	4690      	mov	r8, r2
    68fe:	4699      	mov	r9, r3
    6900:	46a2      	mov	sl, r4
    6902:	46ab      	mov	fp, r5
    6904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6906:	2c00      	cmp	r4, #0
    6908:	d016      	beq.n	6938 <__ledf2+0x90>
    690a:	45cb      	cmp	fp, r9
    690c:	d017      	beq.n	693e <__ledf2+0x96>
    690e:	465b      	mov	r3, fp
    6910:	4259      	negs	r1, r3
    6912:	2301      	movs	r3, #1
    6914:	430b      	orrs	r3, r1
    6916:	e7ef      	b.n	68f8 <__ledf2+0x50>
    6918:	0031      	movs	r1, r6
    691a:	2302      	movs	r3, #2
    691c:	4301      	orrs	r1, r0
    691e:	d1eb      	bne.n	68f8 <__ledf2+0x50>
    6920:	e7d9      	b.n	68d6 <__ledf2+0x2e>
    6922:	0039      	movs	r1, r7
    6924:	2302      	movs	r3, #2
    6926:	4311      	orrs	r1, r2
    6928:	d1e6      	bne.n	68f8 <__ledf2+0x50>
    692a:	e7d7      	b.n	68dc <__ledf2+0x34>
    692c:	433a      	orrs	r2, r7
    692e:	d1dd      	bne.n	68ec <__ledf2+0x44>
    6930:	2300      	movs	r3, #0
    6932:	2800      	cmp	r0, #0
    6934:	d0e0      	beq.n	68f8 <__ledf2+0x50>
    6936:	e7ea      	b.n	690e <__ledf2+0x66>
    6938:	433a      	orrs	r2, r7
    693a:	d1e6      	bne.n	690a <__ledf2+0x62>
    693c:	e7e7      	b.n	690e <__ledf2+0x66>
    693e:	42a5      	cmp	r5, r4
    6940:	dce5      	bgt.n	690e <__ledf2+0x66>
    6942:	db05      	blt.n	6950 <__ledf2+0xa8>
    6944:	42be      	cmp	r6, r7
    6946:	d8e2      	bhi.n	690e <__ledf2+0x66>
    6948:	d007      	beq.n	695a <__ledf2+0xb2>
    694a:	2300      	movs	r3, #0
    694c:	42be      	cmp	r6, r7
    694e:	d2d3      	bcs.n	68f8 <__ledf2+0x50>
    6950:	4659      	mov	r1, fp
    6952:	2301      	movs	r3, #1
    6954:	3901      	subs	r1, #1
    6956:	430b      	orrs	r3, r1
    6958:	e7ce      	b.n	68f8 <__ledf2+0x50>
    695a:	45c4      	cmp	ip, r8
    695c:	d8d7      	bhi.n	690e <__ledf2+0x66>
    695e:	2300      	movs	r3, #0
    6960:	45c4      	cmp	ip, r8
    6962:	d3f5      	bcc.n	6950 <__ledf2+0xa8>
    6964:	e7c8      	b.n	68f8 <__ledf2+0x50>
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	000007ff 	.word	0x000007ff

0000696c <__aeabi_dsub>:
    696c:	b5f0      	push	{r4, r5, r6, r7, lr}
    696e:	4646      	mov	r6, r8
    6970:	46d6      	mov	lr, sl
    6972:	464f      	mov	r7, r9
    6974:	030c      	lsls	r4, r1, #12
    6976:	b5c0      	push	{r6, r7, lr}
    6978:	0fcd      	lsrs	r5, r1, #31
    697a:	004e      	lsls	r6, r1, #1
    697c:	0a61      	lsrs	r1, r4, #9
    697e:	0f44      	lsrs	r4, r0, #29
    6980:	430c      	orrs	r4, r1
    6982:	00c1      	lsls	r1, r0, #3
    6984:	0058      	lsls	r0, r3, #1
    6986:	0d40      	lsrs	r0, r0, #21
    6988:	4684      	mov	ip, r0
    698a:	468a      	mov	sl, r1
    698c:	000f      	movs	r7, r1
    698e:	0319      	lsls	r1, r3, #12
    6990:	0f50      	lsrs	r0, r2, #29
    6992:	0a49      	lsrs	r1, r1, #9
    6994:	4301      	orrs	r1, r0
    6996:	48c6      	ldr	r0, [pc, #792]	; (6cb0 <__aeabi_dsub+0x344>)
    6998:	0d76      	lsrs	r6, r6, #21
    699a:	46a8      	mov	r8, r5
    699c:	0fdb      	lsrs	r3, r3, #31
    699e:	00d2      	lsls	r2, r2, #3
    69a0:	4584      	cmp	ip, r0
    69a2:	d100      	bne.n	69a6 <__aeabi_dsub+0x3a>
    69a4:	e0d8      	b.n	6b58 <__aeabi_dsub+0x1ec>
    69a6:	2001      	movs	r0, #1
    69a8:	4043      	eors	r3, r0
    69aa:	42ab      	cmp	r3, r5
    69ac:	d100      	bne.n	69b0 <__aeabi_dsub+0x44>
    69ae:	e0a6      	b.n	6afe <__aeabi_dsub+0x192>
    69b0:	4660      	mov	r0, ip
    69b2:	1a35      	subs	r5, r6, r0
    69b4:	2d00      	cmp	r5, #0
    69b6:	dc00      	bgt.n	69ba <__aeabi_dsub+0x4e>
    69b8:	e105      	b.n	6bc6 <__aeabi_dsub+0x25a>
    69ba:	2800      	cmp	r0, #0
    69bc:	d110      	bne.n	69e0 <__aeabi_dsub+0x74>
    69be:	000b      	movs	r3, r1
    69c0:	4313      	orrs	r3, r2
    69c2:	d100      	bne.n	69c6 <__aeabi_dsub+0x5a>
    69c4:	e0d7      	b.n	6b76 <__aeabi_dsub+0x20a>
    69c6:	1e6b      	subs	r3, r5, #1
    69c8:	2b00      	cmp	r3, #0
    69ca:	d000      	beq.n	69ce <__aeabi_dsub+0x62>
    69cc:	e14b      	b.n	6c66 <__aeabi_dsub+0x2fa>
    69ce:	4653      	mov	r3, sl
    69d0:	1a9f      	subs	r7, r3, r2
    69d2:	45ba      	cmp	sl, r7
    69d4:	4180      	sbcs	r0, r0
    69d6:	1a64      	subs	r4, r4, r1
    69d8:	4240      	negs	r0, r0
    69da:	1a24      	subs	r4, r4, r0
    69dc:	2601      	movs	r6, #1
    69de:	e01e      	b.n	6a1e <__aeabi_dsub+0xb2>
    69e0:	4bb3      	ldr	r3, [pc, #716]	; (6cb0 <__aeabi_dsub+0x344>)
    69e2:	429e      	cmp	r6, r3
    69e4:	d048      	beq.n	6a78 <__aeabi_dsub+0x10c>
    69e6:	2380      	movs	r3, #128	; 0x80
    69e8:	041b      	lsls	r3, r3, #16
    69ea:	4319      	orrs	r1, r3
    69ec:	2d38      	cmp	r5, #56	; 0x38
    69ee:	dd00      	ble.n	69f2 <__aeabi_dsub+0x86>
    69f0:	e119      	b.n	6c26 <__aeabi_dsub+0x2ba>
    69f2:	2d1f      	cmp	r5, #31
    69f4:	dd00      	ble.n	69f8 <__aeabi_dsub+0x8c>
    69f6:	e14c      	b.n	6c92 <__aeabi_dsub+0x326>
    69f8:	2320      	movs	r3, #32
    69fa:	000f      	movs	r7, r1
    69fc:	1b5b      	subs	r3, r3, r5
    69fe:	0010      	movs	r0, r2
    6a00:	409a      	lsls	r2, r3
    6a02:	409f      	lsls	r7, r3
    6a04:	40e8      	lsrs	r0, r5
    6a06:	1e53      	subs	r3, r2, #1
    6a08:	419a      	sbcs	r2, r3
    6a0a:	40e9      	lsrs	r1, r5
    6a0c:	4307      	orrs	r7, r0
    6a0e:	4317      	orrs	r7, r2
    6a10:	4653      	mov	r3, sl
    6a12:	1bdf      	subs	r7, r3, r7
    6a14:	1a61      	subs	r1, r4, r1
    6a16:	45ba      	cmp	sl, r7
    6a18:	41a4      	sbcs	r4, r4
    6a1a:	4264      	negs	r4, r4
    6a1c:	1b0c      	subs	r4, r1, r4
    6a1e:	0223      	lsls	r3, r4, #8
    6a20:	d400      	bmi.n	6a24 <__aeabi_dsub+0xb8>
    6a22:	e0c5      	b.n	6bb0 <__aeabi_dsub+0x244>
    6a24:	0264      	lsls	r4, r4, #9
    6a26:	0a65      	lsrs	r5, r4, #9
    6a28:	2d00      	cmp	r5, #0
    6a2a:	d100      	bne.n	6a2e <__aeabi_dsub+0xc2>
    6a2c:	e0f6      	b.n	6c1c <__aeabi_dsub+0x2b0>
    6a2e:	0028      	movs	r0, r5
    6a30:	f7fe fe06 	bl	5640 <__clzsi2>
    6a34:	0003      	movs	r3, r0
    6a36:	3b08      	subs	r3, #8
    6a38:	2b1f      	cmp	r3, #31
    6a3a:	dd00      	ble.n	6a3e <__aeabi_dsub+0xd2>
    6a3c:	e0e9      	b.n	6c12 <__aeabi_dsub+0x2a6>
    6a3e:	2220      	movs	r2, #32
    6a40:	003c      	movs	r4, r7
    6a42:	1ad2      	subs	r2, r2, r3
    6a44:	409d      	lsls	r5, r3
    6a46:	40d4      	lsrs	r4, r2
    6a48:	409f      	lsls	r7, r3
    6a4a:	4325      	orrs	r5, r4
    6a4c:	429e      	cmp	r6, r3
    6a4e:	dd00      	ble.n	6a52 <__aeabi_dsub+0xe6>
    6a50:	e0db      	b.n	6c0a <__aeabi_dsub+0x29e>
    6a52:	1b9e      	subs	r6, r3, r6
    6a54:	1c73      	adds	r3, r6, #1
    6a56:	2b1f      	cmp	r3, #31
    6a58:	dd00      	ble.n	6a5c <__aeabi_dsub+0xf0>
    6a5a:	e10a      	b.n	6c72 <__aeabi_dsub+0x306>
    6a5c:	2220      	movs	r2, #32
    6a5e:	0038      	movs	r0, r7
    6a60:	1ad2      	subs	r2, r2, r3
    6a62:	0029      	movs	r1, r5
    6a64:	4097      	lsls	r7, r2
    6a66:	002c      	movs	r4, r5
    6a68:	4091      	lsls	r1, r2
    6a6a:	40d8      	lsrs	r0, r3
    6a6c:	1e7a      	subs	r2, r7, #1
    6a6e:	4197      	sbcs	r7, r2
    6a70:	40dc      	lsrs	r4, r3
    6a72:	2600      	movs	r6, #0
    6a74:	4301      	orrs	r1, r0
    6a76:	430f      	orrs	r7, r1
    6a78:	077b      	lsls	r3, r7, #29
    6a7a:	d009      	beq.n	6a90 <__aeabi_dsub+0x124>
    6a7c:	230f      	movs	r3, #15
    6a7e:	403b      	ands	r3, r7
    6a80:	2b04      	cmp	r3, #4
    6a82:	d005      	beq.n	6a90 <__aeabi_dsub+0x124>
    6a84:	1d3b      	adds	r3, r7, #4
    6a86:	42bb      	cmp	r3, r7
    6a88:	41bf      	sbcs	r7, r7
    6a8a:	427f      	negs	r7, r7
    6a8c:	19e4      	adds	r4, r4, r7
    6a8e:	001f      	movs	r7, r3
    6a90:	0223      	lsls	r3, r4, #8
    6a92:	d525      	bpl.n	6ae0 <__aeabi_dsub+0x174>
    6a94:	4b86      	ldr	r3, [pc, #536]	; (6cb0 <__aeabi_dsub+0x344>)
    6a96:	3601      	adds	r6, #1
    6a98:	429e      	cmp	r6, r3
    6a9a:	d100      	bne.n	6a9e <__aeabi_dsub+0x132>
    6a9c:	e0af      	b.n	6bfe <__aeabi_dsub+0x292>
    6a9e:	4b85      	ldr	r3, [pc, #532]	; (6cb4 <__aeabi_dsub+0x348>)
    6aa0:	2501      	movs	r5, #1
    6aa2:	401c      	ands	r4, r3
    6aa4:	4643      	mov	r3, r8
    6aa6:	0762      	lsls	r2, r4, #29
    6aa8:	08ff      	lsrs	r7, r7, #3
    6aaa:	0264      	lsls	r4, r4, #9
    6aac:	0576      	lsls	r6, r6, #21
    6aae:	4317      	orrs	r7, r2
    6ab0:	0b24      	lsrs	r4, r4, #12
    6ab2:	0d76      	lsrs	r6, r6, #21
    6ab4:	401d      	ands	r5, r3
    6ab6:	2100      	movs	r1, #0
    6ab8:	0324      	lsls	r4, r4, #12
    6aba:	0b23      	lsrs	r3, r4, #12
    6abc:	0d0c      	lsrs	r4, r1, #20
    6abe:	4a7e      	ldr	r2, [pc, #504]	; (6cb8 <__aeabi_dsub+0x34c>)
    6ac0:	0524      	lsls	r4, r4, #20
    6ac2:	431c      	orrs	r4, r3
    6ac4:	4014      	ands	r4, r2
    6ac6:	0533      	lsls	r3, r6, #20
    6ac8:	4323      	orrs	r3, r4
    6aca:	005b      	lsls	r3, r3, #1
    6acc:	07ed      	lsls	r5, r5, #31
    6ace:	085b      	lsrs	r3, r3, #1
    6ad0:	432b      	orrs	r3, r5
    6ad2:	0038      	movs	r0, r7
    6ad4:	0019      	movs	r1, r3
    6ad6:	bc1c      	pop	{r2, r3, r4}
    6ad8:	4690      	mov	r8, r2
    6ada:	4699      	mov	r9, r3
    6adc:	46a2      	mov	sl, r4
    6ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ae0:	2501      	movs	r5, #1
    6ae2:	4643      	mov	r3, r8
    6ae4:	0762      	lsls	r2, r4, #29
    6ae6:	08ff      	lsrs	r7, r7, #3
    6ae8:	4317      	orrs	r7, r2
    6aea:	08e4      	lsrs	r4, r4, #3
    6aec:	401d      	ands	r5, r3
    6aee:	4b70      	ldr	r3, [pc, #448]	; (6cb0 <__aeabi_dsub+0x344>)
    6af0:	429e      	cmp	r6, r3
    6af2:	d036      	beq.n	6b62 <__aeabi_dsub+0x1f6>
    6af4:	0324      	lsls	r4, r4, #12
    6af6:	0576      	lsls	r6, r6, #21
    6af8:	0b24      	lsrs	r4, r4, #12
    6afa:	0d76      	lsrs	r6, r6, #21
    6afc:	e7db      	b.n	6ab6 <__aeabi_dsub+0x14a>
    6afe:	4663      	mov	r3, ip
    6b00:	1af3      	subs	r3, r6, r3
    6b02:	2b00      	cmp	r3, #0
    6b04:	dc00      	bgt.n	6b08 <__aeabi_dsub+0x19c>
    6b06:	e094      	b.n	6c32 <__aeabi_dsub+0x2c6>
    6b08:	4660      	mov	r0, ip
    6b0a:	2800      	cmp	r0, #0
    6b0c:	d035      	beq.n	6b7a <__aeabi_dsub+0x20e>
    6b0e:	4868      	ldr	r0, [pc, #416]	; (6cb0 <__aeabi_dsub+0x344>)
    6b10:	4286      	cmp	r6, r0
    6b12:	d0b1      	beq.n	6a78 <__aeabi_dsub+0x10c>
    6b14:	2780      	movs	r7, #128	; 0x80
    6b16:	043f      	lsls	r7, r7, #16
    6b18:	4339      	orrs	r1, r7
    6b1a:	2b38      	cmp	r3, #56	; 0x38
    6b1c:	dc00      	bgt.n	6b20 <__aeabi_dsub+0x1b4>
    6b1e:	e0fd      	b.n	6d1c <__aeabi_dsub+0x3b0>
    6b20:	430a      	orrs	r2, r1
    6b22:	0017      	movs	r7, r2
    6b24:	2100      	movs	r1, #0
    6b26:	1e7a      	subs	r2, r7, #1
    6b28:	4197      	sbcs	r7, r2
    6b2a:	4457      	add	r7, sl
    6b2c:	4557      	cmp	r7, sl
    6b2e:	4180      	sbcs	r0, r0
    6b30:	1909      	adds	r1, r1, r4
    6b32:	4244      	negs	r4, r0
    6b34:	190c      	adds	r4, r1, r4
    6b36:	0223      	lsls	r3, r4, #8
    6b38:	d53a      	bpl.n	6bb0 <__aeabi_dsub+0x244>
    6b3a:	4b5d      	ldr	r3, [pc, #372]	; (6cb0 <__aeabi_dsub+0x344>)
    6b3c:	3601      	adds	r6, #1
    6b3e:	429e      	cmp	r6, r3
    6b40:	d100      	bne.n	6b44 <__aeabi_dsub+0x1d8>
    6b42:	e14b      	b.n	6ddc <__aeabi_dsub+0x470>
    6b44:	2201      	movs	r2, #1
    6b46:	4b5b      	ldr	r3, [pc, #364]	; (6cb4 <__aeabi_dsub+0x348>)
    6b48:	401c      	ands	r4, r3
    6b4a:	087b      	lsrs	r3, r7, #1
    6b4c:	4017      	ands	r7, r2
    6b4e:	431f      	orrs	r7, r3
    6b50:	07e2      	lsls	r2, r4, #31
    6b52:	4317      	orrs	r7, r2
    6b54:	0864      	lsrs	r4, r4, #1
    6b56:	e78f      	b.n	6a78 <__aeabi_dsub+0x10c>
    6b58:	0008      	movs	r0, r1
    6b5a:	4310      	orrs	r0, r2
    6b5c:	d000      	beq.n	6b60 <__aeabi_dsub+0x1f4>
    6b5e:	e724      	b.n	69aa <__aeabi_dsub+0x3e>
    6b60:	e721      	b.n	69a6 <__aeabi_dsub+0x3a>
    6b62:	0023      	movs	r3, r4
    6b64:	433b      	orrs	r3, r7
    6b66:	d100      	bne.n	6b6a <__aeabi_dsub+0x1fe>
    6b68:	e1b9      	b.n	6ede <__aeabi_dsub+0x572>
    6b6a:	2280      	movs	r2, #128	; 0x80
    6b6c:	0312      	lsls	r2, r2, #12
    6b6e:	4314      	orrs	r4, r2
    6b70:	0324      	lsls	r4, r4, #12
    6b72:	0b24      	lsrs	r4, r4, #12
    6b74:	e79f      	b.n	6ab6 <__aeabi_dsub+0x14a>
    6b76:	002e      	movs	r6, r5
    6b78:	e77e      	b.n	6a78 <__aeabi_dsub+0x10c>
    6b7a:	0008      	movs	r0, r1
    6b7c:	4310      	orrs	r0, r2
    6b7e:	d100      	bne.n	6b82 <__aeabi_dsub+0x216>
    6b80:	e0ca      	b.n	6d18 <__aeabi_dsub+0x3ac>
    6b82:	1e58      	subs	r0, r3, #1
    6b84:	4684      	mov	ip, r0
    6b86:	2800      	cmp	r0, #0
    6b88:	d000      	beq.n	6b8c <__aeabi_dsub+0x220>
    6b8a:	e0e7      	b.n	6d5c <__aeabi_dsub+0x3f0>
    6b8c:	4452      	add	r2, sl
    6b8e:	4552      	cmp	r2, sl
    6b90:	4180      	sbcs	r0, r0
    6b92:	1864      	adds	r4, r4, r1
    6b94:	4240      	negs	r0, r0
    6b96:	1824      	adds	r4, r4, r0
    6b98:	0017      	movs	r7, r2
    6b9a:	2601      	movs	r6, #1
    6b9c:	0223      	lsls	r3, r4, #8
    6b9e:	d507      	bpl.n	6bb0 <__aeabi_dsub+0x244>
    6ba0:	2602      	movs	r6, #2
    6ba2:	e7cf      	b.n	6b44 <__aeabi_dsub+0x1d8>
    6ba4:	4664      	mov	r4, ip
    6ba6:	432c      	orrs	r4, r5
    6ba8:	d100      	bne.n	6bac <__aeabi_dsub+0x240>
    6baa:	e1b3      	b.n	6f14 <__aeabi_dsub+0x5a8>
    6bac:	002c      	movs	r4, r5
    6bae:	4667      	mov	r7, ip
    6bb0:	077b      	lsls	r3, r7, #29
    6bb2:	d000      	beq.n	6bb6 <__aeabi_dsub+0x24a>
    6bb4:	e762      	b.n	6a7c <__aeabi_dsub+0x110>
    6bb6:	0763      	lsls	r3, r4, #29
    6bb8:	08ff      	lsrs	r7, r7, #3
    6bba:	431f      	orrs	r7, r3
    6bbc:	2501      	movs	r5, #1
    6bbe:	4643      	mov	r3, r8
    6bc0:	08e4      	lsrs	r4, r4, #3
    6bc2:	401d      	ands	r5, r3
    6bc4:	e793      	b.n	6aee <__aeabi_dsub+0x182>
    6bc6:	2d00      	cmp	r5, #0
    6bc8:	d178      	bne.n	6cbc <__aeabi_dsub+0x350>
    6bca:	1c75      	adds	r5, r6, #1
    6bcc:	056d      	lsls	r5, r5, #21
    6bce:	0d6d      	lsrs	r5, r5, #21
    6bd0:	2d01      	cmp	r5, #1
    6bd2:	dc00      	bgt.n	6bd6 <__aeabi_dsub+0x26a>
    6bd4:	e0f2      	b.n	6dbc <__aeabi_dsub+0x450>
    6bd6:	4650      	mov	r0, sl
    6bd8:	1a80      	subs	r0, r0, r2
    6bda:	4582      	cmp	sl, r0
    6bdc:	41bf      	sbcs	r7, r7
    6bde:	1a65      	subs	r5, r4, r1
    6be0:	427f      	negs	r7, r7
    6be2:	1bed      	subs	r5, r5, r7
    6be4:	4684      	mov	ip, r0
    6be6:	0228      	lsls	r0, r5, #8
    6be8:	d400      	bmi.n	6bec <__aeabi_dsub+0x280>
    6bea:	e08c      	b.n	6d06 <__aeabi_dsub+0x39a>
    6bec:	4650      	mov	r0, sl
    6bee:	1a17      	subs	r7, r2, r0
    6bf0:	42ba      	cmp	r2, r7
    6bf2:	4192      	sbcs	r2, r2
    6bf4:	1b0c      	subs	r4, r1, r4
    6bf6:	4255      	negs	r5, r2
    6bf8:	1b65      	subs	r5, r4, r5
    6bfa:	4698      	mov	r8, r3
    6bfc:	e714      	b.n	6a28 <__aeabi_dsub+0xbc>
    6bfe:	2501      	movs	r5, #1
    6c00:	4643      	mov	r3, r8
    6c02:	2400      	movs	r4, #0
    6c04:	401d      	ands	r5, r3
    6c06:	2700      	movs	r7, #0
    6c08:	e755      	b.n	6ab6 <__aeabi_dsub+0x14a>
    6c0a:	4c2a      	ldr	r4, [pc, #168]	; (6cb4 <__aeabi_dsub+0x348>)
    6c0c:	1af6      	subs	r6, r6, r3
    6c0e:	402c      	ands	r4, r5
    6c10:	e732      	b.n	6a78 <__aeabi_dsub+0x10c>
    6c12:	003d      	movs	r5, r7
    6c14:	3828      	subs	r0, #40	; 0x28
    6c16:	4085      	lsls	r5, r0
    6c18:	2700      	movs	r7, #0
    6c1a:	e717      	b.n	6a4c <__aeabi_dsub+0xe0>
    6c1c:	0038      	movs	r0, r7
    6c1e:	f7fe fd0f 	bl	5640 <__clzsi2>
    6c22:	3020      	adds	r0, #32
    6c24:	e706      	b.n	6a34 <__aeabi_dsub+0xc8>
    6c26:	430a      	orrs	r2, r1
    6c28:	0017      	movs	r7, r2
    6c2a:	2100      	movs	r1, #0
    6c2c:	1e7a      	subs	r2, r7, #1
    6c2e:	4197      	sbcs	r7, r2
    6c30:	e6ee      	b.n	6a10 <__aeabi_dsub+0xa4>
    6c32:	2b00      	cmp	r3, #0
    6c34:	d000      	beq.n	6c38 <__aeabi_dsub+0x2cc>
    6c36:	e0e5      	b.n	6e04 <__aeabi_dsub+0x498>
    6c38:	1c73      	adds	r3, r6, #1
    6c3a:	469c      	mov	ip, r3
    6c3c:	055b      	lsls	r3, r3, #21
    6c3e:	0d5b      	lsrs	r3, r3, #21
    6c40:	2b01      	cmp	r3, #1
    6c42:	dc00      	bgt.n	6c46 <__aeabi_dsub+0x2da>
    6c44:	e09f      	b.n	6d86 <__aeabi_dsub+0x41a>
    6c46:	4b1a      	ldr	r3, [pc, #104]	; (6cb0 <__aeabi_dsub+0x344>)
    6c48:	459c      	cmp	ip, r3
    6c4a:	d100      	bne.n	6c4e <__aeabi_dsub+0x2e2>
    6c4c:	e0c5      	b.n	6dda <__aeabi_dsub+0x46e>
    6c4e:	4452      	add	r2, sl
    6c50:	4552      	cmp	r2, sl
    6c52:	4180      	sbcs	r0, r0
    6c54:	1864      	adds	r4, r4, r1
    6c56:	4240      	negs	r0, r0
    6c58:	1824      	adds	r4, r4, r0
    6c5a:	07e7      	lsls	r7, r4, #31
    6c5c:	0852      	lsrs	r2, r2, #1
    6c5e:	4317      	orrs	r7, r2
    6c60:	0864      	lsrs	r4, r4, #1
    6c62:	4666      	mov	r6, ip
    6c64:	e708      	b.n	6a78 <__aeabi_dsub+0x10c>
    6c66:	4812      	ldr	r0, [pc, #72]	; (6cb0 <__aeabi_dsub+0x344>)
    6c68:	4285      	cmp	r5, r0
    6c6a:	d100      	bne.n	6c6e <__aeabi_dsub+0x302>
    6c6c:	e085      	b.n	6d7a <__aeabi_dsub+0x40e>
    6c6e:	001d      	movs	r5, r3
    6c70:	e6bc      	b.n	69ec <__aeabi_dsub+0x80>
    6c72:	0029      	movs	r1, r5
    6c74:	3e1f      	subs	r6, #31
    6c76:	40f1      	lsrs	r1, r6
    6c78:	2b20      	cmp	r3, #32
    6c7a:	d100      	bne.n	6c7e <__aeabi_dsub+0x312>
    6c7c:	e07f      	b.n	6d7e <__aeabi_dsub+0x412>
    6c7e:	2240      	movs	r2, #64	; 0x40
    6c80:	1ad3      	subs	r3, r2, r3
    6c82:	409d      	lsls	r5, r3
    6c84:	432f      	orrs	r7, r5
    6c86:	1e7d      	subs	r5, r7, #1
    6c88:	41af      	sbcs	r7, r5
    6c8a:	2400      	movs	r4, #0
    6c8c:	430f      	orrs	r7, r1
    6c8e:	2600      	movs	r6, #0
    6c90:	e78e      	b.n	6bb0 <__aeabi_dsub+0x244>
    6c92:	002b      	movs	r3, r5
    6c94:	000f      	movs	r7, r1
    6c96:	3b20      	subs	r3, #32
    6c98:	40df      	lsrs	r7, r3
    6c9a:	2d20      	cmp	r5, #32
    6c9c:	d071      	beq.n	6d82 <__aeabi_dsub+0x416>
    6c9e:	2340      	movs	r3, #64	; 0x40
    6ca0:	1b5d      	subs	r5, r3, r5
    6ca2:	40a9      	lsls	r1, r5
    6ca4:	430a      	orrs	r2, r1
    6ca6:	1e51      	subs	r1, r2, #1
    6ca8:	418a      	sbcs	r2, r1
    6caa:	2100      	movs	r1, #0
    6cac:	4317      	orrs	r7, r2
    6cae:	e6af      	b.n	6a10 <__aeabi_dsub+0xa4>
    6cb0:	000007ff 	.word	0x000007ff
    6cb4:	ff7fffff 	.word	0xff7fffff
    6cb8:	800fffff 	.word	0x800fffff
    6cbc:	2e00      	cmp	r6, #0
    6cbe:	d03e      	beq.n	6d3e <__aeabi_dsub+0x3d2>
    6cc0:	4eb3      	ldr	r6, [pc, #716]	; (6f90 <__aeabi_dsub+0x624>)
    6cc2:	45b4      	cmp	ip, r6
    6cc4:	d045      	beq.n	6d52 <__aeabi_dsub+0x3e6>
    6cc6:	2680      	movs	r6, #128	; 0x80
    6cc8:	0436      	lsls	r6, r6, #16
    6cca:	426d      	negs	r5, r5
    6ccc:	4334      	orrs	r4, r6
    6cce:	2d38      	cmp	r5, #56	; 0x38
    6cd0:	dd00      	ble.n	6cd4 <__aeabi_dsub+0x368>
    6cd2:	e0a8      	b.n	6e26 <__aeabi_dsub+0x4ba>
    6cd4:	2d1f      	cmp	r5, #31
    6cd6:	dd00      	ble.n	6cda <__aeabi_dsub+0x36e>
    6cd8:	e11f      	b.n	6f1a <__aeabi_dsub+0x5ae>
    6cda:	2620      	movs	r6, #32
    6cdc:	0027      	movs	r7, r4
    6cde:	4650      	mov	r0, sl
    6ce0:	1b76      	subs	r6, r6, r5
    6ce2:	40b7      	lsls	r7, r6
    6ce4:	40e8      	lsrs	r0, r5
    6ce6:	4307      	orrs	r7, r0
    6ce8:	4650      	mov	r0, sl
    6cea:	40b0      	lsls	r0, r6
    6cec:	1e46      	subs	r6, r0, #1
    6cee:	41b0      	sbcs	r0, r6
    6cf0:	40ec      	lsrs	r4, r5
    6cf2:	4338      	orrs	r0, r7
    6cf4:	1a17      	subs	r7, r2, r0
    6cf6:	42ba      	cmp	r2, r7
    6cf8:	4192      	sbcs	r2, r2
    6cfa:	1b0c      	subs	r4, r1, r4
    6cfc:	4252      	negs	r2, r2
    6cfe:	1aa4      	subs	r4, r4, r2
    6d00:	4666      	mov	r6, ip
    6d02:	4698      	mov	r8, r3
    6d04:	e68b      	b.n	6a1e <__aeabi_dsub+0xb2>
    6d06:	4664      	mov	r4, ip
    6d08:	4667      	mov	r7, ip
    6d0a:	432c      	orrs	r4, r5
    6d0c:	d000      	beq.n	6d10 <__aeabi_dsub+0x3a4>
    6d0e:	e68b      	b.n	6a28 <__aeabi_dsub+0xbc>
    6d10:	2500      	movs	r5, #0
    6d12:	2600      	movs	r6, #0
    6d14:	2700      	movs	r7, #0
    6d16:	e6ea      	b.n	6aee <__aeabi_dsub+0x182>
    6d18:	001e      	movs	r6, r3
    6d1a:	e6ad      	b.n	6a78 <__aeabi_dsub+0x10c>
    6d1c:	2b1f      	cmp	r3, #31
    6d1e:	dc60      	bgt.n	6de2 <__aeabi_dsub+0x476>
    6d20:	2720      	movs	r7, #32
    6d22:	1af8      	subs	r0, r7, r3
    6d24:	000f      	movs	r7, r1
    6d26:	4684      	mov	ip, r0
    6d28:	4087      	lsls	r7, r0
    6d2a:	0010      	movs	r0, r2
    6d2c:	40d8      	lsrs	r0, r3
    6d2e:	4307      	orrs	r7, r0
    6d30:	4660      	mov	r0, ip
    6d32:	4082      	lsls	r2, r0
    6d34:	1e50      	subs	r0, r2, #1
    6d36:	4182      	sbcs	r2, r0
    6d38:	40d9      	lsrs	r1, r3
    6d3a:	4317      	orrs	r7, r2
    6d3c:	e6f5      	b.n	6b2a <__aeabi_dsub+0x1be>
    6d3e:	0026      	movs	r6, r4
    6d40:	4650      	mov	r0, sl
    6d42:	4306      	orrs	r6, r0
    6d44:	d005      	beq.n	6d52 <__aeabi_dsub+0x3e6>
    6d46:	43ed      	mvns	r5, r5
    6d48:	2d00      	cmp	r5, #0
    6d4a:	d0d3      	beq.n	6cf4 <__aeabi_dsub+0x388>
    6d4c:	4e90      	ldr	r6, [pc, #576]	; (6f90 <__aeabi_dsub+0x624>)
    6d4e:	45b4      	cmp	ip, r6
    6d50:	d1bd      	bne.n	6cce <__aeabi_dsub+0x362>
    6d52:	000c      	movs	r4, r1
    6d54:	0017      	movs	r7, r2
    6d56:	4666      	mov	r6, ip
    6d58:	4698      	mov	r8, r3
    6d5a:	e68d      	b.n	6a78 <__aeabi_dsub+0x10c>
    6d5c:	488c      	ldr	r0, [pc, #560]	; (6f90 <__aeabi_dsub+0x624>)
    6d5e:	4283      	cmp	r3, r0
    6d60:	d00b      	beq.n	6d7a <__aeabi_dsub+0x40e>
    6d62:	4663      	mov	r3, ip
    6d64:	e6d9      	b.n	6b1a <__aeabi_dsub+0x1ae>
    6d66:	2d00      	cmp	r5, #0
    6d68:	d000      	beq.n	6d6c <__aeabi_dsub+0x400>
    6d6a:	e096      	b.n	6e9a <__aeabi_dsub+0x52e>
    6d6c:	0008      	movs	r0, r1
    6d6e:	4310      	orrs	r0, r2
    6d70:	d100      	bne.n	6d74 <__aeabi_dsub+0x408>
    6d72:	e0e2      	b.n	6f3a <__aeabi_dsub+0x5ce>
    6d74:	000c      	movs	r4, r1
    6d76:	0017      	movs	r7, r2
    6d78:	4698      	mov	r8, r3
    6d7a:	4e85      	ldr	r6, [pc, #532]	; (6f90 <__aeabi_dsub+0x624>)
    6d7c:	e67c      	b.n	6a78 <__aeabi_dsub+0x10c>
    6d7e:	2500      	movs	r5, #0
    6d80:	e780      	b.n	6c84 <__aeabi_dsub+0x318>
    6d82:	2100      	movs	r1, #0
    6d84:	e78e      	b.n	6ca4 <__aeabi_dsub+0x338>
    6d86:	0023      	movs	r3, r4
    6d88:	4650      	mov	r0, sl
    6d8a:	4303      	orrs	r3, r0
    6d8c:	2e00      	cmp	r6, #0
    6d8e:	d000      	beq.n	6d92 <__aeabi_dsub+0x426>
    6d90:	e0a8      	b.n	6ee4 <__aeabi_dsub+0x578>
    6d92:	2b00      	cmp	r3, #0
    6d94:	d100      	bne.n	6d98 <__aeabi_dsub+0x42c>
    6d96:	e0de      	b.n	6f56 <__aeabi_dsub+0x5ea>
    6d98:	000b      	movs	r3, r1
    6d9a:	4313      	orrs	r3, r2
    6d9c:	d100      	bne.n	6da0 <__aeabi_dsub+0x434>
    6d9e:	e66b      	b.n	6a78 <__aeabi_dsub+0x10c>
    6da0:	4452      	add	r2, sl
    6da2:	4552      	cmp	r2, sl
    6da4:	4180      	sbcs	r0, r0
    6da6:	1864      	adds	r4, r4, r1
    6da8:	4240      	negs	r0, r0
    6daa:	1824      	adds	r4, r4, r0
    6dac:	0017      	movs	r7, r2
    6dae:	0223      	lsls	r3, r4, #8
    6db0:	d400      	bmi.n	6db4 <__aeabi_dsub+0x448>
    6db2:	e6fd      	b.n	6bb0 <__aeabi_dsub+0x244>
    6db4:	4b77      	ldr	r3, [pc, #476]	; (6f94 <__aeabi_dsub+0x628>)
    6db6:	4666      	mov	r6, ip
    6db8:	401c      	ands	r4, r3
    6dba:	e65d      	b.n	6a78 <__aeabi_dsub+0x10c>
    6dbc:	0025      	movs	r5, r4
    6dbe:	4650      	mov	r0, sl
    6dc0:	4305      	orrs	r5, r0
    6dc2:	2e00      	cmp	r6, #0
    6dc4:	d1cf      	bne.n	6d66 <__aeabi_dsub+0x3fa>
    6dc6:	2d00      	cmp	r5, #0
    6dc8:	d14f      	bne.n	6e6a <__aeabi_dsub+0x4fe>
    6dca:	000c      	movs	r4, r1
    6dcc:	4314      	orrs	r4, r2
    6dce:	d100      	bne.n	6dd2 <__aeabi_dsub+0x466>
    6dd0:	e0a0      	b.n	6f14 <__aeabi_dsub+0x5a8>
    6dd2:	000c      	movs	r4, r1
    6dd4:	0017      	movs	r7, r2
    6dd6:	4698      	mov	r8, r3
    6dd8:	e64e      	b.n	6a78 <__aeabi_dsub+0x10c>
    6dda:	4666      	mov	r6, ip
    6ddc:	2400      	movs	r4, #0
    6dde:	2700      	movs	r7, #0
    6de0:	e685      	b.n	6aee <__aeabi_dsub+0x182>
    6de2:	001f      	movs	r7, r3
    6de4:	0008      	movs	r0, r1
    6de6:	3f20      	subs	r7, #32
    6de8:	40f8      	lsrs	r0, r7
    6dea:	0007      	movs	r7, r0
    6dec:	2b20      	cmp	r3, #32
    6dee:	d100      	bne.n	6df2 <__aeabi_dsub+0x486>
    6df0:	e08e      	b.n	6f10 <__aeabi_dsub+0x5a4>
    6df2:	2040      	movs	r0, #64	; 0x40
    6df4:	1ac3      	subs	r3, r0, r3
    6df6:	4099      	lsls	r1, r3
    6df8:	430a      	orrs	r2, r1
    6dfa:	1e51      	subs	r1, r2, #1
    6dfc:	418a      	sbcs	r2, r1
    6dfe:	2100      	movs	r1, #0
    6e00:	4317      	orrs	r7, r2
    6e02:	e692      	b.n	6b2a <__aeabi_dsub+0x1be>
    6e04:	2e00      	cmp	r6, #0
    6e06:	d114      	bne.n	6e32 <__aeabi_dsub+0x4c6>
    6e08:	0026      	movs	r6, r4
    6e0a:	4650      	mov	r0, sl
    6e0c:	4306      	orrs	r6, r0
    6e0e:	d062      	beq.n	6ed6 <__aeabi_dsub+0x56a>
    6e10:	43db      	mvns	r3, r3
    6e12:	2b00      	cmp	r3, #0
    6e14:	d15c      	bne.n	6ed0 <__aeabi_dsub+0x564>
    6e16:	1887      	adds	r7, r0, r2
    6e18:	4297      	cmp	r7, r2
    6e1a:	4192      	sbcs	r2, r2
    6e1c:	1864      	adds	r4, r4, r1
    6e1e:	4252      	negs	r2, r2
    6e20:	18a4      	adds	r4, r4, r2
    6e22:	4666      	mov	r6, ip
    6e24:	e687      	b.n	6b36 <__aeabi_dsub+0x1ca>
    6e26:	4650      	mov	r0, sl
    6e28:	4320      	orrs	r0, r4
    6e2a:	1e44      	subs	r4, r0, #1
    6e2c:	41a0      	sbcs	r0, r4
    6e2e:	2400      	movs	r4, #0
    6e30:	e760      	b.n	6cf4 <__aeabi_dsub+0x388>
    6e32:	4e57      	ldr	r6, [pc, #348]	; (6f90 <__aeabi_dsub+0x624>)
    6e34:	45b4      	cmp	ip, r6
    6e36:	d04e      	beq.n	6ed6 <__aeabi_dsub+0x56a>
    6e38:	2680      	movs	r6, #128	; 0x80
    6e3a:	0436      	lsls	r6, r6, #16
    6e3c:	425b      	negs	r3, r3
    6e3e:	4334      	orrs	r4, r6
    6e40:	2b38      	cmp	r3, #56	; 0x38
    6e42:	dd00      	ble.n	6e46 <__aeabi_dsub+0x4da>
    6e44:	e07f      	b.n	6f46 <__aeabi_dsub+0x5da>
    6e46:	2b1f      	cmp	r3, #31
    6e48:	dd00      	ble.n	6e4c <__aeabi_dsub+0x4e0>
    6e4a:	e08b      	b.n	6f64 <__aeabi_dsub+0x5f8>
    6e4c:	2620      	movs	r6, #32
    6e4e:	0027      	movs	r7, r4
    6e50:	4650      	mov	r0, sl
    6e52:	1af6      	subs	r6, r6, r3
    6e54:	40b7      	lsls	r7, r6
    6e56:	40d8      	lsrs	r0, r3
    6e58:	4307      	orrs	r7, r0
    6e5a:	4650      	mov	r0, sl
    6e5c:	40b0      	lsls	r0, r6
    6e5e:	1e46      	subs	r6, r0, #1
    6e60:	41b0      	sbcs	r0, r6
    6e62:	4307      	orrs	r7, r0
    6e64:	40dc      	lsrs	r4, r3
    6e66:	18bf      	adds	r7, r7, r2
    6e68:	e7d6      	b.n	6e18 <__aeabi_dsub+0x4ac>
    6e6a:	000d      	movs	r5, r1
    6e6c:	4315      	orrs	r5, r2
    6e6e:	d100      	bne.n	6e72 <__aeabi_dsub+0x506>
    6e70:	e602      	b.n	6a78 <__aeabi_dsub+0x10c>
    6e72:	4650      	mov	r0, sl
    6e74:	1a80      	subs	r0, r0, r2
    6e76:	4582      	cmp	sl, r0
    6e78:	41bf      	sbcs	r7, r7
    6e7a:	1a65      	subs	r5, r4, r1
    6e7c:	427f      	negs	r7, r7
    6e7e:	1bed      	subs	r5, r5, r7
    6e80:	4684      	mov	ip, r0
    6e82:	0228      	lsls	r0, r5, #8
    6e84:	d400      	bmi.n	6e88 <__aeabi_dsub+0x51c>
    6e86:	e68d      	b.n	6ba4 <__aeabi_dsub+0x238>
    6e88:	4650      	mov	r0, sl
    6e8a:	1a17      	subs	r7, r2, r0
    6e8c:	42ba      	cmp	r2, r7
    6e8e:	4192      	sbcs	r2, r2
    6e90:	1b0c      	subs	r4, r1, r4
    6e92:	4252      	negs	r2, r2
    6e94:	1aa4      	subs	r4, r4, r2
    6e96:	4698      	mov	r8, r3
    6e98:	e5ee      	b.n	6a78 <__aeabi_dsub+0x10c>
    6e9a:	000d      	movs	r5, r1
    6e9c:	4315      	orrs	r5, r2
    6e9e:	d100      	bne.n	6ea2 <__aeabi_dsub+0x536>
    6ea0:	e76b      	b.n	6d7a <__aeabi_dsub+0x40e>
    6ea2:	4650      	mov	r0, sl
    6ea4:	0767      	lsls	r7, r4, #29
    6ea6:	08c0      	lsrs	r0, r0, #3
    6ea8:	4307      	orrs	r7, r0
    6eaa:	2080      	movs	r0, #128	; 0x80
    6eac:	08e4      	lsrs	r4, r4, #3
    6eae:	0300      	lsls	r0, r0, #12
    6eb0:	4204      	tst	r4, r0
    6eb2:	d007      	beq.n	6ec4 <__aeabi_dsub+0x558>
    6eb4:	08cd      	lsrs	r5, r1, #3
    6eb6:	4205      	tst	r5, r0
    6eb8:	d104      	bne.n	6ec4 <__aeabi_dsub+0x558>
    6eba:	002c      	movs	r4, r5
    6ebc:	4698      	mov	r8, r3
    6ebe:	08d7      	lsrs	r7, r2, #3
    6ec0:	0749      	lsls	r1, r1, #29
    6ec2:	430f      	orrs	r7, r1
    6ec4:	0f7b      	lsrs	r3, r7, #29
    6ec6:	00e4      	lsls	r4, r4, #3
    6ec8:	431c      	orrs	r4, r3
    6eca:	00ff      	lsls	r7, r7, #3
    6ecc:	4e30      	ldr	r6, [pc, #192]	; (6f90 <__aeabi_dsub+0x624>)
    6ece:	e5d3      	b.n	6a78 <__aeabi_dsub+0x10c>
    6ed0:	4e2f      	ldr	r6, [pc, #188]	; (6f90 <__aeabi_dsub+0x624>)
    6ed2:	45b4      	cmp	ip, r6
    6ed4:	d1b4      	bne.n	6e40 <__aeabi_dsub+0x4d4>
    6ed6:	000c      	movs	r4, r1
    6ed8:	0017      	movs	r7, r2
    6eda:	4666      	mov	r6, ip
    6edc:	e5cc      	b.n	6a78 <__aeabi_dsub+0x10c>
    6ede:	2700      	movs	r7, #0
    6ee0:	2400      	movs	r4, #0
    6ee2:	e5e8      	b.n	6ab6 <__aeabi_dsub+0x14a>
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d039      	beq.n	6f5c <__aeabi_dsub+0x5f0>
    6ee8:	000b      	movs	r3, r1
    6eea:	4313      	orrs	r3, r2
    6eec:	d100      	bne.n	6ef0 <__aeabi_dsub+0x584>
    6eee:	e744      	b.n	6d7a <__aeabi_dsub+0x40e>
    6ef0:	08c0      	lsrs	r0, r0, #3
    6ef2:	0767      	lsls	r7, r4, #29
    6ef4:	4307      	orrs	r7, r0
    6ef6:	2080      	movs	r0, #128	; 0x80
    6ef8:	08e4      	lsrs	r4, r4, #3
    6efa:	0300      	lsls	r0, r0, #12
    6efc:	4204      	tst	r4, r0
    6efe:	d0e1      	beq.n	6ec4 <__aeabi_dsub+0x558>
    6f00:	08cb      	lsrs	r3, r1, #3
    6f02:	4203      	tst	r3, r0
    6f04:	d1de      	bne.n	6ec4 <__aeabi_dsub+0x558>
    6f06:	08d7      	lsrs	r7, r2, #3
    6f08:	0749      	lsls	r1, r1, #29
    6f0a:	430f      	orrs	r7, r1
    6f0c:	001c      	movs	r4, r3
    6f0e:	e7d9      	b.n	6ec4 <__aeabi_dsub+0x558>
    6f10:	2100      	movs	r1, #0
    6f12:	e771      	b.n	6df8 <__aeabi_dsub+0x48c>
    6f14:	2500      	movs	r5, #0
    6f16:	2700      	movs	r7, #0
    6f18:	e5e9      	b.n	6aee <__aeabi_dsub+0x182>
    6f1a:	002e      	movs	r6, r5
    6f1c:	0027      	movs	r7, r4
    6f1e:	3e20      	subs	r6, #32
    6f20:	40f7      	lsrs	r7, r6
    6f22:	2d20      	cmp	r5, #32
    6f24:	d02f      	beq.n	6f86 <__aeabi_dsub+0x61a>
    6f26:	2640      	movs	r6, #64	; 0x40
    6f28:	1b75      	subs	r5, r6, r5
    6f2a:	40ac      	lsls	r4, r5
    6f2c:	4650      	mov	r0, sl
    6f2e:	4320      	orrs	r0, r4
    6f30:	1e44      	subs	r4, r0, #1
    6f32:	41a0      	sbcs	r0, r4
    6f34:	2400      	movs	r4, #0
    6f36:	4338      	orrs	r0, r7
    6f38:	e6dc      	b.n	6cf4 <__aeabi_dsub+0x388>
    6f3a:	2480      	movs	r4, #128	; 0x80
    6f3c:	2500      	movs	r5, #0
    6f3e:	0324      	lsls	r4, r4, #12
    6f40:	4e13      	ldr	r6, [pc, #76]	; (6f90 <__aeabi_dsub+0x624>)
    6f42:	2700      	movs	r7, #0
    6f44:	e5d3      	b.n	6aee <__aeabi_dsub+0x182>
    6f46:	4650      	mov	r0, sl
    6f48:	4320      	orrs	r0, r4
    6f4a:	0007      	movs	r7, r0
    6f4c:	1e78      	subs	r0, r7, #1
    6f4e:	4187      	sbcs	r7, r0
    6f50:	2400      	movs	r4, #0
    6f52:	18bf      	adds	r7, r7, r2
    6f54:	e760      	b.n	6e18 <__aeabi_dsub+0x4ac>
    6f56:	000c      	movs	r4, r1
    6f58:	0017      	movs	r7, r2
    6f5a:	e58d      	b.n	6a78 <__aeabi_dsub+0x10c>
    6f5c:	000c      	movs	r4, r1
    6f5e:	0017      	movs	r7, r2
    6f60:	4e0b      	ldr	r6, [pc, #44]	; (6f90 <__aeabi_dsub+0x624>)
    6f62:	e589      	b.n	6a78 <__aeabi_dsub+0x10c>
    6f64:	001e      	movs	r6, r3
    6f66:	0027      	movs	r7, r4
    6f68:	3e20      	subs	r6, #32
    6f6a:	40f7      	lsrs	r7, r6
    6f6c:	2b20      	cmp	r3, #32
    6f6e:	d00c      	beq.n	6f8a <__aeabi_dsub+0x61e>
    6f70:	2640      	movs	r6, #64	; 0x40
    6f72:	1af3      	subs	r3, r6, r3
    6f74:	409c      	lsls	r4, r3
    6f76:	4650      	mov	r0, sl
    6f78:	4320      	orrs	r0, r4
    6f7a:	1e44      	subs	r4, r0, #1
    6f7c:	41a0      	sbcs	r0, r4
    6f7e:	4307      	orrs	r7, r0
    6f80:	2400      	movs	r4, #0
    6f82:	18bf      	adds	r7, r7, r2
    6f84:	e748      	b.n	6e18 <__aeabi_dsub+0x4ac>
    6f86:	2400      	movs	r4, #0
    6f88:	e7d0      	b.n	6f2c <__aeabi_dsub+0x5c0>
    6f8a:	2400      	movs	r4, #0
    6f8c:	e7f3      	b.n	6f76 <__aeabi_dsub+0x60a>
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	000007ff 	.word	0x000007ff
    6f94:	ff7fffff 	.word	0xff7fffff

00006f98 <__aeabi_d2iz>:
    6f98:	b530      	push	{r4, r5, lr}
    6f9a:	4d13      	ldr	r5, [pc, #76]	; (6fe8 <__aeabi_d2iz+0x50>)
    6f9c:	030a      	lsls	r2, r1, #12
    6f9e:	004b      	lsls	r3, r1, #1
    6fa0:	0b12      	lsrs	r2, r2, #12
    6fa2:	0d5b      	lsrs	r3, r3, #21
    6fa4:	0fc9      	lsrs	r1, r1, #31
    6fa6:	2400      	movs	r4, #0
    6fa8:	42ab      	cmp	r3, r5
    6faa:	dd10      	ble.n	6fce <__aeabi_d2iz+0x36>
    6fac:	4c0f      	ldr	r4, [pc, #60]	; (6fec <__aeabi_d2iz+0x54>)
    6fae:	42a3      	cmp	r3, r4
    6fb0:	dc0f      	bgt.n	6fd2 <__aeabi_d2iz+0x3a>
    6fb2:	2480      	movs	r4, #128	; 0x80
    6fb4:	4d0e      	ldr	r5, [pc, #56]	; (6ff0 <__aeabi_d2iz+0x58>)
    6fb6:	0364      	lsls	r4, r4, #13
    6fb8:	4322      	orrs	r2, r4
    6fba:	1aed      	subs	r5, r5, r3
    6fbc:	2d1f      	cmp	r5, #31
    6fbe:	dd0b      	ble.n	6fd8 <__aeabi_d2iz+0x40>
    6fc0:	480c      	ldr	r0, [pc, #48]	; (6ff4 <__aeabi_d2iz+0x5c>)
    6fc2:	1ac3      	subs	r3, r0, r3
    6fc4:	40da      	lsrs	r2, r3
    6fc6:	4254      	negs	r4, r2
    6fc8:	2900      	cmp	r1, #0
    6fca:	d100      	bne.n	6fce <__aeabi_d2iz+0x36>
    6fcc:	0014      	movs	r4, r2
    6fce:	0020      	movs	r0, r4
    6fd0:	bd30      	pop	{r4, r5, pc}
    6fd2:	4b09      	ldr	r3, [pc, #36]	; (6ff8 <__aeabi_d2iz+0x60>)
    6fd4:	18cc      	adds	r4, r1, r3
    6fd6:	e7fa      	b.n	6fce <__aeabi_d2iz+0x36>
    6fd8:	4c08      	ldr	r4, [pc, #32]	; (6ffc <__aeabi_d2iz+0x64>)
    6fda:	40e8      	lsrs	r0, r5
    6fdc:	46a4      	mov	ip, r4
    6fde:	4463      	add	r3, ip
    6fe0:	409a      	lsls	r2, r3
    6fe2:	4302      	orrs	r2, r0
    6fe4:	e7ef      	b.n	6fc6 <__aeabi_d2iz+0x2e>
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	000003fe 	.word	0x000003fe
    6fec:	0000041d 	.word	0x0000041d
    6ff0:	00000433 	.word	0x00000433
    6ff4:	00000413 	.word	0x00000413
    6ff8:	7fffffff 	.word	0x7fffffff
    6ffc:	fffffbed 	.word	0xfffffbed

00007000 <__aeabi_ui2d>:
    7000:	b510      	push	{r4, lr}
    7002:	1e04      	subs	r4, r0, #0
    7004:	d028      	beq.n	7058 <__aeabi_ui2d+0x58>
    7006:	f7fe fb1b 	bl	5640 <__clzsi2>
    700a:	4b15      	ldr	r3, [pc, #84]	; (7060 <__aeabi_ui2d+0x60>)
    700c:	4a15      	ldr	r2, [pc, #84]	; (7064 <__aeabi_ui2d+0x64>)
    700e:	1a1b      	subs	r3, r3, r0
    7010:	1ad2      	subs	r2, r2, r3
    7012:	2a1f      	cmp	r2, #31
    7014:	dd15      	ble.n	7042 <__aeabi_ui2d+0x42>
    7016:	4a14      	ldr	r2, [pc, #80]	; (7068 <__aeabi_ui2d+0x68>)
    7018:	1ad2      	subs	r2, r2, r3
    701a:	4094      	lsls	r4, r2
    701c:	2200      	movs	r2, #0
    701e:	0324      	lsls	r4, r4, #12
    7020:	055b      	lsls	r3, r3, #21
    7022:	0b24      	lsrs	r4, r4, #12
    7024:	0d5b      	lsrs	r3, r3, #21
    7026:	2100      	movs	r1, #0
    7028:	0010      	movs	r0, r2
    702a:	0324      	lsls	r4, r4, #12
    702c:	0d0a      	lsrs	r2, r1, #20
    702e:	0b24      	lsrs	r4, r4, #12
    7030:	0512      	lsls	r2, r2, #20
    7032:	4322      	orrs	r2, r4
    7034:	4c0d      	ldr	r4, [pc, #52]	; (706c <__aeabi_ui2d+0x6c>)
    7036:	051b      	lsls	r3, r3, #20
    7038:	4022      	ands	r2, r4
    703a:	4313      	orrs	r3, r2
    703c:	005b      	lsls	r3, r3, #1
    703e:	0859      	lsrs	r1, r3, #1
    7040:	bd10      	pop	{r4, pc}
    7042:	0021      	movs	r1, r4
    7044:	4091      	lsls	r1, r2
    7046:	000a      	movs	r2, r1
    7048:	210b      	movs	r1, #11
    704a:	1a08      	subs	r0, r1, r0
    704c:	40c4      	lsrs	r4, r0
    704e:	055b      	lsls	r3, r3, #21
    7050:	0324      	lsls	r4, r4, #12
    7052:	0b24      	lsrs	r4, r4, #12
    7054:	0d5b      	lsrs	r3, r3, #21
    7056:	e7e6      	b.n	7026 <__aeabi_ui2d+0x26>
    7058:	2300      	movs	r3, #0
    705a:	2400      	movs	r4, #0
    705c:	2200      	movs	r2, #0
    705e:	e7e2      	b.n	7026 <__aeabi_ui2d+0x26>
    7060:	0000041e 	.word	0x0000041e
    7064:	00000433 	.word	0x00000433
    7068:	00000413 	.word	0x00000413
    706c:	800fffff 	.word	0x800fffff

00007070 <__aeabi_f2d>:
    7070:	0041      	lsls	r1, r0, #1
    7072:	0e09      	lsrs	r1, r1, #24
    7074:	1c4b      	adds	r3, r1, #1
    7076:	b570      	push	{r4, r5, r6, lr}
    7078:	b2db      	uxtb	r3, r3
    707a:	0246      	lsls	r6, r0, #9
    707c:	0a75      	lsrs	r5, r6, #9
    707e:	0fc4      	lsrs	r4, r0, #31
    7080:	2b01      	cmp	r3, #1
    7082:	dd14      	ble.n	70ae <__aeabi_f2d+0x3e>
    7084:	23e0      	movs	r3, #224	; 0xe0
    7086:	009b      	lsls	r3, r3, #2
    7088:	076d      	lsls	r5, r5, #29
    708a:	0b36      	lsrs	r6, r6, #12
    708c:	18cb      	adds	r3, r1, r3
    708e:	2100      	movs	r1, #0
    7090:	0d0a      	lsrs	r2, r1, #20
    7092:	0028      	movs	r0, r5
    7094:	0512      	lsls	r2, r2, #20
    7096:	4d1c      	ldr	r5, [pc, #112]	; (7108 <__aeabi_f2d+0x98>)
    7098:	4332      	orrs	r2, r6
    709a:	055b      	lsls	r3, r3, #21
    709c:	402a      	ands	r2, r5
    709e:	085b      	lsrs	r3, r3, #1
    70a0:	4313      	orrs	r3, r2
    70a2:	005b      	lsls	r3, r3, #1
    70a4:	07e4      	lsls	r4, r4, #31
    70a6:	085b      	lsrs	r3, r3, #1
    70a8:	4323      	orrs	r3, r4
    70aa:	0019      	movs	r1, r3
    70ac:	bd70      	pop	{r4, r5, r6, pc}
    70ae:	2900      	cmp	r1, #0
    70b0:	d114      	bne.n	70dc <__aeabi_f2d+0x6c>
    70b2:	2d00      	cmp	r5, #0
    70b4:	d01e      	beq.n	70f4 <__aeabi_f2d+0x84>
    70b6:	0028      	movs	r0, r5
    70b8:	f7fe fac2 	bl	5640 <__clzsi2>
    70bc:	280a      	cmp	r0, #10
    70be:	dc1c      	bgt.n	70fa <__aeabi_f2d+0x8a>
    70c0:	230b      	movs	r3, #11
    70c2:	002a      	movs	r2, r5
    70c4:	1a1b      	subs	r3, r3, r0
    70c6:	40da      	lsrs	r2, r3
    70c8:	0003      	movs	r3, r0
    70ca:	3315      	adds	r3, #21
    70cc:	409d      	lsls	r5, r3
    70ce:	4b0f      	ldr	r3, [pc, #60]	; (710c <__aeabi_f2d+0x9c>)
    70d0:	0312      	lsls	r2, r2, #12
    70d2:	1a1b      	subs	r3, r3, r0
    70d4:	055b      	lsls	r3, r3, #21
    70d6:	0b16      	lsrs	r6, r2, #12
    70d8:	0d5b      	lsrs	r3, r3, #21
    70da:	e7d8      	b.n	708e <__aeabi_f2d+0x1e>
    70dc:	2d00      	cmp	r5, #0
    70de:	d006      	beq.n	70ee <__aeabi_f2d+0x7e>
    70e0:	0b32      	lsrs	r2, r6, #12
    70e2:	2680      	movs	r6, #128	; 0x80
    70e4:	0336      	lsls	r6, r6, #12
    70e6:	076d      	lsls	r5, r5, #29
    70e8:	4316      	orrs	r6, r2
    70ea:	4b09      	ldr	r3, [pc, #36]	; (7110 <__aeabi_f2d+0xa0>)
    70ec:	e7cf      	b.n	708e <__aeabi_f2d+0x1e>
    70ee:	4b08      	ldr	r3, [pc, #32]	; (7110 <__aeabi_f2d+0xa0>)
    70f0:	2600      	movs	r6, #0
    70f2:	e7cc      	b.n	708e <__aeabi_f2d+0x1e>
    70f4:	2300      	movs	r3, #0
    70f6:	2600      	movs	r6, #0
    70f8:	e7c9      	b.n	708e <__aeabi_f2d+0x1e>
    70fa:	0003      	movs	r3, r0
    70fc:	002a      	movs	r2, r5
    70fe:	3b0b      	subs	r3, #11
    7100:	409a      	lsls	r2, r3
    7102:	2500      	movs	r5, #0
    7104:	e7e3      	b.n	70ce <__aeabi_f2d+0x5e>
    7106:	46c0      	nop			; (mov r8, r8)
    7108:	800fffff 	.word	0x800fffff
    710c:	00000389 	.word	0x00000389
    7110:	000007ff 	.word	0x000007ff

00007114 <__aeabi_d2f>:
    7114:	b5f0      	push	{r4, r5, r6, r7, lr}
    7116:	004c      	lsls	r4, r1, #1
    7118:	0d64      	lsrs	r4, r4, #21
    711a:	030b      	lsls	r3, r1, #12
    711c:	1c62      	adds	r2, r4, #1
    711e:	0f45      	lsrs	r5, r0, #29
    7120:	0a5b      	lsrs	r3, r3, #9
    7122:	0552      	lsls	r2, r2, #21
    7124:	432b      	orrs	r3, r5
    7126:	0fc9      	lsrs	r1, r1, #31
    7128:	00c5      	lsls	r5, r0, #3
    712a:	0d52      	lsrs	r2, r2, #21
    712c:	2a01      	cmp	r2, #1
    712e:	dd28      	ble.n	7182 <__aeabi_d2f+0x6e>
    7130:	4a3a      	ldr	r2, [pc, #232]	; (721c <__aeabi_d2f+0x108>)
    7132:	18a6      	adds	r6, r4, r2
    7134:	2efe      	cmp	r6, #254	; 0xfe
    7136:	dc1b      	bgt.n	7170 <__aeabi_d2f+0x5c>
    7138:	2e00      	cmp	r6, #0
    713a:	dd3e      	ble.n	71ba <__aeabi_d2f+0xa6>
    713c:	0180      	lsls	r0, r0, #6
    713e:	0002      	movs	r2, r0
    7140:	1e50      	subs	r0, r2, #1
    7142:	4182      	sbcs	r2, r0
    7144:	0f6d      	lsrs	r5, r5, #29
    7146:	432a      	orrs	r2, r5
    7148:	00db      	lsls	r3, r3, #3
    714a:	4313      	orrs	r3, r2
    714c:	075a      	lsls	r2, r3, #29
    714e:	d004      	beq.n	715a <__aeabi_d2f+0x46>
    7150:	220f      	movs	r2, #15
    7152:	401a      	ands	r2, r3
    7154:	2a04      	cmp	r2, #4
    7156:	d000      	beq.n	715a <__aeabi_d2f+0x46>
    7158:	3304      	adds	r3, #4
    715a:	2280      	movs	r2, #128	; 0x80
    715c:	04d2      	lsls	r2, r2, #19
    715e:	401a      	ands	r2, r3
    7160:	d05a      	beq.n	7218 <__aeabi_d2f+0x104>
    7162:	3601      	adds	r6, #1
    7164:	2eff      	cmp	r6, #255	; 0xff
    7166:	d003      	beq.n	7170 <__aeabi_d2f+0x5c>
    7168:	019b      	lsls	r3, r3, #6
    716a:	0a5b      	lsrs	r3, r3, #9
    716c:	b2f4      	uxtb	r4, r6
    716e:	e001      	b.n	7174 <__aeabi_d2f+0x60>
    7170:	24ff      	movs	r4, #255	; 0xff
    7172:	2300      	movs	r3, #0
    7174:	0258      	lsls	r0, r3, #9
    7176:	05e4      	lsls	r4, r4, #23
    7178:	0a40      	lsrs	r0, r0, #9
    717a:	07c9      	lsls	r1, r1, #31
    717c:	4320      	orrs	r0, r4
    717e:	4308      	orrs	r0, r1
    7180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7182:	2c00      	cmp	r4, #0
    7184:	d007      	beq.n	7196 <__aeabi_d2f+0x82>
    7186:	431d      	orrs	r5, r3
    7188:	d0f2      	beq.n	7170 <__aeabi_d2f+0x5c>
    718a:	2080      	movs	r0, #128	; 0x80
    718c:	00db      	lsls	r3, r3, #3
    718e:	0480      	lsls	r0, r0, #18
    7190:	4303      	orrs	r3, r0
    7192:	26ff      	movs	r6, #255	; 0xff
    7194:	e7da      	b.n	714c <__aeabi_d2f+0x38>
    7196:	432b      	orrs	r3, r5
    7198:	d003      	beq.n	71a2 <__aeabi_d2f+0x8e>
    719a:	2305      	movs	r3, #5
    719c:	08db      	lsrs	r3, r3, #3
    719e:	2cff      	cmp	r4, #255	; 0xff
    71a0:	d003      	beq.n	71aa <__aeabi_d2f+0x96>
    71a2:	025b      	lsls	r3, r3, #9
    71a4:	0a5b      	lsrs	r3, r3, #9
    71a6:	b2e4      	uxtb	r4, r4
    71a8:	e7e4      	b.n	7174 <__aeabi_d2f+0x60>
    71aa:	2b00      	cmp	r3, #0
    71ac:	d032      	beq.n	7214 <__aeabi_d2f+0x100>
    71ae:	2080      	movs	r0, #128	; 0x80
    71b0:	03c0      	lsls	r0, r0, #15
    71b2:	4303      	orrs	r3, r0
    71b4:	025b      	lsls	r3, r3, #9
    71b6:	0a5b      	lsrs	r3, r3, #9
    71b8:	e7dc      	b.n	7174 <__aeabi_d2f+0x60>
    71ba:	0032      	movs	r2, r6
    71bc:	3217      	adds	r2, #23
    71be:	db14      	blt.n	71ea <__aeabi_d2f+0xd6>
    71c0:	2280      	movs	r2, #128	; 0x80
    71c2:	271e      	movs	r7, #30
    71c4:	0412      	lsls	r2, r2, #16
    71c6:	4313      	orrs	r3, r2
    71c8:	1bbf      	subs	r7, r7, r6
    71ca:	2f1f      	cmp	r7, #31
    71cc:	dc0f      	bgt.n	71ee <__aeabi_d2f+0xda>
    71ce:	4a14      	ldr	r2, [pc, #80]	; (7220 <__aeabi_d2f+0x10c>)
    71d0:	4694      	mov	ip, r2
    71d2:	4464      	add	r4, ip
    71d4:	002a      	movs	r2, r5
    71d6:	40a5      	lsls	r5, r4
    71d8:	002e      	movs	r6, r5
    71da:	40a3      	lsls	r3, r4
    71dc:	1e75      	subs	r5, r6, #1
    71de:	41ae      	sbcs	r6, r5
    71e0:	40fa      	lsrs	r2, r7
    71e2:	4333      	orrs	r3, r6
    71e4:	4313      	orrs	r3, r2
    71e6:	2600      	movs	r6, #0
    71e8:	e7b0      	b.n	714c <__aeabi_d2f+0x38>
    71ea:	2400      	movs	r4, #0
    71ec:	e7d5      	b.n	719a <__aeabi_d2f+0x86>
    71ee:	2202      	movs	r2, #2
    71f0:	4252      	negs	r2, r2
    71f2:	1b96      	subs	r6, r2, r6
    71f4:	001a      	movs	r2, r3
    71f6:	40f2      	lsrs	r2, r6
    71f8:	2f20      	cmp	r7, #32
    71fa:	d009      	beq.n	7210 <__aeabi_d2f+0xfc>
    71fc:	4809      	ldr	r0, [pc, #36]	; (7224 <__aeabi_d2f+0x110>)
    71fe:	4684      	mov	ip, r0
    7200:	4464      	add	r4, ip
    7202:	40a3      	lsls	r3, r4
    7204:	432b      	orrs	r3, r5
    7206:	1e5d      	subs	r5, r3, #1
    7208:	41ab      	sbcs	r3, r5
    720a:	2600      	movs	r6, #0
    720c:	4313      	orrs	r3, r2
    720e:	e79d      	b.n	714c <__aeabi_d2f+0x38>
    7210:	2300      	movs	r3, #0
    7212:	e7f7      	b.n	7204 <__aeabi_d2f+0xf0>
    7214:	2300      	movs	r3, #0
    7216:	e7ad      	b.n	7174 <__aeabi_d2f+0x60>
    7218:	0034      	movs	r4, r6
    721a:	e7bf      	b.n	719c <__aeabi_d2f+0x88>
    721c:	fffffc80 	.word	0xfffffc80
    7220:	fffffc82 	.word	0xfffffc82
    7224:	fffffca2 	.word	0xfffffca2

00007228 <atof>:
    7228:	b510      	push	{r4, lr}
    722a:	2100      	movs	r1, #0
    722c:	f000 ff78 	bl	8120 <strtod>
    7230:	bd10      	pop	{r4, pc}

00007232 <atoi>:
    7232:	b510      	push	{r4, lr}
    7234:	220a      	movs	r2, #10
    7236:	2100      	movs	r1, #0
    7238:	f001 f860 	bl	82fc <strtol>
    723c:	bd10      	pop	{r4, pc}
	...

00007240 <__libc_init_array>:
    7240:	b570      	push	{r4, r5, r6, lr}
    7242:	2600      	movs	r6, #0
    7244:	4d0c      	ldr	r5, [pc, #48]	; (7278 <__libc_init_array+0x38>)
    7246:	4c0d      	ldr	r4, [pc, #52]	; (727c <__libc_init_array+0x3c>)
    7248:	1b64      	subs	r4, r4, r5
    724a:	10a4      	asrs	r4, r4, #2
    724c:	42a6      	cmp	r6, r4
    724e:	d109      	bne.n	7264 <__libc_init_array+0x24>
    7250:	2600      	movs	r6, #0
    7252:	f003 fce5 	bl	ac20 <_init>
    7256:	4d0a      	ldr	r5, [pc, #40]	; (7280 <__libc_init_array+0x40>)
    7258:	4c0a      	ldr	r4, [pc, #40]	; (7284 <__libc_init_array+0x44>)
    725a:	1b64      	subs	r4, r4, r5
    725c:	10a4      	asrs	r4, r4, #2
    725e:	42a6      	cmp	r6, r4
    7260:	d105      	bne.n	726e <__libc_init_array+0x2e>
    7262:	bd70      	pop	{r4, r5, r6, pc}
    7264:	00b3      	lsls	r3, r6, #2
    7266:	58eb      	ldr	r3, [r5, r3]
    7268:	4798      	blx	r3
    726a:	3601      	adds	r6, #1
    726c:	e7ee      	b.n	724c <__libc_init_array+0xc>
    726e:	00b3      	lsls	r3, r6, #2
    7270:	58eb      	ldr	r3, [r5, r3]
    7272:	4798      	blx	r3
    7274:	3601      	adds	r6, #1
    7276:	e7f2      	b.n	725e <__libc_init_array+0x1e>
    7278:	0000ac2c 	.word	0x0000ac2c
    727c:	0000ac2c 	.word	0x0000ac2c
    7280:	0000ac2c 	.word	0x0000ac2c
    7284:	0000ac30 	.word	0x0000ac30

00007288 <malloc>:
    7288:	b510      	push	{r4, lr}
    728a:	4b03      	ldr	r3, [pc, #12]	; (7298 <malloc+0x10>)
    728c:	0001      	movs	r1, r0
    728e:	6818      	ldr	r0, [r3, #0]
    7290:	f000 f86a 	bl	7368 <_malloc_r>
    7294:	bd10      	pop	{r4, pc}
    7296:	46c0      	nop			; (mov r8, r8)
    7298:	200000d8 	.word	0x200000d8

0000729c <free>:
    729c:	b510      	push	{r4, lr}
    729e:	4b03      	ldr	r3, [pc, #12]	; (72ac <free+0x10>)
    72a0:	0001      	movs	r1, r0
    72a2:	6818      	ldr	r0, [r3, #0]
    72a4:	f000 f816 	bl	72d4 <_free_r>
    72a8:	bd10      	pop	{r4, pc}
    72aa:	46c0      	nop			; (mov r8, r8)
    72ac:	200000d8 	.word	0x200000d8

000072b0 <memcpy>:
    72b0:	2300      	movs	r3, #0
    72b2:	b510      	push	{r4, lr}
    72b4:	429a      	cmp	r2, r3
    72b6:	d100      	bne.n	72ba <memcpy+0xa>
    72b8:	bd10      	pop	{r4, pc}
    72ba:	5ccc      	ldrb	r4, [r1, r3]
    72bc:	54c4      	strb	r4, [r0, r3]
    72be:	3301      	adds	r3, #1
    72c0:	e7f8      	b.n	72b4 <memcpy+0x4>

000072c2 <memset>:
    72c2:	0003      	movs	r3, r0
    72c4:	1882      	adds	r2, r0, r2
    72c6:	4293      	cmp	r3, r2
    72c8:	d100      	bne.n	72cc <memset+0xa>
    72ca:	4770      	bx	lr
    72cc:	7019      	strb	r1, [r3, #0]
    72ce:	3301      	adds	r3, #1
    72d0:	e7f9      	b.n	72c6 <memset+0x4>
	...

000072d4 <_free_r>:
    72d4:	b570      	push	{r4, r5, r6, lr}
    72d6:	0005      	movs	r5, r0
    72d8:	2900      	cmp	r1, #0
    72da:	d010      	beq.n	72fe <_free_r+0x2a>
    72dc:	1f0c      	subs	r4, r1, #4
    72de:	6823      	ldr	r3, [r4, #0]
    72e0:	2b00      	cmp	r3, #0
    72e2:	da00      	bge.n	72e6 <_free_r+0x12>
    72e4:	18e4      	adds	r4, r4, r3
    72e6:	0028      	movs	r0, r5
    72e8:	f001 fbfa 	bl	8ae0 <__malloc_lock>
    72ec:	4a1d      	ldr	r2, [pc, #116]	; (7364 <_free_r+0x90>)
    72ee:	6813      	ldr	r3, [r2, #0]
    72f0:	2b00      	cmp	r3, #0
    72f2:	d105      	bne.n	7300 <_free_r+0x2c>
    72f4:	6063      	str	r3, [r4, #4]
    72f6:	6014      	str	r4, [r2, #0]
    72f8:	0028      	movs	r0, r5
    72fa:	f001 fbf2 	bl	8ae2 <__malloc_unlock>
    72fe:	bd70      	pop	{r4, r5, r6, pc}
    7300:	42a3      	cmp	r3, r4
    7302:	d909      	bls.n	7318 <_free_r+0x44>
    7304:	6821      	ldr	r1, [r4, #0]
    7306:	1860      	adds	r0, r4, r1
    7308:	4283      	cmp	r3, r0
    730a:	d1f3      	bne.n	72f4 <_free_r+0x20>
    730c:	6818      	ldr	r0, [r3, #0]
    730e:	685b      	ldr	r3, [r3, #4]
    7310:	1841      	adds	r1, r0, r1
    7312:	6021      	str	r1, [r4, #0]
    7314:	e7ee      	b.n	72f4 <_free_r+0x20>
    7316:	0013      	movs	r3, r2
    7318:	685a      	ldr	r2, [r3, #4]
    731a:	2a00      	cmp	r2, #0
    731c:	d001      	beq.n	7322 <_free_r+0x4e>
    731e:	42a2      	cmp	r2, r4
    7320:	d9f9      	bls.n	7316 <_free_r+0x42>
    7322:	6819      	ldr	r1, [r3, #0]
    7324:	1858      	adds	r0, r3, r1
    7326:	42a0      	cmp	r0, r4
    7328:	d10b      	bne.n	7342 <_free_r+0x6e>
    732a:	6820      	ldr	r0, [r4, #0]
    732c:	1809      	adds	r1, r1, r0
    732e:	1858      	adds	r0, r3, r1
    7330:	6019      	str	r1, [r3, #0]
    7332:	4282      	cmp	r2, r0
    7334:	d1e0      	bne.n	72f8 <_free_r+0x24>
    7336:	6810      	ldr	r0, [r2, #0]
    7338:	6852      	ldr	r2, [r2, #4]
    733a:	1841      	adds	r1, r0, r1
    733c:	6019      	str	r1, [r3, #0]
    733e:	605a      	str	r2, [r3, #4]
    7340:	e7da      	b.n	72f8 <_free_r+0x24>
    7342:	42a0      	cmp	r0, r4
    7344:	d902      	bls.n	734c <_free_r+0x78>
    7346:	230c      	movs	r3, #12
    7348:	602b      	str	r3, [r5, #0]
    734a:	e7d5      	b.n	72f8 <_free_r+0x24>
    734c:	6821      	ldr	r1, [r4, #0]
    734e:	1860      	adds	r0, r4, r1
    7350:	4282      	cmp	r2, r0
    7352:	d103      	bne.n	735c <_free_r+0x88>
    7354:	6810      	ldr	r0, [r2, #0]
    7356:	6852      	ldr	r2, [r2, #4]
    7358:	1841      	adds	r1, r0, r1
    735a:	6021      	str	r1, [r4, #0]
    735c:	6062      	str	r2, [r4, #4]
    735e:	605c      	str	r4, [r3, #4]
    7360:	e7ca      	b.n	72f8 <_free_r+0x24>
    7362:	46c0      	nop			; (mov r8, r8)
    7364:	20002bd8 	.word	0x20002bd8

00007368 <_malloc_r>:
    7368:	2303      	movs	r3, #3
    736a:	b570      	push	{r4, r5, r6, lr}
    736c:	1ccd      	adds	r5, r1, #3
    736e:	439d      	bics	r5, r3
    7370:	3508      	adds	r5, #8
    7372:	0006      	movs	r6, r0
    7374:	2d0c      	cmp	r5, #12
    7376:	d21e      	bcs.n	73b6 <_malloc_r+0x4e>
    7378:	250c      	movs	r5, #12
    737a:	42a9      	cmp	r1, r5
    737c:	d81d      	bhi.n	73ba <_malloc_r+0x52>
    737e:	0030      	movs	r0, r6
    7380:	f001 fbae 	bl	8ae0 <__malloc_lock>
    7384:	4a25      	ldr	r2, [pc, #148]	; (741c <_malloc_r+0xb4>)
    7386:	6814      	ldr	r4, [r2, #0]
    7388:	0021      	movs	r1, r4
    738a:	2900      	cmp	r1, #0
    738c:	d119      	bne.n	73c2 <_malloc_r+0x5a>
    738e:	4c24      	ldr	r4, [pc, #144]	; (7420 <_malloc_r+0xb8>)
    7390:	6823      	ldr	r3, [r4, #0]
    7392:	2b00      	cmp	r3, #0
    7394:	d103      	bne.n	739e <_malloc_r+0x36>
    7396:	0030      	movs	r0, r6
    7398:	f000 f844 	bl	7424 <_sbrk_r>
    739c:	6020      	str	r0, [r4, #0]
    739e:	0029      	movs	r1, r5
    73a0:	0030      	movs	r0, r6
    73a2:	f000 f83f 	bl	7424 <_sbrk_r>
    73a6:	1c43      	adds	r3, r0, #1
    73a8:	d12c      	bne.n	7404 <_malloc_r+0x9c>
    73aa:	230c      	movs	r3, #12
    73ac:	0030      	movs	r0, r6
    73ae:	6033      	str	r3, [r6, #0]
    73b0:	f001 fb97 	bl	8ae2 <__malloc_unlock>
    73b4:	e003      	b.n	73be <_malloc_r+0x56>
    73b6:	2d00      	cmp	r5, #0
    73b8:	dadf      	bge.n	737a <_malloc_r+0x12>
    73ba:	230c      	movs	r3, #12
    73bc:	6033      	str	r3, [r6, #0]
    73be:	2000      	movs	r0, #0
    73c0:	bd70      	pop	{r4, r5, r6, pc}
    73c2:	680b      	ldr	r3, [r1, #0]
    73c4:	1b5b      	subs	r3, r3, r5
    73c6:	d41a      	bmi.n	73fe <_malloc_r+0x96>
    73c8:	2b0b      	cmp	r3, #11
    73ca:	d903      	bls.n	73d4 <_malloc_r+0x6c>
    73cc:	600b      	str	r3, [r1, #0]
    73ce:	18cc      	adds	r4, r1, r3
    73d0:	6025      	str	r5, [r4, #0]
    73d2:	e003      	b.n	73dc <_malloc_r+0x74>
    73d4:	428c      	cmp	r4, r1
    73d6:	d10e      	bne.n	73f6 <_malloc_r+0x8e>
    73d8:	6863      	ldr	r3, [r4, #4]
    73da:	6013      	str	r3, [r2, #0]
    73dc:	0030      	movs	r0, r6
    73de:	f001 fb80 	bl	8ae2 <__malloc_unlock>
    73e2:	0020      	movs	r0, r4
    73e4:	2207      	movs	r2, #7
    73e6:	300b      	adds	r0, #11
    73e8:	1d23      	adds	r3, r4, #4
    73ea:	4390      	bics	r0, r2
    73ec:	1ac3      	subs	r3, r0, r3
    73ee:	d0e7      	beq.n	73c0 <_malloc_r+0x58>
    73f0:	425a      	negs	r2, r3
    73f2:	50e2      	str	r2, [r4, r3]
    73f4:	e7e4      	b.n	73c0 <_malloc_r+0x58>
    73f6:	684b      	ldr	r3, [r1, #4]
    73f8:	6063      	str	r3, [r4, #4]
    73fa:	000c      	movs	r4, r1
    73fc:	e7ee      	b.n	73dc <_malloc_r+0x74>
    73fe:	000c      	movs	r4, r1
    7400:	6849      	ldr	r1, [r1, #4]
    7402:	e7c2      	b.n	738a <_malloc_r+0x22>
    7404:	2303      	movs	r3, #3
    7406:	1cc4      	adds	r4, r0, #3
    7408:	439c      	bics	r4, r3
    740a:	42a0      	cmp	r0, r4
    740c:	d0e0      	beq.n	73d0 <_malloc_r+0x68>
    740e:	1a21      	subs	r1, r4, r0
    7410:	0030      	movs	r0, r6
    7412:	f000 f807 	bl	7424 <_sbrk_r>
    7416:	1c43      	adds	r3, r0, #1
    7418:	d1da      	bne.n	73d0 <_malloc_r+0x68>
    741a:	e7c6      	b.n	73aa <_malloc_r+0x42>
    741c:	20002bd8 	.word	0x20002bd8
    7420:	20002bdc 	.word	0x20002bdc

00007424 <_sbrk_r>:
    7424:	2300      	movs	r3, #0
    7426:	b570      	push	{r4, r5, r6, lr}
    7428:	4c06      	ldr	r4, [pc, #24]	; (7444 <_sbrk_r+0x20>)
    742a:	0005      	movs	r5, r0
    742c:	0008      	movs	r0, r1
    742e:	6023      	str	r3, [r4, #0]
    7430:	f7fd fb7c 	bl	4b2c <_sbrk>
    7434:	1c43      	adds	r3, r0, #1
    7436:	d103      	bne.n	7440 <_sbrk_r+0x1c>
    7438:	6823      	ldr	r3, [r4, #0]
    743a:	2b00      	cmp	r3, #0
    743c:	d000      	beq.n	7440 <_sbrk_r+0x1c>
    743e:	602b      	str	r3, [r5, #0]
    7440:	bd70      	pop	{r4, r5, r6, pc}
    7442:	46c0      	nop			; (mov r8, r8)
    7444:	200057e8 	.word	0x200057e8

00007448 <sniprintf>:
    7448:	b40c      	push	{r2, r3}
    744a:	b530      	push	{r4, r5, lr}
    744c:	4b16      	ldr	r3, [pc, #88]	; (74a8 <sniprintf+0x60>)
    744e:	b09d      	sub	sp, #116	; 0x74
    7450:	1e0c      	subs	r4, r1, #0
    7452:	681d      	ldr	r5, [r3, #0]
    7454:	da08      	bge.n	7468 <sniprintf+0x20>
    7456:	238b      	movs	r3, #139	; 0x8b
    7458:	2001      	movs	r0, #1
    745a:	602b      	str	r3, [r5, #0]
    745c:	4240      	negs	r0, r0
    745e:	b01d      	add	sp, #116	; 0x74
    7460:	bc30      	pop	{r4, r5}
    7462:	bc08      	pop	{r3}
    7464:	b002      	add	sp, #8
    7466:	4718      	bx	r3
    7468:	2382      	movs	r3, #130	; 0x82
    746a:	a902      	add	r1, sp, #8
    746c:	009b      	lsls	r3, r3, #2
    746e:	818b      	strh	r3, [r1, #12]
    7470:	2300      	movs	r3, #0
    7472:	9002      	str	r0, [sp, #8]
    7474:	6108      	str	r0, [r1, #16]
    7476:	429c      	cmp	r4, r3
    7478:	d000      	beq.n	747c <sniprintf+0x34>
    747a:	1e63      	subs	r3, r4, #1
    747c:	608b      	str	r3, [r1, #8]
    747e:	614b      	str	r3, [r1, #20]
    7480:	2301      	movs	r3, #1
    7482:	425b      	negs	r3, r3
    7484:	81cb      	strh	r3, [r1, #14]
    7486:	9a20      	ldr	r2, [sp, #128]	; 0x80
    7488:	ab21      	add	r3, sp, #132	; 0x84
    748a:	0028      	movs	r0, r5
    748c:	9301      	str	r3, [sp, #4]
    748e:	f001 ff8d 	bl	93ac <_svfiprintf_r>
    7492:	1c43      	adds	r3, r0, #1
    7494:	da01      	bge.n	749a <sniprintf+0x52>
    7496:	238b      	movs	r3, #139	; 0x8b
    7498:	602b      	str	r3, [r5, #0]
    749a:	2c00      	cmp	r4, #0
    749c:	d0df      	beq.n	745e <sniprintf+0x16>
    749e:	2300      	movs	r3, #0
    74a0:	9a02      	ldr	r2, [sp, #8]
    74a2:	7013      	strb	r3, [r2, #0]
    74a4:	e7db      	b.n	745e <sniprintf+0x16>
    74a6:	46c0      	nop			; (mov r8, r8)
    74a8:	200000d8 	.word	0x200000d8

000074ac <strcmp>:
    74ac:	7802      	ldrb	r2, [r0, #0]
    74ae:	780b      	ldrb	r3, [r1, #0]
    74b0:	2a00      	cmp	r2, #0
    74b2:	d003      	beq.n	74bc <strcmp+0x10>
    74b4:	3001      	adds	r0, #1
    74b6:	3101      	adds	r1, #1
    74b8:	429a      	cmp	r2, r3
    74ba:	d0f7      	beq.n	74ac <strcmp>
    74bc:	1ad0      	subs	r0, r2, r3
    74be:	4770      	bx	lr

000074c0 <strcpy>:
    74c0:	1c03      	adds	r3, r0, #0
    74c2:	780a      	ldrb	r2, [r1, #0]
    74c4:	3101      	adds	r1, #1
    74c6:	701a      	strb	r2, [r3, #0]
    74c8:	3301      	adds	r3, #1
    74ca:	2a00      	cmp	r2, #0
    74cc:	d1f9      	bne.n	74c2 <strcpy+0x2>
    74ce:	4770      	bx	lr

000074d0 <strlen>:
    74d0:	2300      	movs	r3, #0
    74d2:	5cc2      	ldrb	r2, [r0, r3]
    74d4:	3301      	adds	r3, #1
    74d6:	2a00      	cmp	r2, #0
    74d8:	d1fb      	bne.n	74d2 <strlen+0x2>
    74da:	1e58      	subs	r0, r3, #1
    74dc:	4770      	bx	lr
	...

000074e0 <sulp>:
    74e0:	b570      	push	{r4, r5, r6, lr}
    74e2:	0016      	movs	r6, r2
    74e4:	000d      	movs	r5, r1
    74e6:	f001 fdcb 	bl	9080 <__ulp>
    74ea:	2e00      	cmp	r6, #0
    74ec:	d00d      	beq.n	750a <sulp+0x2a>
    74ee:	236b      	movs	r3, #107	; 0x6b
    74f0:	006a      	lsls	r2, r5, #1
    74f2:	0d52      	lsrs	r2, r2, #21
    74f4:	1a9b      	subs	r3, r3, r2
    74f6:	2b00      	cmp	r3, #0
    74f8:	dd07      	ble.n	750a <sulp+0x2a>
    74fa:	2400      	movs	r4, #0
    74fc:	4a03      	ldr	r2, [pc, #12]	; (750c <sulp+0x2c>)
    74fe:	051b      	lsls	r3, r3, #20
    7500:	189d      	adds	r5, r3, r2
    7502:	002b      	movs	r3, r5
    7504:	0022      	movs	r2, r4
    7506:	f002 fd83 	bl	a010 <__aeabi_dmul>
    750a:	bd70      	pop	{r4, r5, r6, pc}
    750c:	3ff00000 	.word	0x3ff00000

00007510 <_strtod_l>:
    7510:	b5f0      	push	{r4, r5, r6, r7, lr}
    7512:	b0a5      	sub	sp, #148	; 0x94
    7514:	9307      	str	r3, [sp, #28]
    7516:	2300      	movs	r3, #0
    7518:	9004      	str	r0, [sp, #16]
    751a:	9807      	ldr	r0, [sp, #28]
    751c:	9320      	str	r3, [sp, #128]	; 0x80
    751e:	9106      	str	r1, [sp, #24]
    7520:	921a      	str	r2, [sp, #104]	; 0x68
    7522:	f001 fac9 	bl	8ab8 <__localeconv_l>
    7526:	0005      	movs	r5, r0
    7528:	6800      	ldr	r0, [r0, #0]
    752a:	f7ff ffd1 	bl	74d0 <strlen>
    752e:	2600      	movs	r6, #0
    7530:	2700      	movs	r7, #0
    7532:	9b06      	ldr	r3, [sp, #24]
    7534:	9005      	str	r0, [sp, #20]
    7536:	931f      	str	r3, [sp, #124]	; 0x7c
    7538:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    753a:	781a      	ldrb	r2, [r3, #0]
    753c:	2a0d      	cmp	r2, #13
    753e:	d839      	bhi.n	75b4 <_strtod_l+0xa4>
    7540:	2a09      	cmp	r2, #9
    7542:	d23d      	bcs.n	75c0 <_strtod_l+0xb0>
    7544:	2a00      	cmp	r2, #0
    7546:	d044      	beq.n	75d2 <_strtod_l+0xc2>
    7548:	2300      	movs	r3, #0
    754a:	9312      	str	r3, [sp, #72]	; 0x48
    754c:	2200      	movs	r2, #0
    754e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    7550:	920c      	str	r2, [sp, #48]	; 0x30
    7552:	7823      	ldrb	r3, [r4, #0]
    7554:	2b30      	cmp	r3, #48	; 0x30
    7556:	d000      	beq.n	755a <_strtod_l+0x4a>
    7558:	e07e      	b.n	7658 <_strtod_l+0x148>
    755a:	7863      	ldrb	r3, [r4, #1]
    755c:	2b58      	cmp	r3, #88	; 0x58
    755e:	d002      	beq.n	7566 <_strtod_l+0x56>
    7560:	2b78      	cmp	r3, #120	; 0x78
    7562:	d000      	beq.n	7566 <_strtod_l+0x56>
    7564:	e06e      	b.n	7644 <_strtod_l+0x134>
    7566:	9b07      	ldr	r3, [sp, #28]
    7568:	4ab7      	ldr	r2, [pc, #732]	; (7848 <_strtod_l+0x338>)
    756a:	9302      	str	r3, [sp, #8]
    756c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    756e:	a91f      	add	r1, sp, #124	; 0x7c
    7570:	9301      	str	r3, [sp, #4]
    7572:	ab20      	add	r3, sp, #128	; 0x80
    7574:	9300      	str	r3, [sp, #0]
    7576:	9804      	ldr	r0, [sp, #16]
    7578:	ab21      	add	r3, sp, #132	; 0x84
    757a:	f000 ffb6 	bl	84ea <__gethex>
    757e:	2507      	movs	r5, #7
    7580:	9005      	str	r0, [sp, #20]
    7582:	4005      	ands	r5, r0
    7584:	d005      	beq.n	7592 <_strtod_l+0x82>
    7586:	2d06      	cmp	r5, #6
    7588:	d12f      	bne.n	75ea <_strtod_l+0xda>
    758a:	2300      	movs	r3, #0
    758c:	3401      	adds	r4, #1
    758e:	941f      	str	r4, [sp, #124]	; 0x7c
    7590:	9312      	str	r3, [sp, #72]	; 0x48
    7592:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7594:	2b00      	cmp	r3, #0
    7596:	d002      	beq.n	759e <_strtod_l+0x8e>
    7598:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    759a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    759c:	601a      	str	r2, [r3, #0]
    759e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    75a0:	2b00      	cmp	r3, #0
    75a2:	d01d      	beq.n	75e0 <_strtod_l+0xd0>
    75a4:	2380      	movs	r3, #128	; 0x80
    75a6:	0032      	movs	r2, r6
    75a8:	061b      	lsls	r3, r3, #24
    75aa:	18fb      	adds	r3, r7, r3
    75ac:	0010      	movs	r0, r2
    75ae:	0019      	movs	r1, r3
    75b0:	b025      	add	sp, #148	; 0x94
    75b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75b4:	2a2b      	cmp	r2, #43	; 0x2b
    75b6:	d005      	beq.n	75c4 <_strtod_l+0xb4>
    75b8:	2a2d      	cmp	r2, #45	; 0x2d
    75ba:	d014      	beq.n	75e6 <_strtod_l+0xd6>
    75bc:	2a20      	cmp	r2, #32
    75be:	d1c3      	bne.n	7548 <_strtod_l+0x38>
    75c0:	3301      	adds	r3, #1
    75c2:	e7b8      	b.n	7536 <_strtod_l+0x26>
    75c4:	2200      	movs	r2, #0
    75c6:	9212      	str	r2, [sp, #72]	; 0x48
    75c8:	1c5a      	adds	r2, r3, #1
    75ca:	921f      	str	r2, [sp, #124]	; 0x7c
    75cc:	785b      	ldrb	r3, [r3, #1]
    75ce:	2b00      	cmp	r3, #0
    75d0:	d1bc      	bne.n	754c <_strtod_l+0x3c>
    75d2:	9b06      	ldr	r3, [sp, #24]
    75d4:	931f      	str	r3, [sp, #124]	; 0x7c
    75d6:	2300      	movs	r3, #0
    75d8:	9312      	str	r3, [sp, #72]	; 0x48
    75da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    75dc:	2b00      	cmp	r3, #0
    75de:	d1db      	bne.n	7598 <_strtod_l+0x88>
    75e0:	0032      	movs	r2, r6
    75e2:	003b      	movs	r3, r7
    75e4:	e7e2      	b.n	75ac <_strtod_l+0x9c>
    75e6:	2201      	movs	r2, #1
    75e8:	e7ed      	b.n	75c6 <_strtod_l+0xb6>
    75ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
    75ec:	2a00      	cmp	r2, #0
    75ee:	d007      	beq.n	7600 <_strtod_l+0xf0>
    75f0:	2135      	movs	r1, #53	; 0x35
    75f2:	a822      	add	r0, sp, #136	; 0x88
    75f4:	f001 fe31 	bl	925a <__copybits>
    75f8:	9920      	ldr	r1, [sp, #128]	; 0x80
    75fa:	9804      	ldr	r0, [sp, #16]
    75fc:	f001 faaa 	bl	8b54 <_Bfree>
    7600:	1e68      	subs	r0, r5, #1
    7602:	2804      	cmp	r0, #4
    7604:	d806      	bhi.n	7614 <_strtod_l+0x104>
    7606:	f002 f9c5 	bl	9994 <__gnu_thumb1_case_uqi>
    760a:	030c      	.short	0x030c
    760c:	1917      	.short	0x1917
    760e:	0c          	.byte	0x0c
    760f:	00          	.byte	0x00
    7610:	9e22      	ldr	r6, [sp, #136]	; 0x88
    7612:	9f23      	ldr	r7, [sp, #140]	; 0x8c
    7614:	9b05      	ldr	r3, [sp, #20]
    7616:	071b      	lsls	r3, r3, #28
    7618:	d5bb      	bpl.n	7592 <_strtod_l+0x82>
    761a:	2380      	movs	r3, #128	; 0x80
    761c:	061b      	lsls	r3, r3, #24
    761e:	431f      	orrs	r7, r3
    7620:	e7b7      	b.n	7592 <_strtod_l+0x82>
    7622:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    7624:	4a89      	ldr	r2, [pc, #548]	; (784c <_strtod_l+0x33c>)
    7626:	498a      	ldr	r1, [pc, #552]	; (7850 <_strtod_l+0x340>)
    7628:	401a      	ands	r2, r3
    762a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    762c:	9e22      	ldr	r6, [sp, #136]	; 0x88
    762e:	185b      	adds	r3, r3, r1
    7630:	051b      	lsls	r3, r3, #20
    7632:	431a      	orrs	r2, r3
    7634:	0017      	movs	r7, r2
    7636:	e7ed      	b.n	7614 <_strtod_l+0x104>
    7638:	4f86      	ldr	r7, [pc, #536]	; (7854 <_strtod_l+0x344>)
    763a:	e7eb      	b.n	7614 <_strtod_l+0x104>
    763c:	2601      	movs	r6, #1
    763e:	4f86      	ldr	r7, [pc, #536]	; (7858 <_strtod_l+0x348>)
    7640:	4276      	negs	r6, r6
    7642:	e7e7      	b.n	7614 <_strtod_l+0x104>
    7644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7646:	1c5a      	adds	r2, r3, #1
    7648:	921f      	str	r2, [sp, #124]	; 0x7c
    764a:	785b      	ldrb	r3, [r3, #1]
    764c:	2b30      	cmp	r3, #48	; 0x30
    764e:	d0f9      	beq.n	7644 <_strtod_l+0x134>
    7650:	2b00      	cmp	r3, #0
    7652:	d09e      	beq.n	7592 <_strtod_l+0x82>
    7654:	2301      	movs	r3, #1
    7656:	930c      	str	r3, [sp, #48]	; 0x30
    7658:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    765a:	220a      	movs	r2, #10
    765c:	9313      	str	r3, [sp, #76]	; 0x4c
    765e:	2300      	movs	r3, #0
    7660:	930b      	str	r3, [sp, #44]	; 0x2c
    7662:	930a      	str	r3, [sp, #40]	; 0x28
    7664:	9308      	str	r3, [sp, #32]
    7666:	981f      	ldr	r0, [sp, #124]	; 0x7c
    7668:	7804      	ldrb	r4, [r0, #0]
    766a:	0023      	movs	r3, r4
    766c:	3b30      	subs	r3, #48	; 0x30
    766e:	b2d9      	uxtb	r1, r3
    7670:	2909      	cmp	r1, #9
    7672:	d926      	bls.n	76c2 <_strtod_l+0x1b2>
    7674:	9a05      	ldr	r2, [sp, #20]
    7676:	6829      	ldr	r1, [r5, #0]
    7678:	f002 f924 	bl	98c4 <strncmp>
    767c:	2800      	cmp	r0, #0
    767e:	d032      	beq.n	76e6 <_strtod_l+0x1d6>
    7680:	2000      	movs	r0, #0
    7682:	0023      	movs	r3, r4
    7684:	4684      	mov	ip, r0
    7686:	9a08      	ldr	r2, [sp, #32]
    7688:	9007      	str	r0, [sp, #28]
    768a:	9205      	str	r2, [sp, #20]
    768c:	2220      	movs	r2, #32
    768e:	0019      	movs	r1, r3
    7690:	4391      	bics	r1, r2
    7692:	000a      	movs	r2, r1
    7694:	2100      	movs	r1, #0
    7696:	2a45      	cmp	r2, #69	; 0x45
    7698:	d000      	beq.n	769c <_strtod_l+0x18c>
    769a:	e0a8      	b.n	77ee <_strtod_l+0x2de>
    769c:	9b05      	ldr	r3, [sp, #20]
    769e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    76a0:	4303      	orrs	r3, r0
    76a2:	4313      	orrs	r3, r2
    76a4:	428b      	cmp	r3, r1
    76a6:	d094      	beq.n	75d2 <_strtod_l+0xc2>
    76a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    76aa:	9306      	str	r3, [sp, #24]
    76ac:	3301      	adds	r3, #1
    76ae:	931f      	str	r3, [sp, #124]	; 0x7c
    76b0:	9b06      	ldr	r3, [sp, #24]
    76b2:	785b      	ldrb	r3, [r3, #1]
    76b4:	2b2b      	cmp	r3, #43	; 0x2b
    76b6:	d072      	beq.n	779e <_strtod_l+0x28e>
    76b8:	000c      	movs	r4, r1
    76ba:	2b2d      	cmp	r3, #45	; 0x2d
    76bc:	d175      	bne.n	77aa <_strtod_l+0x29a>
    76be:	2401      	movs	r4, #1
    76c0:	e06e      	b.n	77a0 <_strtod_l+0x290>
    76c2:	9908      	ldr	r1, [sp, #32]
    76c4:	2908      	cmp	r1, #8
    76c6:	dc09      	bgt.n	76dc <_strtod_l+0x1cc>
    76c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    76ca:	4351      	muls	r1, r2
    76cc:	185b      	adds	r3, r3, r1
    76ce:	930a      	str	r3, [sp, #40]	; 0x28
    76d0:	9b08      	ldr	r3, [sp, #32]
    76d2:	3001      	adds	r0, #1
    76d4:	3301      	adds	r3, #1
    76d6:	9308      	str	r3, [sp, #32]
    76d8:	901f      	str	r0, [sp, #124]	; 0x7c
    76da:	e7c4      	b.n	7666 <_strtod_l+0x156>
    76dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    76de:	4351      	muls	r1, r2
    76e0:	185b      	adds	r3, r3, r1
    76e2:	930b      	str	r3, [sp, #44]	; 0x2c
    76e4:	e7f4      	b.n	76d0 <_strtod_l+0x1c0>
    76e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    76e8:	9b05      	ldr	r3, [sp, #20]
    76ea:	4694      	mov	ip, r2
    76ec:	9a08      	ldr	r2, [sp, #32]
    76ee:	4463      	add	r3, ip
    76f0:	931f      	str	r3, [sp, #124]	; 0x7c
    76f2:	781b      	ldrb	r3, [r3, #0]
    76f4:	2a00      	cmp	r2, #0
    76f6:	d149      	bne.n	778c <_strtod_l+0x27c>
    76f8:	0010      	movs	r0, r2
    76fa:	2b30      	cmp	r3, #48	; 0x30
    76fc:	d028      	beq.n	7750 <_strtod_l+0x240>
    76fe:	001a      	movs	r2, r3
    7700:	3a31      	subs	r2, #49	; 0x31
    7702:	2a08      	cmp	r2, #8
    7704:	d846      	bhi.n	7794 <_strtod_l+0x284>
    7706:	4684      	mov	ip, r0
    7708:	2000      	movs	r0, #0
    770a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    770c:	9005      	str	r0, [sp, #20]
    770e:	9213      	str	r2, [sp, #76]	; 0x4c
    7710:	3b30      	subs	r3, #48	; 0x30
    7712:	1c42      	adds	r2, r0, #1
    7714:	2b00      	cmp	r3, #0
    7716:	d00f      	beq.n	7738 <_strtod_l+0x228>
    7718:	210a      	movs	r1, #10
    771a:	4494      	add	ip, r2
    771c:	9a05      	ldr	r2, [sp, #20]
    771e:	1810      	adds	r0, r2, r0
    7720:	4282      	cmp	r2, r0
    7722:	d11b      	bne.n	775c <_strtod_l+0x24c>
    7724:	1c51      	adds	r1, r2, #1
    7726:	9105      	str	r1, [sp, #20]
    7728:	2a08      	cmp	r2, #8
    772a:	dc25      	bgt.n	7778 <_strtod_l+0x268>
    772c:	220a      	movs	r2, #10
    772e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7730:	434a      	muls	r2, r1
    7732:	189b      	adds	r3, r3, r2
    7734:	2200      	movs	r2, #0
    7736:	930a      	str	r3, [sp, #40]	; 0x28
    7738:	0010      	movs	r0, r2
    773a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    773c:	1c59      	adds	r1, r3, #1
    773e:	911f      	str	r1, [sp, #124]	; 0x7c
    7740:	785b      	ldrb	r3, [r3, #1]
    7742:	001a      	movs	r2, r3
    7744:	3a30      	subs	r2, #48	; 0x30
    7746:	2a09      	cmp	r2, #9
    7748:	d9e2      	bls.n	7710 <_strtod_l+0x200>
    774a:	2201      	movs	r2, #1
    774c:	9207      	str	r2, [sp, #28]
    774e:	e79d      	b.n	768c <_strtod_l+0x17c>
    7750:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7752:	3001      	adds	r0, #1
    7754:	1c5a      	adds	r2, r3, #1
    7756:	921f      	str	r2, [sp, #124]	; 0x7c
    7758:	785b      	ldrb	r3, [r3, #1]
    775a:	e7ce      	b.n	76fa <_strtod_l+0x1ea>
    775c:	3201      	adds	r2, #1
    775e:	1e54      	subs	r4, r2, #1
    7760:	2c08      	cmp	r4, #8
    7762:	dc03      	bgt.n	776c <_strtod_l+0x25c>
    7764:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7766:	434c      	muls	r4, r1
    7768:	940a      	str	r4, [sp, #40]	; 0x28
    776a:	e7d9      	b.n	7720 <_strtod_l+0x210>
    776c:	2a10      	cmp	r2, #16
    776e:	dcd7      	bgt.n	7720 <_strtod_l+0x210>
    7770:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7772:	434c      	muls	r4, r1
    7774:	940b      	str	r4, [sp, #44]	; 0x2c
    7776:	e7d3      	b.n	7720 <_strtod_l+0x210>
    7778:	9905      	ldr	r1, [sp, #20]
    777a:	2200      	movs	r2, #0
    777c:	2910      	cmp	r1, #16
    777e:	dcdb      	bgt.n	7738 <_strtod_l+0x228>
    7780:	210a      	movs	r1, #10
    7782:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7784:	4341      	muls	r1, r0
    7786:	185b      	adds	r3, r3, r1
    7788:	930b      	str	r3, [sp, #44]	; 0x2c
    778a:	e7d5      	b.n	7738 <_strtod_l+0x228>
    778c:	9a08      	ldr	r2, [sp, #32]
    778e:	4684      	mov	ip, r0
    7790:	9205      	str	r2, [sp, #20]
    7792:	e7d6      	b.n	7742 <_strtod_l+0x232>
    7794:	2200      	movs	r2, #0
    7796:	4694      	mov	ip, r2
    7798:	9205      	str	r2, [sp, #20]
    779a:	3201      	adds	r2, #1
    779c:	e7d6      	b.n	774c <_strtod_l+0x23c>
    779e:	000c      	movs	r4, r1
    77a0:	9b06      	ldr	r3, [sp, #24]
    77a2:	3302      	adds	r3, #2
    77a4:	931f      	str	r3, [sp, #124]	; 0x7c
    77a6:	9b06      	ldr	r3, [sp, #24]
    77a8:	789b      	ldrb	r3, [r3, #2]
    77aa:	001a      	movs	r2, r3
    77ac:	3a30      	subs	r2, #48	; 0x30
    77ae:	2a09      	cmp	r2, #9
    77b0:	d861      	bhi.n	7876 <_strtod_l+0x366>
    77b2:	2b30      	cmp	r3, #48	; 0x30
    77b4:	d042      	beq.n	783c <_strtod_l+0x32c>
    77b6:	001a      	movs	r2, r3
    77b8:	3a31      	subs	r2, #49	; 0x31
    77ba:	2100      	movs	r1, #0
    77bc:	2a08      	cmp	r2, #8
    77be:	d816      	bhi.n	77ee <_strtod_l+0x2de>
    77c0:	3b30      	subs	r3, #48	; 0x30
    77c2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    77c4:	930e      	str	r3, [sp, #56]	; 0x38
    77c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    77c8:	1c59      	adds	r1, r3, #1
    77ca:	911f      	str	r1, [sp, #124]	; 0x7c
    77cc:	785b      	ldrb	r3, [r3, #1]
    77ce:	001a      	movs	r2, r3
    77d0:	3a30      	subs	r2, #48	; 0x30
    77d2:	2a09      	cmp	r2, #9
    77d4:	d948      	bls.n	7868 <_strtod_l+0x358>
    77d6:	1b4a      	subs	r2, r1, r5
    77d8:	4d20      	ldr	r5, [pc, #128]	; (785c <_strtod_l+0x34c>)
    77da:	0029      	movs	r1, r5
    77dc:	2a08      	cmp	r2, #8
    77de:	dc03      	bgt.n	77e8 <_strtod_l+0x2d8>
    77e0:	990e      	ldr	r1, [sp, #56]	; 0x38
    77e2:	42a9      	cmp	r1, r5
    77e4:	dd00      	ble.n	77e8 <_strtod_l+0x2d8>
    77e6:	0029      	movs	r1, r5
    77e8:	2c00      	cmp	r4, #0
    77ea:	d000      	beq.n	77ee <_strtod_l+0x2de>
    77ec:	4249      	negs	r1, r1
    77ee:	9a05      	ldr	r2, [sp, #20]
    77f0:	2a00      	cmp	r2, #0
    77f2:	d163      	bne.n	78bc <_strtod_l+0x3ac>
    77f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    77f6:	4310      	orrs	r0, r2
    77f8:	d000      	beq.n	77fc <_strtod_l+0x2ec>
    77fa:	e6ca      	b.n	7592 <_strtod_l+0x82>
    77fc:	9a07      	ldr	r2, [sp, #28]
    77fe:	2a00      	cmp	r2, #0
    7800:	d000      	beq.n	7804 <_strtod_l+0x2f4>
    7802:	e6e6      	b.n	75d2 <_strtod_l+0xc2>
    7804:	2b4e      	cmp	r3, #78	; 0x4e
    7806:	d03f      	beq.n	7888 <_strtod_l+0x378>
    7808:	dc39      	bgt.n	787e <_strtod_l+0x36e>
    780a:	2b49      	cmp	r3, #73	; 0x49
    780c:	d000      	beq.n	7810 <_strtod_l+0x300>
    780e:	e6e0      	b.n	75d2 <_strtod_l+0xc2>
    7810:	4913      	ldr	r1, [pc, #76]	; (7860 <_strtod_l+0x350>)
    7812:	a81f      	add	r0, sp, #124	; 0x7c
    7814:	f001 f8a2 	bl	895c <__match>
    7818:	2800      	cmp	r0, #0
    781a:	d100      	bne.n	781e <_strtod_l+0x30e>
    781c:	e6d9      	b.n	75d2 <_strtod_l+0xc2>
    781e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7820:	4910      	ldr	r1, [pc, #64]	; (7864 <_strtod_l+0x354>)
    7822:	3b01      	subs	r3, #1
    7824:	a81f      	add	r0, sp, #124	; 0x7c
    7826:	931f      	str	r3, [sp, #124]	; 0x7c
    7828:	f001 f898 	bl	895c <__match>
    782c:	2800      	cmp	r0, #0
    782e:	d102      	bne.n	7836 <_strtod_l+0x326>
    7830:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7832:	3301      	adds	r3, #1
    7834:	931f      	str	r3, [sp, #124]	; 0x7c
    7836:	4f07      	ldr	r7, [pc, #28]	; (7854 <_strtod_l+0x344>)
    7838:	2600      	movs	r6, #0
    783a:	e6aa      	b.n	7592 <_strtod_l+0x82>
    783c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    783e:	1c5a      	adds	r2, r3, #1
    7840:	921f      	str	r2, [sp, #124]	; 0x7c
    7842:	785b      	ldrb	r3, [r3, #1]
    7844:	e7b5      	b.n	77b2 <_strtod_l+0x2a2>
    7846:	46c0      	nop			; (mov r8, r8)
    7848:	0000a90c 	.word	0x0000a90c
    784c:	ffefffff 	.word	0xffefffff
    7850:	00000433 	.word	0x00000433
    7854:	7ff00000 	.word	0x7ff00000
    7858:	7fffffff 	.word	0x7fffffff
    785c:	00004e1f 	.word	0x00004e1f
    7860:	0000a900 	.word	0x0000a900
    7864:	0000a903 	.word	0x0000a903
    7868:	220a      	movs	r2, #10
    786a:	990e      	ldr	r1, [sp, #56]	; 0x38
    786c:	434a      	muls	r2, r1
    786e:	18d2      	adds	r2, r2, r3
    7870:	3a30      	subs	r2, #48	; 0x30
    7872:	920e      	str	r2, [sp, #56]	; 0x38
    7874:	e7a7      	b.n	77c6 <_strtod_l+0x2b6>
    7876:	9a06      	ldr	r2, [sp, #24]
    7878:	2100      	movs	r1, #0
    787a:	921f      	str	r2, [sp, #124]	; 0x7c
    787c:	e7b7      	b.n	77ee <_strtod_l+0x2de>
    787e:	2b69      	cmp	r3, #105	; 0x69
    7880:	d0c6      	beq.n	7810 <_strtod_l+0x300>
    7882:	2b6e      	cmp	r3, #110	; 0x6e
    7884:	d000      	beq.n	7888 <_strtod_l+0x378>
    7886:	e6a4      	b.n	75d2 <_strtod_l+0xc2>
    7888:	498b      	ldr	r1, [pc, #556]	; (7ab8 <_strtod_l+0x5a8>)
    788a:	a81f      	add	r0, sp, #124	; 0x7c
    788c:	f001 f866 	bl	895c <__match>
    7890:	2800      	cmp	r0, #0
    7892:	d100      	bne.n	7896 <_strtod_l+0x386>
    7894:	e69d      	b.n	75d2 <_strtod_l+0xc2>
    7896:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7898:	781b      	ldrb	r3, [r3, #0]
    789a:	2b28      	cmp	r3, #40	; 0x28
    789c:	d10c      	bne.n	78b8 <_strtod_l+0x3a8>
    789e:	aa22      	add	r2, sp, #136	; 0x88
    78a0:	4986      	ldr	r1, [pc, #536]	; (7abc <_strtod_l+0x5ac>)
    78a2:	a81f      	add	r0, sp, #124	; 0x7c
    78a4:	f001 f86e 	bl	8984 <__hexnan>
    78a8:	2805      	cmp	r0, #5
    78aa:	d105      	bne.n	78b8 <_strtod_l+0x3a8>
    78ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    78ae:	4a84      	ldr	r2, [pc, #528]	; (7ac0 <_strtod_l+0x5b0>)
    78b0:	9e22      	ldr	r6, [sp, #136]	; 0x88
    78b2:	431a      	orrs	r2, r3
    78b4:	0017      	movs	r7, r2
    78b6:	e66c      	b.n	7592 <_strtod_l+0x82>
    78b8:	4f82      	ldr	r7, [pc, #520]	; (7ac4 <_strtod_l+0x5b4>)
    78ba:	e7bd      	b.n	7838 <_strtod_l+0x328>
    78bc:	4663      	mov	r3, ip
    78be:	1acb      	subs	r3, r1, r3
    78c0:	9307      	str	r3, [sp, #28]
    78c2:	9b08      	ldr	r3, [sp, #32]
    78c4:	2b00      	cmp	r3, #0
    78c6:	d101      	bne.n	78cc <_strtod_l+0x3bc>
    78c8:	9b05      	ldr	r3, [sp, #20]
    78ca:	9308      	str	r3, [sp, #32]
    78cc:	9c05      	ldr	r4, [sp, #20]
    78ce:	2c10      	cmp	r4, #16
    78d0:	dd00      	ble.n	78d4 <_strtod_l+0x3c4>
    78d2:	2410      	movs	r4, #16
    78d4:	980a      	ldr	r0, [sp, #40]	; 0x28
    78d6:	f7ff fb93 	bl	7000 <__aeabi_ui2d>
    78da:	0006      	movs	r6, r0
    78dc:	000f      	movs	r7, r1
    78de:	2c09      	cmp	r4, #9
    78e0:	dd15      	ble.n	790e <_strtod_l+0x3fe>
    78e2:	0022      	movs	r2, r4
    78e4:	4b78      	ldr	r3, [pc, #480]	; (7ac8 <_strtod_l+0x5b8>)
    78e6:	3a09      	subs	r2, #9
    78e8:	00d2      	lsls	r2, r2, #3
    78ea:	189b      	adds	r3, r3, r2
    78ec:	681a      	ldr	r2, [r3, #0]
    78ee:	685b      	ldr	r3, [r3, #4]
    78f0:	f002 fb8e 	bl	a010 <__aeabi_dmul>
    78f4:	0006      	movs	r6, r0
    78f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    78f8:	000f      	movs	r7, r1
    78fa:	f7ff fb81 	bl	7000 <__aeabi_ui2d>
    78fe:	0002      	movs	r2, r0
    7900:	000b      	movs	r3, r1
    7902:	0030      	movs	r0, r6
    7904:	0039      	movs	r1, r7
    7906:	f7fe fc21 	bl	614c <__aeabi_dadd>
    790a:	0006      	movs	r6, r0
    790c:	000f      	movs	r7, r1
    790e:	9b05      	ldr	r3, [sp, #20]
    7910:	2b0f      	cmp	r3, #15
    7912:	dc39      	bgt.n	7988 <_strtod_l+0x478>
    7914:	9b07      	ldr	r3, [sp, #28]
    7916:	2b00      	cmp	r3, #0
    7918:	d100      	bne.n	791c <_strtod_l+0x40c>
    791a:	e63a      	b.n	7592 <_strtod_l+0x82>
    791c:	dd26      	ble.n	796c <_strtod_l+0x45c>
    791e:	2b16      	cmp	r3, #22
    7920:	dc0b      	bgt.n	793a <_strtod_l+0x42a>
    7922:	4969      	ldr	r1, [pc, #420]	; (7ac8 <_strtod_l+0x5b8>)
    7924:	00db      	lsls	r3, r3, #3
    7926:	18c9      	adds	r1, r1, r3
    7928:	0032      	movs	r2, r6
    792a:	6808      	ldr	r0, [r1, #0]
    792c:	6849      	ldr	r1, [r1, #4]
    792e:	003b      	movs	r3, r7
    7930:	f002 fb6e 	bl	a010 <__aeabi_dmul>
    7934:	0006      	movs	r6, r0
    7936:	000f      	movs	r7, r1
    7938:	e62b      	b.n	7592 <_strtod_l+0x82>
    793a:	2325      	movs	r3, #37	; 0x25
    793c:	9a05      	ldr	r2, [sp, #20]
    793e:	1a9b      	subs	r3, r3, r2
    7940:	9a07      	ldr	r2, [sp, #28]
    7942:	429a      	cmp	r2, r3
    7944:	dc20      	bgt.n	7988 <_strtod_l+0x478>
    7946:	240f      	movs	r4, #15
    7948:	9b05      	ldr	r3, [sp, #20]
    794a:	4d5f      	ldr	r5, [pc, #380]	; (7ac8 <_strtod_l+0x5b8>)
    794c:	1ae4      	subs	r4, r4, r3
    794e:	00e1      	lsls	r1, r4, #3
    7950:	1869      	adds	r1, r5, r1
    7952:	0032      	movs	r2, r6
    7954:	6808      	ldr	r0, [r1, #0]
    7956:	6849      	ldr	r1, [r1, #4]
    7958:	003b      	movs	r3, r7
    795a:	f002 fb59 	bl	a010 <__aeabi_dmul>
    795e:	9b07      	ldr	r3, [sp, #28]
    7960:	1b1c      	subs	r4, r3, r4
    7962:	00e4      	lsls	r4, r4, #3
    7964:	192c      	adds	r4, r5, r4
    7966:	6822      	ldr	r2, [r4, #0]
    7968:	6863      	ldr	r3, [r4, #4]
    796a:	e7e1      	b.n	7930 <_strtod_l+0x420>
    796c:	9b07      	ldr	r3, [sp, #28]
    796e:	3316      	adds	r3, #22
    7970:	db0a      	blt.n	7988 <_strtod_l+0x478>
    7972:	9b07      	ldr	r3, [sp, #28]
    7974:	0030      	movs	r0, r6
    7976:	00da      	lsls	r2, r3, #3
    7978:	4b53      	ldr	r3, [pc, #332]	; (7ac8 <_strtod_l+0x5b8>)
    797a:	0039      	movs	r1, r7
    797c:	1a9b      	subs	r3, r3, r2
    797e:	681a      	ldr	r2, [r3, #0]
    7980:	685b      	ldr	r3, [r3, #4]
    7982:	f002 f811 	bl	99a8 <__aeabi_ddiv>
    7986:	e7d5      	b.n	7934 <_strtod_l+0x424>
    7988:	9b05      	ldr	r3, [sp, #20]
    798a:	1b1c      	subs	r4, r3, r4
    798c:	9b07      	ldr	r3, [sp, #28]
    798e:	18e4      	adds	r4, r4, r3
    7990:	2c00      	cmp	r4, #0
    7992:	dd6e      	ble.n	7a72 <_strtod_l+0x562>
    7994:	230f      	movs	r3, #15
    7996:	4023      	ands	r3, r4
    7998:	d00a      	beq.n	79b0 <_strtod_l+0x4a0>
    799a:	494b      	ldr	r1, [pc, #300]	; (7ac8 <_strtod_l+0x5b8>)
    799c:	00db      	lsls	r3, r3, #3
    799e:	18c9      	adds	r1, r1, r3
    79a0:	0032      	movs	r2, r6
    79a2:	6808      	ldr	r0, [r1, #0]
    79a4:	6849      	ldr	r1, [r1, #4]
    79a6:	003b      	movs	r3, r7
    79a8:	f002 fb32 	bl	a010 <__aeabi_dmul>
    79ac:	0006      	movs	r6, r0
    79ae:	000f      	movs	r7, r1
    79b0:	230f      	movs	r3, #15
    79b2:	439c      	bics	r4, r3
    79b4:	d048      	beq.n	7a48 <_strtod_l+0x538>
    79b6:	3326      	adds	r3, #38	; 0x26
    79b8:	33ff      	adds	r3, #255	; 0xff
    79ba:	429c      	cmp	r4, r3
    79bc:	dd21      	ble.n	7a02 <_strtod_l+0x4f2>
    79be:	2400      	movs	r4, #0
    79c0:	9405      	str	r4, [sp, #20]
    79c2:	940a      	str	r4, [sp, #40]	; 0x28
    79c4:	9407      	str	r4, [sp, #28]
    79c6:	2322      	movs	r3, #34	; 0x22
    79c8:	2600      	movs	r6, #0
    79ca:	9a04      	ldr	r2, [sp, #16]
    79cc:	4f3c      	ldr	r7, [pc, #240]	; (7ac0 <_strtod_l+0x5b0>)
    79ce:	6013      	str	r3, [r2, #0]
    79d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    79d2:	42b3      	cmp	r3, r6
    79d4:	d100      	bne.n	79d8 <_strtod_l+0x4c8>
    79d6:	e5dc      	b.n	7592 <_strtod_l+0x82>
    79d8:	9920      	ldr	r1, [sp, #128]	; 0x80
    79da:	9804      	ldr	r0, [sp, #16]
    79dc:	f001 f8ba 	bl	8b54 <_Bfree>
    79e0:	9907      	ldr	r1, [sp, #28]
    79e2:	9804      	ldr	r0, [sp, #16]
    79e4:	f001 f8b6 	bl	8b54 <_Bfree>
    79e8:	9905      	ldr	r1, [sp, #20]
    79ea:	9804      	ldr	r0, [sp, #16]
    79ec:	f001 f8b2 	bl	8b54 <_Bfree>
    79f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    79f2:	9804      	ldr	r0, [sp, #16]
    79f4:	f001 f8ae 	bl	8b54 <_Bfree>
    79f8:	0021      	movs	r1, r4
    79fa:	9804      	ldr	r0, [sp, #16]
    79fc:	f001 f8aa 	bl	8b54 <_Bfree>
    7a00:	e5c7      	b.n	7592 <_strtod_l+0x82>
    7a02:	2300      	movs	r3, #0
    7a04:	0030      	movs	r0, r6
    7a06:	0039      	movs	r1, r7
    7a08:	001d      	movs	r5, r3
    7a0a:	1124      	asrs	r4, r4, #4
    7a0c:	2c01      	cmp	r4, #1
    7a0e:	dc1e      	bgt.n	7a4e <_strtod_l+0x53e>
    7a10:	2b00      	cmp	r3, #0
    7a12:	d001      	beq.n	7a18 <_strtod_l+0x508>
    7a14:	0006      	movs	r6, r0
    7a16:	000f      	movs	r7, r1
    7a18:	4b2c      	ldr	r3, [pc, #176]	; (7acc <_strtod_l+0x5bc>)
    7a1a:	00ed      	lsls	r5, r5, #3
    7a1c:	18ff      	adds	r7, r7, r3
    7a1e:	4b2c      	ldr	r3, [pc, #176]	; (7ad0 <_strtod_l+0x5c0>)
    7a20:	0032      	movs	r2, r6
    7a22:	195d      	adds	r5, r3, r5
    7a24:	6828      	ldr	r0, [r5, #0]
    7a26:	6869      	ldr	r1, [r5, #4]
    7a28:	003b      	movs	r3, r7
    7a2a:	f002 faf1 	bl	a010 <__aeabi_dmul>
    7a2e:	4b24      	ldr	r3, [pc, #144]	; (7ac0 <_strtod_l+0x5b0>)
    7a30:	000f      	movs	r7, r1
    7a32:	400b      	ands	r3, r1
    7a34:	4927      	ldr	r1, [pc, #156]	; (7ad4 <_strtod_l+0x5c4>)
    7a36:	0006      	movs	r6, r0
    7a38:	428b      	cmp	r3, r1
    7a3a:	d8c0      	bhi.n	79be <_strtod_l+0x4ae>
    7a3c:	4926      	ldr	r1, [pc, #152]	; (7ad8 <_strtod_l+0x5c8>)
    7a3e:	428b      	cmp	r3, r1
    7a40:	d913      	bls.n	7a6a <_strtod_l+0x55a>
    7a42:	2601      	movs	r6, #1
    7a44:	4f25      	ldr	r7, [pc, #148]	; (7adc <_strtod_l+0x5cc>)
    7a46:	4276      	negs	r6, r6
    7a48:	2300      	movs	r3, #0
    7a4a:	9306      	str	r3, [sp, #24]
    7a4c:	e074      	b.n	7b38 <_strtod_l+0x628>
    7a4e:	2201      	movs	r2, #1
    7a50:	4214      	tst	r4, r2
    7a52:	d007      	beq.n	7a64 <_strtod_l+0x554>
    7a54:	4a1e      	ldr	r2, [pc, #120]	; (7ad0 <_strtod_l+0x5c0>)
    7a56:	00eb      	lsls	r3, r5, #3
    7a58:	189b      	adds	r3, r3, r2
    7a5a:	681a      	ldr	r2, [r3, #0]
    7a5c:	685b      	ldr	r3, [r3, #4]
    7a5e:	f002 fad7 	bl	a010 <__aeabi_dmul>
    7a62:	2301      	movs	r3, #1
    7a64:	3501      	adds	r5, #1
    7a66:	1064      	asrs	r4, r4, #1
    7a68:	e7d0      	b.n	7a0c <_strtod_l+0x4fc>
    7a6a:	23d4      	movs	r3, #212	; 0xd4
    7a6c:	049b      	lsls	r3, r3, #18
    7a6e:	18ff      	adds	r7, r7, r3
    7a70:	e7ea      	b.n	7a48 <_strtod_l+0x538>
    7a72:	2c00      	cmp	r4, #0
    7a74:	d0e8      	beq.n	7a48 <_strtod_l+0x538>
    7a76:	230f      	movs	r3, #15
    7a78:	4264      	negs	r4, r4
    7a7a:	4023      	ands	r3, r4
    7a7c:	d00a      	beq.n	7a94 <_strtod_l+0x584>
    7a7e:	4a12      	ldr	r2, [pc, #72]	; (7ac8 <_strtod_l+0x5b8>)
    7a80:	00db      	lsls	r3, r3, #3
    7a82:	18d3      	adds	r3, r2, r3
    7a84:	0030      	movs	r0, r6
    7a86:	681a      	ldr	r2, [r3, #0]
    7a88:	685b      	ldr	r3, [r3, #4]
    7a8a:	0039      	movs	r1, r7
    7a8c:	f001 ff8c 	bl	99a8 <__aeabi_ddiv>
    7a90:	0006      	movs	r6, r0
    7a92:	000f      	movs	r7, r1
    7a94:	1124      	asrs	r4, r4, #4
    7a96:	d0d7      	beq.n	7a48 <_strtod_l+0x538>
    7a98:	2c1f      	cmp	r4, #31
    7a9a:	dd21      	ble.n	7ae0 <_strtod_l+0x5d0>
    7a9c:	2400      	movs	r4, #0
    7a9e:	9405      	str	r4, [sp, #20]
    7aa0:	940a      	str	r4, [sp, #40]	; 0x28
    7aa2:	9407      	str	r4, [sp, #28]
    7aa4:	2322      	movs	r3, #34	; 0x22
    7aa6:	9a04      	ldr	r2, [sp, #16]
    7aa8:	2600      	movs	r6, #0
    7aaa:	6013      	str	r3, [r2, #0]
    7aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7aae:	2700      	movs	r7, #0
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d191      	bne.n	79d8 <_strtod_l+0x4c8>
    7ab4:	e56d      	b.n	7592 <_strtod_l+0x82>
    7ab6:	46c0      	nop			; (mov r8, r8)
    7ab8:	0000a909 	.word	0x0000a909
    7abc:	0000a920 	.word	0x0000a920
    7ac0:	7ff00000 	.word	0x7ff00000
    7ac4:	fff80000 	.word	0xfff80000
    7ac8:	0000a998 	.word	0x0000a998
    7acc:	fcb00000 	.word	0xfcb00000
    7ad0:	0000a970 	.word	0x0000a970
    7ad4:	7ca00000 	.word	0x7ca00000
    7ad8:	7c900000 	.word	0x7c900000
    7adc:	7fefffff 	.word	0x7fefffff
    7ae0:	2310      	movs	r3, #16
    7ae2:	4023      	ands	r3, r4
    7ae4:	9306      	str	r3, [sp, #24]
    7ae6:	d001      	beq.n	7aec <_strtod_l+0x5dc>
    7ae8:	236a      	movs	r3, #106	; 0x6a
    7aea:	9306      	str	r3, [sp, #24]
    7aec:	0030      	movs	r0, r6
    7aee:	0039      	movs	r1, r7
    7af0:	2300      	movs	r3, #0
    7af2:	4dca      	ldr	r5, [pc, #808]	; (7e1c <_strtod_l+0x90c>)
    7af4:	2c00      	cmp	r4, #0
    7af6:	dd00      	ble.n	7afa <_strtod_l+0x5ea>
    7af8:	e103      	b.n	7d02 <_strtod_l+0x7f2>
    7afa:	2b00      	cmp	r3, #0
    7afc:	d001      	beq.n	7b02 <_strtod_l+0x5f2>
    7afe:	0006      	movs	r6, r0
    7b00:	000f      	movs	r7, r1
    7b02:	9b06      	ldr	r3, [sp, #24]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d00f      	beq.n	7b28 <_strtod_l+0x618>
    7b08:	236b      	movs	r3, #107	; 0x6b
    7b0a:	0079      	lsls	r1, r7, #1
    7b0c:	0d49      	lsrs	r1, r1, #21
    7b0e:	003a      	movs	r2, r7
    7b10:	1a5b      	subs	r3, r3, r1
    7b12:	2b00      	cmp	r3, #0
    7b14:	dd08      	ble.n	7b28 <_strtod_l+0x618>
    7b16:	2b1f      	cmp	r3, #31
    7b18:	dc00      	bgt.n	7b1c <_strtod_l+0x60c>
    7b1a:	e104      	b.n	7d26 <_strtod_l+0x816>
    7b1c:	2600      	movs	r6, #0
    7b1e:	2b34      	cmp	r3, #52	; 0x34
    7b20:	dc00      	bgt.n	7b24 <_strtod_l+0x614>
    7b22:	e0f9      	b.n	7d18 <_strtod_l+0x808>
    7b24:	27dc      	movs	r7, #220	; 0xdc
    7b26:	04bf      	lsls	r7, r7, #18
    7b28:	2200      	movs	r2, #0
    7b2a:	2300      	movs	r3, #0
    7b2c:	0030      	movs	r0, r6
    7b2e:	0039      	movs	r1, r7
    7b30:	f7fd fd1e 	bl	5570 <__aeabi_dcmpeq>
    7b34:	2800      	cmp	r0, #0
    7b36:	d1b1      	bne.n	7a9c <_strtod_l+0x58c>
    7b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b3a:	9a08      	ldr	r2, [sp, #32]
    7b3c:	9300      	str	r3, [sp, #0]
    7b3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7b40:	9b05      	ldr	r3, [sp, #20]
    7b42:	9804      	ldr	r0, [sp, #16]
    7b44:	f001 f85b 	bl	8bfe <__s2b>
    7b48:	900a      	str	r0, [sp, #40]	; 0x28
    7b4a:	2800      	cmp	r0, #0
    7b4c:	d100      	bne.n	7b50 <_strtod_l+0x640>
    7b4e:	e736      	b.n	79be <_strtod_l+0x4ae>
    7b50:	9b07      	ldr	r3, [sp, #28]
    7b52:	2400      	movs	r4, #0
    7b54:	17da      	asrs	r2, r3, #31
    7b56:	425b      	negs	r3, r3
    7b58:	401a      	ands	r2, r3
    7b5a:	9b07      	ldr	r3, [sp, #28]
    7b5c:	9215      	str	r2, [sp, #84]	; 0x54
    7b5e:	43db      	mvns	r3, r3
    7b60:	9a07      	ldr	r2, [sp, #28]
    7b62:	17db      	asrs	r3, r3, #31
    7b64:	401a      	ands	r2, r3
    7b66:	9213      	str	r2, [sp, #76]	; 0x4c
    7b68:	9405      	str	r4, [sp, #20]
    7b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b6c:	9804      	ldr	r0, [sp, #16]
    7b6e:	6859      	ldr	r1, [r3, #4]
    7b70:	f000 ffb8 	bl	8ae4 <_Balloc>
    7b74:	9007      	str	r0, [sp, #28]
    7b76:	2800      	cmp	r0, #0
    7b78:	d100      	bne.n	7b7c <_strtod_l+0x66c>
    7b7a:	e724      	b.n	79c6 <_strtod_l+0x4b6>
    7b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b7e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7b80:	691b      	ldr	r3, [r3, #16]
    7b82:	310c      	adds	r1, #12
    7b84:	1c9a      	adds	r2, r3, #2
    7b86:	0092      	lsls	r2, r2, #2
    7b88:	300c      	adds	r0, #12
    7b8a:	9308      	str	r3, [sp, #32]
    7b8c:	f7ff fb90 	bl	72b0 <memcpy>
    7b90:	ab22      	add	r3, sp, #136	; 0x88
    7b92:	9301      	str	r3, [sp, #4]
    7b94:	ab21      	add	r3, sp, #132	; 0x84
    7b96:	9300      	str	r3, [sp, #0]
    7b98:	0032      	movs	r2, r6
    7b9a:	003b      	movs	r3, r7
    7b9c:	9804      	ldr	r0, [sp, #16]
    7b9e:	960e      	str	r6, [sp, #56]	; 0x38
    7ba0:	970f      	str	r7, [sp, #60]	; 0x3c
    7ba2:	f001 fadf 	bl	9164 <__d2b>
    7ba6:	9020      	str	r0, [sp, #128]	; 0x80
    7ba8:	2800      	cmp	r0, #0
    7baa:	d100      	bne.n	7bae <_strtod_l+0x69e>
    7bac:	e70b      	b.n	79c6 <_strtod_l+0x4b6>
    7bae:	2101      	movs	r1, #1
    7bb0:	9804      	ldr	r0, [sp, #16]
    7bb2:	f001 f8ac 	bl	8d0e <__i2b>
    7bb6:	9005      	str	r0, [sp, #20]
    7bb8:	2800      	cmp	r0, #0
    7bba:	d100      	bne.n	7bbe <_strtod_l+0x6ae>
    7bbc:	e703      	b.n	79c6 <_strtod_l+0x4b6>
    7bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	da00      	bge.n	7bc6 <_strtod_l+0x6b6>
    7bc4:	e0b4      	b.n	7d30 <_strtod_l+0x820>
    7bc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7bc8:	18d5      	adds	r5, r2, r3
    7bca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7bcc:	4694      	mov	ip, r2
    7bce:	9906      	ldr	r1, [sp, #24]
    7bd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    7bd2:	1a5b      	subs	r3, r3, r1
    7bd4:	2136      	movs	r1, #54	; 0x36
    7bd6:	189b      	adds	r3, r3, r2
    7bd8:	1a8a      	subs	r2, r1, r2
    7bda:	4991      	ldr	r1, [pc, #580]	; (7e20 <_strtod_l+0x910>)
    7bdc:	3b01      	subs	r3, #1
    7bde:	2001      	movs	r0, #1
    7be0:	428b      	cmp	r3, r1
    7be2:	db00      	blt.n	7be6 <_strtod_l+0x6d6>
    7be4:	e0b0      	b.n	7d48 <_strtod_l+0x838>
    7be6:	1ac9      	subs	r1, r1, r3
    7be8:	1a52      	subs	r2, r2, r1
    7bea:	291f      	cmp	r1, #31
    7bec:	dd00      	ble.n	7bf0 <_strtod_l+0x6e0>
    7bee:	e0a4      	b.n	7d3a <_strtod_l+0x82a>
    7bf0:	4088      	lsls	r0, r1
    7bf2:	2300      	movs	r3, #0
    7bf4:	9014      	str	r0, [sp, #80]	; 0x50
    7bf6:	930c      	str	r3, [sp, #48]	; 0x30
    7bf8:	18ab      	adds	r3, r5, r2
    7bfa:	9308      	str	r3, [sp, #32]
    7bfc:	0013      	movs	r3, r2
    7bfe:	9a06      	ldr	r2, [sp, #24]
    7c00:	4463      	add	r3, ip
    7c02:	18d3      	adds	r3, r2, r3
    7c04:	9a08      	ldr	r2, [sp, #32]
    7c06:	930b      	str	r3, [sp, #44]	; 0x2c
    7c08:	002b      	movs	r3, r5
    7c0a:	4295      	cmp	r5, r2
    7c0c:	dd00      	ble.n	7c10 <_strtod_l+0x700>
    7c0e:	0013      	movs	r3, r2
    7c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7c12:	4293      	cmp	r3, r2
    7c14:	dd00      	ble.n	7c18 <_strtod_l+0x708>
    7c16:	0013      	movs	r3, r2
    7c18:	2b00      	cmp	r3, #0
    7c1a:	dd06      	ble.n	7c2a <_strtod_l+0x71a>
    7c1c:	9a08      	ldr	r2, [sp, #32]
    7c1e:	1aed      	subs	r5, r5, r3
    7c20:	1ad2      	subs	r2, r2, r3
    7c22:	9208      	str	r2, [sp, #32]
    7c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7c26:	1ad2      	subs	r2, r2, r3
    7c28:	920b      	str	r2, [sp, #44]	; 0x2c
    7c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7c2c:	2b00      	cmp	r3, #0
    7c2e:	d017      	beq.n	7c60 <_strtod_l+0x750>
    7c30:	001a      	movs	r2, r3
    7c32:	9905      	ldr	r1, [sp, #20]
    7c34:	9804      	ldr	r0, [sp, #16]
    7c36:	f001 f903 	bl	8e40 <__pow5mult>
    7c3a:	9005      	str	r0, [sp, #20]
    7c3c:	2800      	cmp	r0, #0
    7c3e:	d100      	bne.n	7c42 <_strtod_l+0x732>
    7c40:	e6c1      	b.n	79c6 <_strtod_l+0x4b6>
    7c42:	0001      	movs	r1, r0
    7c44:	9a20      	ldr	r2, [sp, #128]	; 0x80
    7c46:	9804      	ldr	r0, [sp, #16]
    7c48:	f001 f86a 	bl	8d20 <__multiply>
    7c4c:	901b      	str	r0, [sp, #108]	; 0x6c
    7c4e:	2800      	cmp	r0, #0
    7c50:	d100      	bne.n	7c54 <_strtod_l+0x744>
    7c52:	e6b8      	b.n	79c6 <_strtod_l+0x4b6>
    7c54:	9920      	ldr	r1, [sp, #128]	; 0x80
    7c56:	9804      	ldr	r0, [sp, #16]
    7c58:	f000 ff7c 	bl	8b54 <_Bfree>
    7c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7c5e:	9320      	str	r3, [sp, #128]	; 0x80
    7c60:	9b08      	ldr	r3, [sp, #32]
    7c62:	2b00      	cmp	r3, #0
    7c64:	dc73      	bgt.n	7d4e <_strtod_l+0x83e>
    7c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7c68:	2b00      	cmp	r3, #0
    7c6a:	d179      	bne.n	7d60 <_strtod_l+0x850>
    7c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c6e:	2b00      	cmp	r3, #0
    7c70:	dd08      	ble.n	7c84 <_strtod_l+0x774>
    7c72:	001a      	movs	r2, r3
    7c74:	9907      	ldr	r1, [sp, #28]
    7c76:	9804      	ldr	r0, [sp, #16]
    7c78:	f001 f934 	bl	8ee4 <__lshift>
    7c7c:	9007      	str	r0, [sp, #28]
    7c7e:	2800      	cmp	r0, #0
    7c80:	d100      	bne.n	7c84 <_strtod_l+0x774>
    7c82:	e6a0      	b.n	79c6 <_strtod_l+0x4b6>
    7c84:	2d00      	cmp	r5, #0
    7c86:	dd08      	ble.n	7c9a <_strtod_l+0x78a>
    7c88:	002a      	movs	r2, r5
    7c8a:	9905      	ldr	r1, [sp, #20]
    7c8c:	9804      	ldr	r0, [sp, #16]
    7c8e:	f001 f929 	bl	8ee4 <__lshift>
    7c92:	9005      	str	r0, [sp, #20]
    7c94:	2800      	cmp	r0, #0
    7c96:	d100      	bne.n	7c9a <_strtod_l+0x78a>
    7c98:	e695      	b.n	79c6 <_strtod_l+0x4b6>
    7c9a:	9a07      	ldr	r2, [sp, #28]
    7c9c:	9920      	ldr	r1, [sp, #128]	; 0x80
    7c9e:	9804      	ldr	r0, [sp, #16]
    7ca0:	f001 f98a 	bl	8fb8 <__mdiff>
    7ca4:	1e04      	subs	r4, r0, #0
    7ca6:	d100      	bne.n	7caa <_strtod_l+0x79a>
    7ca8:	e68d      	b.n	79c6 <_strtod_l+0x4b6>
    7caa:	2500      	movs	r5, #0
    7cac:	68c3      	ldr	r3, [r0, #12]
    7cae:	9905      	ldr	r1, [sp, #20]
    7cb0:	60c5      	str	r5, [r0, #12]
    7cb2:	930b      	str	r3, [sp, #44]	; 0x2c
    7cb4:	f001 f967 	bl	8f86 <__mcmp>
    7cb8:	42a8      	cmp	r0, r5
    7cba:	da5b      	bge.n	7d74 <_strtod_l+0x864>
    7cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7cbe:	42ab      	cmp	r3, r5
    7cc0:	d11b      	bne.n	7cfa <_strtod_l+0x7ea>
    7cc2:	42ae      	cmp	r6, r5
    7cc4:	d119      	bne.n	7cfa <_strtod_l+0x7ea>
    7cc6:	033b      	lsls	r3, r7, #12
    7cc8:	42ab      	cmp	r3, r5
    7cca:	d116      	bne.n	7cfa <_strtod_l+0x7ea>
    7ccc:	22d6      	movs	r2, #214	; 0xd6
    7cce:	4b55      	ldr	r3, [pc, #340]	; (7e24 <_strtod_l+0x914>)
    7cd0:	04d2      	lsls	r2, r2, #19
    7cd2:	403b      	ands	r3, r7
    7cd4:	4293      	cmp	r3, r2
    7cd6:	d910      	bls.n	7cfa <_strtod_l+0x7ea>
    7cd8:	6963      	ldr	r3, [r4, #20]
    7cda:	42ab      	cmp	r3, r5
    7cdc:	d102      	bne.n	7ce4 <_strtod_l+0x7d4>
    7cde:	6923      	ldr	r3, [r4, #16]
    7ce0:	2b01      	cmp	r3, #1
    7ce2:	dd0a      	ble.n	7cfa <_strtod_l+0x7ea>
    7ce4:	0021      	movs	r1, r4
    7ce6:	2201      	movs	r2, #1
    7ce8:	9804      	ldr	r0, [sp, #16]
    7cea:	f001 f8fb 	bl	8ee4 <__lshift>
    7cee:	9905      	ldr	r1, [sp, #20]
    7cf0:	0004      	movs	r4, r0
    7cf2:	f001 f948 	bl	8f86 <__mcmp>
    7cf6:	2800      	cmp	r0, #0
    7cf8:	dc6c      	bgt.n	7dd4 <_strtod_l+0x8c4>
    7cfa:	9b06      	ldr	r3, [sp, #24]
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d178      	bne.n	7df2 <_strtod_l+0x8e2>
    7d00:	e66a      	b.n	79d8 <_strtod_l+0x4c8>
    7d02:	2201      	movs	r2, #1
    7d04:	4214      	tst	r4, r2
    7d06:	d004      	beq.n	7d12 <_strtod_l+0x802>
    7d08:	682a      	ldr	r2, [r5, #0]
    7d0a:	686b      	ldr	r3, [r5, #4]
    7d0c:	f002 f980 	bl	a010 <__aeabi_dmul>
    7d10:	2301      	movs	r3, #1
    7d12:	1064      	asrs	r4, r4, #1
    7d14:	3508      	adds	r5, #8
    7d16:	e6ed      	b.n	7af4 <_strtod_l+0x5e4>
    7d18:	2101      	movs	r1, #1
    7d1a:	3b20      	subs	r3, #32
    7d1c:	4249      	negs	r1, r1
    7d1e:	4099      	lsls	r1, r3
    7d20:	400a      	ands	r2, r1
    7d22:	0017      	movs	r7, r2
    7d24:	e700      	b.n	7b28 <_strtod_l+0x618>
    7d26:	2201      	movs	r2, #1
    7d28:	4252      	negs	r2, r2
    7d2a:	409a      	lsls	r2, r3
    7d2c:	4016      	ands	r6, r2
    7d2e:	e6fb      	b.n	7b28 <_strtod_l+0x618>
    7d30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7d32:	9d15      	ldr	r5, [sp, #84]	; 0x54
    7d34:	1ad2      	subs	r2, r2, r3
    7d36:	4694      	mov	ip, r2
    7d38:	e749      	b.n	7bce <_strtod_l+0x6be>
    7d3a:	493b      	ldr	r1, [pc, #236]	; (7e28 <_strtod_l+0x918>)
    7d3c:	1acb      	subs	r3, r1, r3
    7d3e:	0001      	movs	r1, r0
    7d40:	4099      	lsls	r1, r3
    7d42:	910c      	str	r1, [sp, #48]	; 0x30
    7d44:	9014      	str	r0, [sp, #80]	; 0x50
    7d46:	e757      	b.n	7bf8 <_strtod_l+0x6e8>
    7d48:	2300      	movs	r3, #0
    7d4a:	930c      	str	r3, [sp, #48]	; 0x30
    7d4c:	e7fa      	b.n	7d44 <_strtod_l+0x834>
    7d4e:	9a08      	ldr	r2, [sp, #32]
    7d50:	9920      	ldr	r1, [sp, #128]	; 0x80
    7d52:	9804      	ldr	r0, [sp, #16]
    7d54:	f001 f8c6 	bl	8ee4 <__lshift>
    7d58:	9020      	str	r0, [sp, #128]	; 0x80
    7d5a:	2800      	cmp	r0, #0
    7d5c:	d183      	bne.n	7c66 <_strtod_l+0x756>
    7d5e:	e632      	b.n	79c6 <_strtod_l+0x4b6>
    7d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7d62:	9907      	ldr	r1, [sp, #28]
    7d64:	9804      	ldr	r0, [sp, #16]
    7d66:	f001 f86b 	bl	8e40 <__pow5mult>
    7d6a:	9007      	str	r0, [sp, #28]
    7d6c:	2800      	cmp	r0, #0
    7d6e:	d000      	beq.n	7d72 <_strtod_l+0x862>
    7d70:	e77c      	b.n	7c6c <_strtod_l+0x75c>
    7d72:	e628      	b.n	79c6 <_strtod_l+0x4b6>
    7d74:	2800      	cmp	r0, #0
    7d76:	d000      	beq.n	7d7a <_strtod_l+0x86a>
    7d78:	e095      	b.n	7ea6 <_strtod_l+0x996>
    7d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7d7c:	033b      	lsls	r3, r7, #12
    7d7e:	2a00      	cmp	r2, #0
    7d80:	d024      	beq.n	7dcc <_strtod_l+0x8bc>
    7d82:	492a      	ldr	r1, [pc, #168]	; (7e2c <_strtod_l+0x91c>)
    7d84:	003a      	movs	r2, r7
    7d86:	0b1b      	lsrs	r3, r3, #12
    7d88:	428b      	cmp	r3, r1
    7d8a:	d15e      	bne.n	7e4a <_strtod_l+0x93a>
    7d8c:	9b06      	ldr	r3, [sp, #24]
    7d8e:	3801      	subs	r0, #1
    7d90:	46b4      	mov	ip, r6
    7d92:	0001      	movs	r1, r0
    7d94:	2b00      	cmp	r3, #0
    7d96:	d00a      	beq.n	7dae <_strtod_l+0x89e>
    7d98:	25d4      	movs	r5, #212	; 0xd4
    7d9a:	4b22      	ldr	r3, [pc, #136]	; (7e24 <_strtod_l+0x914>)
    7d9c:	04ed      	lsls	r5, r5, #19
    7d9e:	403b      	ands	r3, r7
    7da0:	42ab      	cmp	r3, r5
    7da2:	d804      	bhi.n	7dae <_strtod_l+0x89e>
    7da4:	316c      	adds	r1, #108	; 0x6c
    7da6:	0d1b      	lsrs	r3, r3, #20
    7da8:	1acb      	subs	r3, r1, r3
    7daa:	0001      	movs	r1, r0
    7dac:	4099      	lsls	r1, r3
    7dae:	4561      	cmp	r1, ip
    7db0:	d14b      	bne.n	7e4a <_strtod_l+0x93a>
    7db2:	4b1f      	ldr	r3, [pc, #124]	; (7e30 <_strtod_l+0x920>)
    7db4:	429a      	cmp	r2, r3
    7db6:	d102      	bne.n	7dbe <_strtod_l+0x8ae>
    7db8:	1c4b      	adds	r3, r1, #1
    7dba:	d100      	bne.n	7dbe <_strtod_l+0x8ae>
    7dbc:	e603      	b.n	79c6 <_strtod_l+0x4b6>
    7dbe:	4b19      	ldr	r3, [pc, #100]	; (7e24 <_strtod_l+0x914>)
    7dc0:	2600      	movs	r6, #0
    7dc2:	401a      	ands	r2, r3
    7dc4:	2380      	movs	r3, #128	; 0x80
    7dc6:	035b      	lsls	r3, r3, #13
    7dc8:	18d7      	adds	r7, r2, r3
    7dca:	e796      	b.n	7cfa <_strtod_l+0x7ea>
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d13c      	bne.n	7e4a <_strtod_l+0x93a>
    7dd0:	2e00      	cmp	r6, #0
    7dd2:	d13a      	bne.n	7e4a <_strtod_l+0x93a>
    7dd4:	9a06      	ldr	r2, [sp, #24]
    7dd6:	4b13      	ldr	r3, [pc, #76]	; (7e24 <_strtod_l+0x914>)
    7dd8:	2a00      	cmp	r2, #0
    7dda:	d02d      	beq.n	7e38 <_strtod_l+0x928>
    7ddc:	001a      	movs	r2, r3
    7dde:	21d6      	movs	r1, #214	; 0xd6
    7de0:	403a      	ands	r2, r7
    7de2:	04c9      	lsls	r1, r1, #19
    7de4:	428a      	cmp	r2, r1
    7de6:	dc27      	bgt.n	7e38 <_strtod_l+0x928>
    7de8:	23dc      	movs	r3, #220	; 0xdc
    7dea:	049b      	lsls	r3, r3, #18
    7dec:	429a      	cmp	r2, r3
    7dee:	dc00      	bgt.n	7df2 <_strtod_l+0x8e2>
    7df0:	e658      	b.n	7aa4 <_strtod_l+0x594>
    7df2:	4b10      	ldr	r3, [pc, #64]	; (7e34 <_strtod_l+0x924>)
    7df4:	0030      	movs	r0, r6
    7df6:	9311      	str	r3, [sp, #68]	; 0x44
    7df8:	2300      	movs	r3, #0
    7dfa:	9310      	str	r3, [sp, #64]	; 0x40
    7dfc:	0039      	movs	r1, r7
    7dfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7e02:	f002 f905 	bl	a010 <__aeabi_dmul>
    7e06:	0006      	movs	r6, r0
    7e08:	1e0f      	subs	r7, r1, #0
    7e0a:	d000      	beq.n	7e0e <_strtod_l+0x8fe>
    7e0c:	e5e4      	b.n	79d8 <_strtod_l+0x4c8>
    7e0e:	2800      	cmp	r0, #0
    7e10:	d000      	beq.n	7e14 <_strtod_l+0x904>
    7e12:	e5e1      	b.n	79d8 <_strtod_l+0x4c8>
    7e14:	2322      	movs	r3, #34	; 0x22
    7e16:	9a04      	ldr	r2, [sp, #16]
    7e18:	6013      	str	r3, [r2, #0]
    7e1a:	e5dd      	b.n	79d8 <_strtod_l+0x4c8>
    7e1c:	0000a938 	.word	0x0000a938
    7e20:	fffffc02 	.word	0xfffffc02
    7e24:	7ff00000 	.word	0x7ff00000
    7e28:	fffffbe2 	.word	0xfffffbe2
    7e2c:	000fffff 	.word	0x000fffff
    7e30:	7fefffff 	.word	0x7fefffff
    7e34:	39500000 	.word	0x39500000
    7e38:	2601      	movs	r6, #1
    7e3a:	4aa9      	ldr	r2, [pc, #676]	; (80e0 <_strtod_l+0xbd0>)
    7e3c:	403b      	ands	r3, r7
    7e3e:	189b      	adds	r3, r3, r2
    7e40:	4aa8      	ldr	r2, [pc, #672]	; (80e4 <_strtod_l+0xbd4>)
    7e42:	4276      	negs	r6, r6
    7e44:	431a      	orrs	r2, r3
    7e46:	0017      	movs	r7, r2
    7e48:	e757      	b.n	7cfa <_strtod_l+0x7ea>
    7e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d013      	beq.n	7e78 <_strtod_l+0x968>
    7e50:	423b      	tst	r3, r7
    7e52:	d100      	bne.n	7e56 <_strtod_l+0x946>
    7e54:	e751      	b.n	7cfa <_strtod_l+0x7ea>
    7e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e58:	9a06      	ldr	r2, [sp, #24]
    7e5a:	0030      	movs	r0, r6
    7e5c:	0039      	movs	r1, r7
    7e5e:	2b00      	cmp	r3, #0
    7e60:	d00f      	beq.n	7e82 <_strtod_l+0x972>
    7e62:	f7ff fb3d 	bl	74e0 <sulp>
    7e66:	0002      	movs	r2, r0
    7e68:	000b      	movs	r3, r1
    7e6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    7e6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7e6e:	f7fe f96d 	bl	614c <__aeabi_dadd>
    7e72:	0006      	movs	r6, r0
    7e74:	000f      	movs	r7, r1
    7e76:	e740      	b.n	7cfa <_strtod_l+0x7ea>
    7e78:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7e7a:	4233      	tst	r3, r6
    7e7c:	d100      	bne.n	7e80 <_strtod_l+0x970>
    7e7e:	e73c      	b.n	7cfa <_strtod_l+0x7ea>
    7e80:	e7e9      	b.n	7e56 <_strtod_l+0x946>
    7e82:	f7ff fb2d 	bl	74e0 <sulp>
    7e86:	0002      	movs	r2, r0
    7e88:	000b      	movs	r3, r1
    7e8a:	980e      	ldr	r0, [sp, #56]	; 0x38
    7e8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7e8e:	f7fe fd6d 	bl	696c <__aeabi_dsub>
    7e92:	2200      	movs	r2, #0
    7e94:	2300      	movs	r3, #0
    7e96:	0006      	movs	r6, r0
    7e98:	000f      	movs	r7, r1
    7e9a:	f7fd fb69 	bl	5570 <__aeabi_dcmpeq>
    7e9e:	2800      	cmp	r0, #0
    7ea0:	d000      	beq.n	7ea4 <_strtod_l+0x994>
    7ea2:	e5ff      	b.n	7aa4 <_strtod_l+0x594>
    7ea4:	e729      	b.n	7cfa <_strtod_l+0x7ea>
    7ea6:	9905      	ldr	r1, [sp, #20]
    7ea8:	0020      	movs	r0, r4
    7eaa:	f001 f9af 	bl	920c <__ratio>
    7eae:	2380      	movs	r3, #128	; 0x80
    7eb0:	2200      	movs	r2, #0
    7eb2:	05db      	lsls	r3, r3, #23
    7eb4:	9008      	str	r0, [sp, #32]
    7eb6:	9109      	str	r1, [sp, #36]	; 0x24
    7eb8:	f7fd fb6a 	bl	5590 <__aeabi_dcmple>
    7ebc:	2800      	cmp	r0, #0
    7ebe:	d075      	beq.n	7fac <_strtod_l+0xa9c>
    7ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d043      	beq.n	7f4e <_strtod_l+0xa3e>
    7ec6:	2200      	movs	r2, #0
    7ec8:	4b87      	ldr	r3, [pc, #540]	; (80e8 <_strtod_l+0xbd8>)
    7eca:	920c      	str	r2, [sp, #48]	; 0x30
    7ecc:	930d      	str	r3, [sp, #52]	; 0x34
    7ece:	4b86      	ldr	r3, [pc, #536]	; (80e8 <_strtod_l+0xbd8>)
    7ed0:	9308      	str	r3, [sp, #32]
    7ed2:	4b86      	ldr	r3, [pc, #536]	; (80ec <_strtod_l+0xbdc>)
    7ed4:	403b      	ands	r3, r7
    7ed6:	9314      	str	r3, [sp, #80]	; 0x50
    7ed8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7eda:	4b85      	ldr	r3, [pc, #532]	; (80f0 <_strtod_l+0xbe0>)
    7edc:	429a      	cmp	r2, r3
    7ede:	d000      	beq.n	7ee2 <_strtod_l+0x9d2>
    7ee0:	e0b1      	b.n	8046 <_strtod_l+0xb36>
    7ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ee6:	9210      	str	r2, [sp, #64]	; 0x40
    7ee8:	9311      	str	r3, [sp, #68]	; 0x44
    7eea:	4b82      	ldr	r3, [pc, #520]	; (80f4 <_strtod_l+0xbe4>)
    7eec:	0030      	movs	r0, r6
    7eee:	18ff      	adds	r7, r7, r3
    7ef0:	0039      	movs	r1, r7
    7ef2:	f001 f8c5 	bl	9080 <__ulp>
    7ef6:	0002      	movs	r2, r0
    7ef8:	000b      	movs	r3, r1
    7efa:	980c      	ldr	r0, [sp, #48]	; 0x30
    7efc:	990d      	ldr	r1, [sp, #52]	; 0x34
    7efe:	f002 f887 	bl	a010 <__aeabi_dmul>
    7f02:	0032      	movs	r2, r6
    7f04:	003b      	movs	r3, r7
    7f06:	f7fe f921 	bl	614c <__aeabi_dadd>
    7f0a:	4a78      	ldr	r2, [pc, #480]	; (80ec <_strtod_l+0xbdc>)
    7f0c:	4b7a      	ldr	r3, [pc, #488]	; (80f8 <_strtod_l+0xbe8>)
    7f0e:	0006      	movs	r6, r0
    7f10:	400a      	ands	r2, r1
    7f12:	429a      	cmp	r2, r3
    7f14:	d962      	bls.n	7fdc <_strtod_l+0xacc>
    7f16:	4b79      	ldr	r3, [pc, #484]	; (80fc <_strtod_l+0xbec>)
    7f18:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7f1a:	429a      	cmp	r2, r3
    7f1c:	d103      	bne.n	7f26 <_strtod_l+0xa16>
    7f1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7f20:	3301      	adds	r3, #1
    7f22:	d100      	bne.n	7f26 <_strtod_l+0xa16>
    7f24:	e54f      	b.n	79c6 <_strtod_l+0x4b6>
    7f26:	2601      	movs	r6, #1
    7f28:	4f74      	ldr	r7, [pc, #464]	; (80fc <_strtod_l+0xbec>)
    7f2a:	4276      	negs	r6, r6
    7f2c:	9920      	ldr	r1, [sp, #128]	; 0x80
    7f2e:	9804      	ldr	r0, [sp, #16]
    7f30:	f000 fe10 	bl	8b54 <_Bfree>
    7f34:	9907      	ldr	r1, [sp, #28]
    7f36:	9804      	ldr	r0, [sp, #16]
    7f38:	f000 fe0c 	bl	8b54 <_Bfree>
    7f3c:	9905      	ldr	r1, [sp, #20]
    7f3e:	9804      	ldr	r0, [sp, #16]
    7f40:	f000 fe08 	bl	8b54 <_Bfree>
    7f44:	0021      	movs	r1, r4
    7f46:	9804      	ldr	r0, [sp, #16]
    7f48:	f000 fe04 	bl	8b54 <_Bfree>
    7f4c:	e60d      	b.n	7b6a <_strtod_l+0x65a>
    7f4e:	2e00      	cmp	r6, #0
    7f50:	d11d      	bne.n	7f8e <_strtod_l+0xa7e>
    7f52:	033b      	lsls	r3, r7, #12
    7f54:	d120      	bne.n	7f98 <_strtod_l+0xa88>
    7f56:	9808      	ldr	r0, [sp, #32]
    7f58:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f5a:	2200      	movs	r2, #0
    7f5c:	4b62      	ldr	r3, [pc, #392]	; (80e8 <_strtod_l+0xbd8>)
    7f5e:	f7fd fb0d 	bl	557c <__aeabi_dcmplt>
    7f62:	2800      	cmp	r0, #0
    7f64:	d11e      	bne.n	7fa4 <_strtod_l+0xa94>
    7f66:	9808      	ldr	r0, [sp, #32]
    7f68:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f6a:	2200      	movs	r2, #0
    7f6c:	4b64      	ldr	r3, [pc, #400]	; (8100 <_strtod_l+0xbf0>)
    7f6e:	f002 f84f 	bl	a010 <__aeabi_dmul>
    7f72:	0005      	movs	r5, r0
    7f74:	9108      	str	r1, [sp, #32]
    7f76:	2280      	movs	r2, #128	; 0x80
    7f78:	0612      	lsls	r2, r2, #24
    7f7a:	4694      	mov	ip, r2
    7f7c:	9b08      	ldr	r3, [sp, #32]
    7f7e:	951c      	str	r5, [sp, #112]	; 0x70
    7f80:	4463      	add	r3, ip
    7f82:	931d      	str	r3, [sp, #116]	; 0x74
    7f84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7f86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7f88:	920c      	str	r2, [sp, #48]	; 0x30
    7f8a:	930d      	str	r3, [sp, #52]	; 0x34
    7f8c:	e7a1      	b.n	7ed2 <_strtod_l+0x9c2>
    7f8e:	2e01      	cmp	r6, #1
    7f90:	d102      	bne.n	7f98 <_strtod_l+0xa88>
    7f92:	2f00      	cmp	r7, #0
    7f94:	d100      	bne.n	7f98 <_strtod_l+0xa88>
    7f96:	e585      	b.n	7aa4 <_strtod_l+0x594>
    7f98:	2200      	movs	r2, #0
    7f9a:	4b5a      	ldr	r3, [pc, #360]	; (8104 <_strtod_l+0xbf4>)
    7f9c:	2500      	movs	r5, #0
    7f9e:	920c      	str	r2, [sp, #48]	; 0x30
    7fa0:	930d      	str	r3, [sp, #52]	; 0x34
    7fa2:	e794      	b.n	7ece <_strtod_l+0x9be>
    7fa4:	4b56      	ldr	r3, [pc, #344]	; (8100 <_strtod_l+0xbf0>)
    7fa6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7fa8:	9308      	str	r3, [sp, #32]
    7faa:	e7e4      	b.n	7f76 <_strtod_l+0xa66>
    7fac:	4b54      	ldr	r3, [pc, #336]	; (8100 <_strtod_l+0xbf0>)
    7fae:	9808      	ldr	r0, [sp, #32]
    7fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
    7fb2:	2200      	movs	r2, #0
    7fb4:	f002 f82c 	bl	a010 <__aeabi_dmul>
    7fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7fba:	0005      	movs	r5, r0
    7fbc:	9108      	str	r1, [sp, #32]
    7fbe:	2b00      	cmp	r3, #0
    7fc0:	d107      	bne.n	7fd2 <_strtod_l+0xac2>
    7fc2:	2380      	movs	r3, #128	; 0x80
    7fc4:	061b      	lsls	r3, r3, #24
    7fc6:	18cb      	adds	r3, r1, r3
    7fc8:	9016      	str	r0, [sp, #88]	; 0x58
    7fca:	9317      	str	r3, [sp, #92]	; 0x5c
    7fcc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7fd0:	e7da      	b.n	7f88 <_strtod_l+0xa78>
    7fd2:	0002      	movs	r2, r0
    7fd4:	9b08      	ldr	r3, [sp, #32]
    7fd6:	9216      	str	r2, [sp, #88]	; 0x58
    7fd8:	9317      	str	r3, [sp, #92]	; 0x5c
    7fda:	e7f7      	b.n	7fcc <_strtod_l+0xabc>
    7fdc:	23d4      	movs	r3, #212	; 0xd4
    7fde:	049b      	lsls	r3, r3, #18
    7fe0:	18cf      	adds	r7, r1, r3
    7fe2:	9b06      	ldr	r3, [sp, #24]
    7fe4:	2b00      	cmp	r3, #0
    7fe6:	d1a1      	bne.n	7f2c <_strtod_l+0xa1c>
    7fe8:	4b40      	ldr	r3, [pc, #256]	; (80ec <_strtod_l+0xbdc>)
    7fea:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7fec:	970c      	str	r7, [sp, #48]	; 0x30
    7fee:	403b      	ands	r3, r7
    7ff0:	429a      	cmp	r2, r3
    7ff2:	d19b      	bne.n	7f2c <_strtod_l+0xa1c>
    7ff4:	9908      	ldr	r1, [sp, #32]
    7ff6:	0028      	movs	r0, r5
    7ff8:	f7fe ffce 	bl	6f98 <__aeabi_d2iz>
    7ffc:	f002 fa88 	bl	a510 <__aeabi_i2d>
    8000:	000b      	movs	r3, r1
    8002:	0002      	movs	r2, r0
    8004:	9908      	ldr	r1, [sp, #32]
    8006:	0028      	movs	r0, r5
    8008:	f7fe fcb0 	bl	696c <__aeabi_dsub>
    800c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    800e:	9008      	str	r0, [sp, #32]
    8010:	9109      	str	r1, [sp, #36]	; 0x24
    8012:	2b00      	cmp	r3, #0
    8014:	d104      	bne.n	8020 <_strtod_l+0xb10>
    8016:	2e00      	cmp	r6, #0
    8018:	d102      	bne.n	8020 <_strtod_l+0xb10>
    801a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    801c:	031b      	lsls	r3, r3, #12
    801e:	d058      	beq.n	80d2 <_strtod_l+0xbc2>
    8020:	9808      	ldr	r0, [sp, #32]
    8022:	9909      	ldr	r1, [sp, #36]	; 0x24
    8024:	4a38      	ldr	r2, [pc, #224]	; (8108 <_strtod_l+0xbf8>)
    8026:	4b39      	ldr	r3, [pc, #228]	; (810c <_strtod_l+0xbfc>)
    8028:	f7fd faa8 	bl	557c <__aeabi_dcmplt>
    802c:	2800      	cmp	r0, #0
    802e:	d000      	beq.n	8032 <_strtod_l+0xb22>
    8030:	e4d2      	b.n	79d8 <_strtod_l+0x4c8>
    8032:	9808      	ldr	r0, [sp, #32]
    8034:	9909      	ldr	r1, [sp, #36]	; 0x24
    8036:	4a36      	ldr	r2, [pc, #216]	; (8110 <_strtod_l+0xc00>)
    8038:	4b31      	ldr	r3, [pc, #196]	; (8100 <_strtod_l+0xbf0>)
    803a:	f7fd fab3 	bl	55a4 <__aeabi_dcmpgt>
    803e:	2800      	cmp	r0, #0
    8040:	d100      	bne.n	8044 <_strtod_l+0xb34>
    8042:	e773      	b.n	7f2c <_strtod_l+0xa1c>
    8044:	e4c8      	b.n	79d8 <_strtod_l+0x4c8>
    8046:	9b06      	ldr	r3, [sp, #24]
    8048:	2b00      	cmp	r3, #0
    804a:	d02a      	beq.n	80a2 <_strtod_l+0xb92>
    804c:	23d4      	movs	r3, #212	; 0xd4
    804e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8050:	04db      	lsls	r3, r3, #19
    8052:	429a      	cmp	r2, r3
    8054:	d825      	bhi.n	80a2 <_strtod_l+0xb92>
    8056:	4a2f      	ldr	r2, [pc, #188]	; (8114 <_strtod_l+0xc04>)
    8058:	4b2f      	ldr	r3, [pc, #188]	; (8118 <_strtod_l+0xc08>)
    805a:	0028      	movs	r0, r5
    805c:	9908      	ldr	r1, [sp, #32]
    805e:	f7fd fa97 	bl	5590 <__aeabi_dcmple>
    8062:	2800      	cmp	r0, #0
    8064:	d016      	beq.n	8094 <_strtod_l+0xb84>
    8066:	0028      	movs	r0, r5
    8068:	9908      	ldr	r1, [sp, #32]
    806a:	f7fd fb3f 	bl	56ec <__aeabi_d2uiz>
    806e:	2800      	cmp	r0, #0
    8070:	d100      	bne.n	8074 <_strtod_l+0xb64>
    8072:	3001      	adds	r0, #1
    8074:	f7fe ffc4 	bl	7000 <__aeabi_ui2d>
    8078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    807a:	0005      	movs	r5, r0
    807c:	9108      	str	r1, [sp, #32]
    807e:	2b00      	cmp	r3, #0
    8080:	d122      	bne.n	80c8 <_strtod_l+0xbb8>
    8082:	2380      	movs	r3, #128	; 0x80
    8084:	061b      	lsls	r3, r3, #24
    8086:	18cb      	adds	r3, r1, r3
    8088:	9018      	str	r0, [sp, #96]	; 0x60
    808a:	9319      	str	r3, [sp, #100]	; 0x64
    808c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    808e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8090:	920c      	str	r2, [sp, #48]	; 0x30
    8092:	930d      	str	r3, [sp, #52]	; 0x34
    8094:	22d6      	movs	r2, #214	; 0xd6
    8096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8098:	04d2      	lsls	r2, r2, #19
    809a:	189b      	adds	r3, r3, r2
    809c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    809e:	1a9b      	subs	r3, r3, r2
    80a0:	930d      	str	r3, [sp, #52]	; 0x34
    80a2:	980e      	ldr	r0, [sp, #56]	; 0x38
    80a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    80a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    80a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    80aa:	f000 ffe9 	bl	9080 <__ulp>
    80ae:	0002      	movs	r2, r0
    80b0:	000b      	movs	r3, r1
    80b2:	0030      	movs	r0, r6
    80b4:	0039      	movs	r1, r7
    80b6:	f001 ffab 	bl	a010 <__aeabi_dmul>
    80ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    80bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80be:	f7fe f845 	bl	614c <__aeabi_dadd>
    80c2:	0006      	movs	r6, r0
    80c4:	000f      	movs	r7, r1
    80c6:	e78c      	b.n	7fe2 <_strtod_l+0xad2>
    80c8:	0002      	movs	r2, r0
    80ca:	9b08      	ldr	r3, [sp, #32]
    80cc:	9218      	str	r2, [sp, #96]	; 0x60
    80ce:	9319      	str	r3, [sp, #100]	; 0x64
    80d0:	e7dc      	b.n	808c <_strtod_l+0xb7c>
    80d2:	4a0d      	ldr	r2, [pc, #52]	; (8108 <_strtod_l+0xbf8>)
    80d4:	4b11      	ldr	r3, [pc, #68]	; (811c <_strtod_l+0xc0c>)
    80d6:	9808      	ldr	r0, [sp, #32]
    80d8:	9909      	ldr	r1, [sp, #36]	; 0x24
    80da:	f7fd fa4f 	bl	557c <__aeabi_dcmplt>
    80de:	e7ae      	b.n	803e <_strtod_l+0xb2e>
    80e0:	fff00000 	.word	0xfff00000
    80e4:	000fffff 	.word	0x000fffff
    80e8:	3ff00000 	.word	0x3ff00000
    80ec:	7ff00000 	.word	0x7ff00000
    80f0:	7fe00000 	.word	0x7fe00000
    80f4:	fcb00000 	.word	0xfcb00000
    80f8:	7c9fffff 	.word	0x7c9fffff
    80fc:	7fefffff 	.word	0x7fefffff
    8100:	3fe00000 	.word	0x3fe00000
    8104:	bff00000 	.word	0xbff00000
    8108:	94a03595 	.word	0x94a03595
    810c:	3fdfffff 	.word	0x3fdfffff
    8110:	35afe535 	.word	0x35afe535
    8114:	ffc00000 	.word	0xffc00000
    8118:	41dfffff 	.word	0x41dfffff
    811c:	3fcfffff 	.word	0x3fcfffff

00008120 <strtod>:
    8120:	4b06      	ldr	r3, [pc, #24]	; (813c <strtod+0x1c>)
    8122:	b510      	push	{r4, lr}
    8124:	0004      	movs	r4, r0
    8126:	6818      	ldr	r0, [r3, #0]
    8128:	000a      	movs	r2, r1
    812a:	6a03      	ldr	r3, [r0, #32]
    812c:	2b00      	cmp	r3, #0
    812e:	d100      	bne.n	8132 <strtod+0x12>
    8130:	4b03      	ldr	r3, [pc, #12]	; (8140 <strtod+0x20>)
    8132:	0021      	movs	r1, r4
    8134:	f7ff f9ec 	bl	7510 <_strtod_l>
    8138:	bd10      	pop	{r4, pc}
    813a:	46c0      	nop			; (mov r8, r8)
    813c:	200000d8 	.word	0x200000d8
    8140:	2000013c 	.word	0x2000013c

00008144 <strtok>:
    8144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8146:	4b12      	ldr	r3, [pc, #72]	; (8190 <strtok+0x4c>)
    8148:	0006      	movs	r6, r0
    814a:	681d      	ldr	r5, [r3, #0]
    814c:	000f      	movs	r7, r1
    814e:	6dac      	ldr	r4, [r5, #88]	; 0x58
    8150:	2c00      	cmp	r4, #0
    8152:	d116      	bne.n	8182 <strtok+0x3e>
    8154:	2050      	movs	r0, #80	; 0x50
    8156:	f7ff f897 	bl	7288 <malloc>
    815a:	65a8      	str	r0, [r5, #88]	; 0x58
    815c:	6004      	str	r4, [r0, #0]
    815e:	6044      	str	r4, [r0, #4]
    8160:	6084      	str	r4, [r0, #8]
    8162:	60c4      	str	r4, [r0, #12]
    8164:	6104      	str	r4, [r0, #16]
    8166:	6144      	str	r4, [r0, #20]
    8168:	6184      	str	r4, [r0, #24]
    816a:	6284      	str	r4, [r0, #40]	; 0x28
    816c:	62c4      	str	r4, [r0, #44]	; 0x2c
    816e:	6304      	str	r4, [r0, #48]	; 0x30
    8170:	6344      	str	r4, [r0, #52]	; 0x34
    8172:	6384      	str	r4, [r0, #56]	; 0x38
    8174:	63c4      	str	r4, [r0, #60]	; 0x3c
    8176:	6404      	str	r4, [r0, #64]	; 0x40
    8178:	6444      	str	r4, [r0, #68]	; 0x44
    817a:	6484      	str	r4, [r0, #72]	; 0x48
    817c:	64c4      	str	r4, [r0, #76]	; 0x4c
    817e:	7704      	strb	r4, [r0, #28]
    8180:	6244      	str	r4, [r0, #36]	; 0x24
    8182:	6daa      	ldr	r2, [r5, #88]	; 0x58
    8184:	0039      	movs	r1, r7
    8186:	0030      	movs	r0, r6
    8188:	2301      	movs	r3, #1
    818a:	f000 f803 	bl	8194 <__strtok_r>
    818e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8190:	200000d8 	.word	0x200000d8

00008194 <__strtok_r>:
    8194:	b5f0      	push	{r4, r5, r6, r7, lr}
    8196:	2800      	cmp	r0, #0
    8198:	d104      	bne.n	81a4 <__strtok_r+0x10>
    819a:	6810      	ldr	r0, [r2, #0]
    819c:	2800      	cmp	r0, #0
    819e:	d101      	bne.n	81a4 <__strtok_r+0x10>
    81a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81a2:	0020      	movs	r0, r4
    81a4:	000e      	movs	r6, r1
    81a6:	7805      	ldrb	r5, [r0, #0]
    81a8:	1c44      	adds	r4, r0, #1
    81aa:	7837      	ldrb	r7, [r6, #0]
    81ac:	2f00      	cmp	r7, #0
    81ae:	d104      	bne.n	81ba <__strtok_r+0x26>
    81b0:	2d00      	cmp	r5, #0
    81b2:	d110      	bne.n	81d6 <__strtok_r+0x42>
    81b4:	6015      	str	r5, [r2, #0]
    81b6:	0028      	movs	r0, r5
    81b8:	e7f2      	b.n	81a0 <__strtok_r+0xc>
    81ba:	3601      	adds	r6, #1
    81bc:	42bd      	cmp	r5, r7
    81be:	d1f4      	bne.n	81aa <__strtok_r+0x16>
    81c0:	2b00      	cmp	r3, #0
    81c2:	d1ee      	bne.n	81a2 <__strtok_r+0xe>
    81c4:	6014      	str	r4, [r2, #0]
    81c6:	7003      	strb	r3, [r0, #0]
    81c8:	e7ea      	b.n	81a0 <__strtok_r+0xc>
    81ca:	0033      	movs	r3, r6
    81cc:	e00e      	b.n	81ec <__strtok_r+0x58>
    81ce:	3501      	adds	r5, #1
    81d0:	001c      	movs	r4, r3
    81d2:	2f00      	cmp	r7, #0
    81d4:	d102      	bne.n	81dc <__strtok_r+0x48>
    81d6:	000d      	movs	r5, r1
    81d8:	7826      	ldrb	r6, [r4, #0]
    81da:	1c63      	adds	r3, r4, #1
    81dc:	782f      	ldrb	r7, [r5, #0]
    81de:	42be      	cmp	r6, r7
    81e0:	d1f5      	bne.n	81ce <__strtok_r+0x3a>
    81e2:	2e00      	cmp	r6, #0
    81e4:	d0f1      	beq.n	81ca <__strtok_r+0x36>
    81e6:	2400      	movs	r4, #0
    81e8:	1e59      	subs	r1, r3, #1
    81ea:	700c      	strb	r4, [r1, #0]
    81ec:	6013      	str	r3, [r2, #0]
    81ee:	e7d7      	b.n	81a0 <__strtok_r+0xc>

000081f0 <_strtol_l.isra.0>:
    81f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    81f2:	001f      	movs	r7, r3
    81f4:	000e      	movs	r6, r1
    81f6:	b087      	sub	sp, #28
    81f8:	9005      	str	r0, [sp, #20]
    81fa:	9103      	str	r1, [sp, #12]
    81fc:	9202      	str	r2, [sp, #8]
    81fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    8200:	7834      	ldrb	r4, [r6, #0]
    8202:	f000 fc56 	bl	8ab2 <__locale_ctype_ptr_l>
    8206:	2208      	movs	r2, #8
    8208:	1900      	adds	r0, r0, r4
    820a:	7843      	ldrb	r3, [r0, #1]
    820c:	1c75      	adds	r5, r6, #1
    820e:	4013      	ands	r3, r2
    8210:	d10c      	bne.n	822c <_strtol_l.isra.0+0x3c>
    8212:	2c2d      	cmp	r4, #45	; 0x2d
    8214:	d10c      	bne.n	8230 <_strtol_l.isra.0+0x40>
    8216:	3301      	adds	r3, #1
    8218:	782c      	ldrb	r4, [r5, #0]
    821a:	9301      	str	r3, [sp, #4]
    821c:	1cb5      	adds	r5, r6, #2
    821e:	2f00      	cmp	r7, #0
    8220:	d00c      	beq.n	823c <_strtol_l.isra.0+0x4c>
    8222:	2f10      	cmp	r7, #16
    8224:	d114      	bne.n	8250 <_strtol_l.isra.0+0x60>
    8226:	2c30      	cmp	r4, #48	; 0x30
    8228:	d00a      	beq.n	8240 <_strtol_l.isra.0+0x50>
    822a:	e011      	b.n	8250 <_strtol_l.isra.0+0x60>
    822c:	002e      	movs	r6, r5
    822e:	e7e6      	b.n	81fe <_strtol_l.isra.0+0xe>
    8230:	9301      	str	r3, [sp, #4]
    8232:	2c2b      	cmp	r4, #43	; 0x2b
    8234:	d1f3      	bne.n	821e <_strtol_l.isra.0+0x2e>
    8236:	782c      	ldrb	r4, [r5, #0]
    8238:	1cb5      	adds	r5, r6, #2
    823a:	e7f0      	b.n	821e <_strtol_l.isra.0+0x2e>
    823c:	2c30      	cmp	r4, #48	; 0x30
    823e:	d12f      	bne.n	82a0 <_strtol_l.isra.0+0xb0>
    8240:	2220      	movs	r2, #32
    8242:	782b      	ldrb	r3, [r5, #0]
    8244:	4393      	bics	r3, r2
    8246:	2b58      	cmp	r3, #88	; 0x58
    8248:	d151      	bne.n	82ee <_strtol_l.isra.0+0xfe>
    824a:	2710      	movs	r7, #16
    824c:	786c      	ldrb	r4, [r5, #1]
    824e:	3502      	adds	r5, #2
    8250:	9b01      	ldr	r3, [sp, #4]
    8252:	4a29      	ldr	r2, [pc, #164]	; (82f8 <_strtol_l.isra.0+0x108>)
    8254:	0039      	movs	r1, r7
    8256:	189e      	adds	r6, r3, r2
    8258:	0030      	movs	r0, r6
    825a:	f7fd f889 	bl	5370 <__aeabi_uidivmod>
    825e:	0030      	movs	r0, r6
    8260:	9104      	str	r1, [sp, #16]
    8262:	0039      	movs	r1, r7
    8264:	f7fc fffe 	bl	5264 <__udivsi3>
    8268:	2101      	movs	r1, #1
    826a:	2300      	movs	r3, #0
    826c:	4249      	negs	r1, r1
    826e:	0002      	movs	r2, r0
    8270:	468c      	mov	ip, r1
    8272:	0018      	movs	r0, r3
    8274:	0021      	movs	r1, r4
    8276:	3930      	subs	r1, #48	; 0x30
    8278:	2909      	cmp	r1, #9
    827a:	d813      	bhi.n	82a4 <_strtol_l.isra.0+0xb4>
    827c:	000c      	movs	r4, r1
    827e:	42a7      	cmp	r7, r4
    8280:	dd1c      	ble.n	82bc <_strtol_l.isra.0+0xcc>
    8282:	1c59      	adds	r1, r3, #1
    8284:	d009      	beq.n	829a <_strtol_l.isra.0+0xaa>
    8286:	4663      	mov	r3, ip
    8288:	4282      	cmp	r2, r0
    828a:	d306      	bcc.n	829a <_strtol_l.isra.0+0xaa>
    828c:	d102      	bne.n	8294 <_strtol_l.isra.0+0xa4>
    828e:	9904      	ldr	r1, [sp, #16]
    8290:	42a1      	cmp	r1, r4
    8292:	db02      	blt.n	829a <_strtol_l.isra.0+0xaa>
    8294:	2301      	movs	r3, #1
    8296:	4378      	muls	r0, r7
    8298:	1820      	adds	r0, r4, r0
    829a:	782c      	ldrb	r4, [r5, #0]
    829c:	3501      	adds	r5, #1
    829e:	e7e9      	b.n	8274 <_strtol_l.isra.0+0x84>
    82a0:	270a      	movs	r7, #10
    82a2:	e7d5      	b.n	8250 <_strtol_l.isra.0+0x60>
    82a4:	0021      	movs	r1, r4
    82a6:	3941      	subs	r1, #65	; 0x41
    82a8:	2919      	cmp	r1, #25
    82aa:	d801      	bhi.n	82b0 <_strtol_l.isra.0+0xc0>
    82ac:	3c37      	subs	r4, #55	; 0x37
    82ae:	e7e6      	b.n	827e <_strtol_l.isra.0+0x8e>
    82b0:	0021      	movs	r1, r4
    82b2:	3961      	subs	r1, #97	; 0x61
    82b4:	2919      	cmp	r1, #25
    82b6:	d801      	bhi.n	82bc <_strtol_l.isra.0+0xcc>
    82b8:	3c57      	subs	r4, #87	; 0x57
    82ba:	e7e0      	b.n	827e <_strtol_l.isra.0+0x8e>
    82bc:	1c5a      	adds	r2, r3, #1
    82be:	d108      	bne.n	82d2 <_strtol_l.isra.0+0xe2>
    82c0:	9a05      	ldr	r2, [sp, #20]
    82c2:	3323      	adds	r3, #35	; 0x23
    82c4:	6013      	str	r3, [r2, #0]
    82c6:	9b02      	ldr	r3, [sp, #8]
    82c8:	0030      	movs	r0, r6
    82ca:	2b00      	cmp	r3, #0
    82cc:	d10b      	bne.n	82e6 <_strtol_l.isra.0+0xf6>
    82ce:	b007      	add	sp, #28
    82d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82d2:	9a01      	ldr	r2, [sp, #4]
    82d4:	2a00      	cmp	r2, #0
    82d6:	d000      	beq.n	82da <_strtol_l.isra.0+0xea>
    82d8:	4240      	negs	r0, r0
    82da:	9a02      	ldr	r2, [sp, #8]
    82dc:	2a00      	cmp	r2, #0
    82de:	d0f6      	beq.n	82ce <_strtol_l.isra.0+0xde>
    82e0:	9a03      	ldr	r2, [sp, #12]
    82e2:	2b00      	cmp	r3, #0
    82e4:	d000      	beq.n	82e8 <_strtol_l.isra.0+0xf8>
    82e6:	1e6a      	subs	r2, r5, #1
    82e8:	9b02      	ldr	r3, [sp, #8]
    82ea:	601a      	str	r2, [r3, #0]
    82ec:	e7ef      	b.n	82ce <_strtol_l.isra.0+0xde>
    82ee:	2430      	movs	r4, #48	; 0x30
    82f0:	2f00      	cmp	r7, #0
    82f2:	d1ad      	bne.n	8250 <_strtol_l.isra.0+0x60>
    82f4:	3708      	adds	r7, #8
    82f6:	e7ab      	b.n	8250 <_strtol_l.isra.0+0x60>
    82f8:	7fffffff 	.word	0x7fffffff

000082fc <strtol>:
    82fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    82fe:	0013      	movs	r3, r2
    8300:	4a06      	ldr	r2, [pc, #24]	; (831c <strtol+0x20>)
    8302:	0005      	movs	r5, r0
    8304:	6810      	ldr	r0, [r2, #0]
    8306:	6a04      	ldr	r4, [r0, #32]
    8308:	2c00      	cmp	r4, #0
    830a:	d100      	bne.n	830e <strtol+0x12>
    830c:	4c04      	ldr	r4, [pc, #16]	; (8320 <strtol+0x24>)
    830e:	000a      	movs	r2, r1
    8310:	9400      	str	r4, [sp, #0]
    8312:	0029      	movs	r1, r5
    8314:	f7ff ff6c 	bl	81f0 <_strtol_l.isra.0>
    8318:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    831a:	46c0      	nop			; (mov r8, r8)
    831c:	200000d8 	.word	0x200000d8
    8320:	2000013c 	.word	0x2000013c

00008324 <_strtoul_l.isra.0>:
    8324:	b5f0      	push	{r4, r5, r6, r7, lr}
    8326:	001f      	movs	r7, r3
    8328:	000e      	movs	r6, r1
    832a:	b087      	sub	sp, #28
    832c:	9005      	str	r0, [sp, #20]
    832e:	9103      	str	r1, [sp, #12]
    8330:	9201      	str	r2, [sp, #4]
    8332:	980c      	ldr	r0, [sp, #48]	; 0x30
    8334:	7834      	ldrb	r4, [r6, #0]
    8336:	f000 fbbc 	bl	8ab2 <__locale_ctype_ptr_l>
    833a:	2208      	movs	r2, #8
    833c:	1900      	adds	r0, r0, r4
    833e:	7843      	ldrb	r3, [r0, #1]
    8340:	1c75      	adds	r5, r6, #1
    8342:	4013      	ands	r3, r2
    8344:	d10c      	bne.n	8360 <_strtoul_l.isra.0+0x3c>
    8346:	2c2d      	cmp	r4, #45	; 0x2d
    8348:	d10c      	bne.n	8364 <_strtoul_l.isra.0+0x40>
    834a:	3301      	adds	r3, #1
    834c:	782c      	ldrb	r4, [r5, #0]
    834e:	9302      	str	r3, [sp, #8]
    8350:	1cb5      	adds	r5, r6, #2
    8352:	2f00      	cmp	r7, #0
    8354:	d00c      	beq.n	8370 <_strtoul_l.isra.0+0x4c>
    8356:	2f10      	cmp	r7, #16
    8358:	d114      	bne.n	8384 <_strtoul_l.isra.0+0x60>
    835a:	2c30      	cmp	r4, #48	; 0x30
    835c:	d00a      	beq.n	8374 <_strtoul_l.isra.0+0x50>
    835e:	e011      	b.n	8384 <_strtoul_l.isra.0+0x60>
    8360:	002e      	movs	r6, r5
    8362:	e7e6      	b.n	8332 <_strtoul_l.isra.0+0xe>
    8364:	9302      	str	r3, [sp, #8]
    8366:	2c2b      	cmp	r4, #43	; 0x2b
    8368:	d1f3      	bne.n	8352 <_strtoul_l.isra.0+0x2e>
    836a:	782c      	ldrb	r4, [r5, #0]
    836c:	1cb5      	adds	r5, r6, #2
    836e:	e7f0      	b.n	8352 <_strtoul_l.isra.0+0x2e>
    8370:	2c30      	cmp	r4, #48	; 0x30
    8372:	d12f      	bne.n	83d4 <_strtoul_l.isra.0+0xb0>
    8374:	2220      	movs	r2, #32
    8376:	782b      	ldrb	r3, [r5, #0]
    8378:	4393      	bics	r3, r2
    837a:	2b58      	cmp	r3, #88	; 0x58
    837c:	d154      	bne.n	8428 <_strtoul_l.isra.0+0x104>
    837e:	2710      	movs	r7, #16
    8380:	786c      	ldrb	r4, [r5, #1]
    8382:	3502      	adds	r5, #2
    8384:	2001      	movs	r0, #1
    8386:	0039      	movs	r1, r7
    8388:	4240      	negs	r0, r0
    838a:	f7fc ff6b 	bl	5264 <__udivsi3>
    838e:	0006      	movs	r6, r0
    8390:	2001      	movs	r0, #1
    8392:	0039      	movs	r1, r7
    8394:	4240      	negs	r0, r0
    8396:	f7fc ffeb 	bl	5370 <__aeabi_uidivmod>
    839a:	2300      	movs	r3, #0
    839c:	9104      	str	r1, [sp, #16]
    839e:	2101      	movs	r1, #1
    83a0:	2201      	movs	r2, #1
    83a2:	0018      	movs	r0, r3
    83a4:	468c      	mov	ip, r1
    83a6:	4252      	negs	r2, r2
    83a8:	0021      	movs	r1, r4
    83aa:	3930      	subs	r1, #48	; 0x30
    83ac:	2909      	cmp	r1, #9
    83ae:	d813      	bhi.n	83d8 <_strtoul_l.isra.0+0xb4>
    83b0:	000c      	movs	r4, r1
    83b2:	42a7      	cmp	r7, r4
    83b4:	dd1e      	ble.n	83f4 <_strtoul_l.isra.0+0xd0>
    83b6:	2b00      	cmp	r3, #0
    83b8:	db1a      	blt.n	83f0 <_strtoul_l.isra.0+0xcc>
    83ba:	0013      	movs	r3, r2
    83bc:	4286      	cmp	r6, r0
    83be:	d306      	bcc.n	83ce <_strtoul_l.isra.0+0xaa>
    83c0:	d102      	bne.n	83c8 <_strtoul_l.isra.0+0xa4>
    83c2:	9904      	ldr	r1, [sp, #16]
    83c4:	42a1      	cmp	r1, r4
    83c6:	db02      	blt.n	83ce <_strtoul_l.isra.0+0xaa>
    83c8:	4663      	mov	r3, ip
    83ca:	4378      	muls	r0, r7
    83cc:	1820      	adds	r0, r4, r0
    83ce:	782c      	ldrb	r4, [r5, #0]
    83d0:	3501      	adds	r5, #1
    83d2:	e7e9      	b.n	83a8 <_strtoul_l.isra.0+0x84>
    83d4:	270a      	movs	r7, #10
    83d6:	e7d5      	b.n	8384 <_strtoul_l.isra.0+0x60>
    83d8:	0021      	movs	r1, r4
    83da:	3941      	subs	r1, #65	; 0x41
    83dc:	2919      	cmp	r1, #25
    83de:	d801      	bhi.n	83e4 <_strtoul_l.isra.0+0xc0>
    83e0:	3c37      	subs	r4, #55	; 0x37
    83e2:	e7e6      	b.n	83b2 <_strtoul_l.isra.0+0x8e>
    83e4:	0021      	movs	r1, r4
    83e6:	3961      	subs	r1, #97	; 0x61
    83e8:	2919      	cmp	r1, #25
    83ea:	d803      	bhi.n	83f4 <_strtoul_l.isra.0+0xd0>
    83ec:	3c57      	subs	r4, #87	; 0x57
    83ee:	e7e0      	b.n	83b2 <_strtoul_l.isra.0+0x8e>
    83f0:	0013      	movs	r3, r2
    83f2:	e7ec      	b.n	83ce <_strtoul_l.isra.0+0xaa>
    83f4:	2b00      	cmp	r3, #0
    83f6:	da09      	bge.n	840c <_strtoul_l.isra.0+0xe8>
    83f8:	2322      	movs	r3, #34	; 0x22
    83fa:	2001      	movs	r0, #1
    83fc:	9a05      	ldr	r2, [sp, #20]
    83fe:	4240      	negs	r0, r0
    8400:	6013      	str	r3, [r2, #0]
    8402:	9b01      	ldr	r3, [sp, #4]
    8404:	2b00      	cmp	r3, #0
    8406:	d10b      	bne.n	8420 <_strtoul_l.isra.0+0xfc>
    8408:	b007      	add	sp, #28
    840a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    840c:	9a02      	ldr	r2, [sp, #8]
    840e:	2a00      	cmp	r2, #0
    8410:	d000      	beq.n	8414 <_strtoul_l.isra.0+0xf0>
    8412:	4240      	negs	r0, r0
    8414:	9a01      	ldr	r2, [sp, #4]
    8416:	2a00      	cmp	r2, #0
    8418:	d0f6      	beq.n	8408 <_strtoul_l.isra.0+0xe4>
    841a:	9a03      	ldr	r2, [sp, #12]
    841c:	2b00      	cmp	r3, #0
    841e:	d000      	beq.n	8422 <_strtoul_l.isra.0+0xfe>
    8420:	1e6a      	subs	r2, r5, #1
    8422:	9b01      	ldr	r3, [sp, #4]
    8424:	601a      	str	r2, [r3, #0]
    8426:	e7ef      	b.n	8408 <_strtoul_l.isra.0+0xe4>
    8428:	2430      	movs	r4, #48	; 0x30
    842a:	2f00      	cmp	r7, #0
    842c:	d1aa      	bne.n	8384 <_strtoul_l.isra.0+0x60>
    842e:	3708      	adds	r7, #8
    8430:	e7a8      	b.n	8384 <_strtoul_l.isra.0+0x60>
	...

00008434 <strtoul>:
    8434:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8436:	0013      	movs	r3, r2
    8438:	4a06      	ldr	r2, [pc, #24]	; (8454 <strtoul+0x20>)
    843a:	0005      	movs	r5, r0
    843c:	6810      	ldr	r0, [r2, #0]
    843e:	6a04      	ldr	r4, [r0, #32]
    8440:	2c00      	cmp	r4, #0
    8442:	d100      	bne.n	8446 <strtoul+0x12>
    8444:	4c04      	ldr	r4, [pc, #16]	; (8458 <strtoul+0x24>)
    8446:	000a      	movs	r2, r1
    8448:	9400      	str	r4, [sp, #0]
    844a:	0029      	movs	r1, r5
    844c:	f7ff ff6a 	bl	8324 <_strtoul_l.isra.0>
    8450:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    8452:	46c0      	nop			; (mov r8, r8)
    8454:	200000d8 	.word	0x200000d8
    8458:	2000013c 	.word	0x2000013c

0000845c <rshift>:
    845c:	b5f0      	push	{r4, r5, r6, r7, lr}
    845e:	0006      	movs	r6, r0
    8460:	6905      	ldr	r5, [r0, #16]
    8462:	3614      	adds	r6, #20
    8464:	114b      	asrs	r3, r1, #5
    8466:	0034      	movs	r4, r6
    8468:	42ab      	cmp	r3, r5
    846a:	da1a      	bge.n	84a2 <rshift+0x46>
    846c:	221f      	movs	r2, #31
    846e:	00ad      	lsls	r5, r5, #2
    8470:	009b      	lsls	r3, r3, #2
    8472:	1975      	adds	r5, r6, r5
    8474:	18f3      	adds	r3, r6, r3
    8476:	4011      	ands	r1, r2
    8478:	d107      	bne.n	848a <rshift+0x2e>
    847a:	001a      	movs	r2, r3
    847c:	0033      	movs	r3, r6
    847e:	001c      	movs	r4, r3
    8480:	4295      	cmp	r5, r2
    8482:	d90e      	bls.n	84a2 <rshift+0x46>
    8484:	ca02      	ldmia	r2!, {r1}
    8486:	c302      	stmia	r3!, {r1}
    8488:	e7f9      	b.n	847e <rshift+0x22>
    848a:	cb04      	ldmia	r3!, {r2}
    848c:	2720      	movs	r7, #32
    848e:	40ca      	lsrs	r2, r1
    8490:	46b4      	mov	ip, r6
    8492:	1a7f      	subs	r7, r7, r1
    8494:	4664      	mov	r4, ip
    8496:	429d      	cmp	r5, r3
    8498:	d809      	bhi.n	84ae <rshift+0x52>
    849a:	6022      	str	r2, [r4, #0]
    849c:	2a00      	cmp	r2, #0
    849e:	d000      	beq.n	84a2 <rshift+0x46>
    84a0:	3404      	adds	r4, #4
    84a2:	1ba3      	subs	r3, r4, r6
    84a4:	109b      	asrs	r3, r3, #2
    84a6:	6103      	str	r3, [r0, #16]
    84a8:	d100      	bne.n	84ac <rshift+0x50>
    84aa:	6143      	str	r3, [r0, #20]
    84ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84ae:	681c      	ldr	r4, [r3, #0]
    84b0:	40bc      	lsls	r4, r7
    84b2:	4322      	orrs	r2, r4
    84b4:	4664      	mov	r4, ip
    84b6:	c404      	stmia	r4!, {r2}
    84b8:	cb04      	ldmia	r3!, {r2}
    84ba:	46a4      	mov	ip, r4
    84bc:	40ca      	lsrs	r2, r1
    84be:	e7e9      	b.n	8494 <rshift+0x38>

000084c0 <__hexdig_fun>:
    84c0:	0003      	movs	r3, r0
    84c2:	3b30      	subs	r3, #48	; 0x30
    84c4:	2b09      	cmp	r3, #9
    84c6:	d803      	bhi.n	84d0 <__hexdig_fun+0x10>
    84c8:	3820      	subs	r0, #32
    84ca:	b2c3      	uxtb	r3, r0
    84cc:	0018      	movs	r0, r3
    84ce:	4770      	bx	lr
    84d0:	0003      	movs	r3, r0
    84d2:	3b61      	subs	r3, #97	; 0x61
    84d4:	2b05      	cmp	r3, #5
    84d6:	d801      	bhi.n	84dc <__hexdig_fun+0x1c>
    84d8:	3847      	subs	r0, #71	; 0x47
    84da:	e7f6      	b.n	84ca <__hexdig_fun+0xa>
    84dc:	0002      	movs	r2, r0
    84de:	3a41      	subs	r2, #65	; 0x41
    84e0:	2300      	movs	r3, #0
    84e2:	2a05      	cmp	r2, #5
    84e4:	d8f2      	bhi.n	84cc <__hexdig_fun+0xc>
    84e6:	3827      	subs	r0, #39	; 0x27
    84e8:	e7ef      	b.n	84ca <__hexdig_fun+0xa>

000084ea <__gethex>:
    84ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    84ec:	b08d      	sub	sp, #52	; 0x34
    84ee:	9005      	str	r0, [sp, #20]
    84f0:	9814      	ldr	r0, [sp, #80]	; 0x50
    84f2:	9109      	str	r1, [sp, #36]	; 0x24
    84f4:	9202      	str	r2, [sp, #8]
    84f6:	930a      	str	r3, [sp, #40]	; 0x28
    84f8:	f000 fade 	bl	8ab8 <__localeconv_l>
    84fc:	6803      	ldr	r3, [r0, #0]
    84fe:	0018      	movs	r0, r3
    8500:	9307      	str	r3, [sp, #28]
    8502:	f7fe ffe5 	bl	74d0 <strlen>
    8506:	2202      	movs	r2, #2
    8508:	9b07      	ldr	r3, [sp, #28]
    850a:	4252      	negs	r2, r2
    850c:	181b      	adds	r3, r3, r0
    850e:	3b01      	subs	r3, #1
    8510:	781b      	ldrb	r3, [r3, #0]
    8512:	9004      	str	r0, [sp, #16]
    8514:	930b      	str	r3, [sp, #44]	; 0x2c
    8516:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8518:	6819      	ldr	r1, [r3, #0]
    851a:	1c8b      	adds	r3, r1, #2
    851c:	1a52      	subs	r2, r2, r1
    851e:	18d1      	adds	r1, r2, r3
    8520:	9301      	str	r3, [sp, #4]
    8522:	9108      	str	r1, [sp, #32]
    8524:	9901      	ldr	r1, [sp, #4]
    8526:	3301      	adds	r3, #1
    8528:	7808      	ldrb	r0, [r1, #0]
    852a:	2830      	cmp	r0, #48	; 0x30
    852c:	d0f7      	beq.n	851e <__gethex+0x34>
    852e:	f7ff ffc7 	bl	84c0 <__hexdig_fun>
    8532:	1e07      	subs	r7, r0, #0
    8534:	d000      	beq.n	8538 <__gethex+0x4e>
    8536:	e06b      	b.n	8610 <__gethex+0x126>
    8538:	9a04      	ldr	r2, [sp, #16]
    853a:	9907      	ldr	r1, [sp, #28]
    853c:	9801      	ldr	r0, [sp, #4]
    853e:	f001 f9c1 	bl	98c4 <strncmp>
    8542:	2800      	cmp	r0, #0
    8544:	d000      	beq.n	8548 <__gethex+0x5e>
    8546:	e06b      	b.n	8620 <__gethex+0x136>
    8548:	9b01      	ldr	r3, [sp, #4]
    854a:	9a04      	ldr	r2, [sp, #16]
    854c:	189c      	adds	r4, r3, r2
    854e:	7820      	ldrb	r0, [r4, #0]
    8550:	f7ff ffb6 	bl	84c0 <__hexdig_fun>
    8554:	2800      	cmp	r0, #0
    8556:	d067      	beq.n	8628 <__gethex+0x13e>
    8558:	9401      	str	r4, [sp, #4]
    855a:	9b01      	ldr	r3, [sp, #4]
    855c:	7818      	ldrb	r0, [r3, #0]
    855e:	2830      	cmp	r0, #48	; 0x30
    8560:	d052      	beq.n	8608 <__gethex+0x11e>
    8562:	f7ff ffad 	bl	84c0 <__hexdig_fun>
    8566:	4243      	negs	r3, r0
    8568:	4143      	adcs	r3, r0
    856a:	9303      	str	r3, [sp, #12]
    856c:	2301      	movs	r3, #1
    856e:	0026      	movs	r6, r4
    8570:	9308      	str	r3, [sp, #32]
    8572:	9c01      	ldr	r4, [sp, #4]
    8574:	7820      	ldrb	r0, [r4, #0]
    8576:	f7ff ffa3 	bl	84c0 <__hexdig_fun>
    857a:	2800      	cmp	r0, #0
    857c:	d14c      	bne.n	8618 <__gethex+0x12e>
    857e:	9a04      	ldr	r2, [sp, #16]
    8580:	9907      	ldr	r1, [sp, #28]
    8582:	0020      	movs	r0, r4
    8584:	f001 f99e 	bl	98c4 <strncmp>
    8588:	2800      	cmp	r0, #0
    858a:	d109      	bne.n	85a0 <__gethex+0xb6>
    858c:	2e00      	cmp	r6, #0
    858e:	d109      	bne.n	85a4 <__gethex+0xba>
    8590:	9b04      	ldr	r3, [sp, #16]
    8592:	18e4      	adds	r4, r4, r3
    8594:	0026      	movs	r6, r4
    8596:	7820      	ldrb	r0, [r4, #0]
    8598:	f7ff ff92 	bl	84c0 <__hexdig_fun>
    859c:	2800      	cmp	r0, #0
    859e:	d13d      	bne.n	861c <__gethex+0x132>
    85a0:	1e37      	subs	r7, r6, #0
    85a2:	d001      	beq.n	85a8 <__gethex+0xbe>
    85a4:	1b37      	subs	r7, r6, r4
    85a6:	00bf      	lsls	r7, r7, #2
    85a8:	7823      	ldrb	r3, [r4, #0]
    85aa:	2b50      	cmp	r3, #80	; 0x50
    85ac:	d001      	beq.n	85b2 <__gethex+0xc8>
    85ae:	2b70      	cmp	r3, #112	; 0x70
    85b0:	d147      	bne.n	8642 <__gethex+0x158>
    85b2:	7863      	ldrb	r3, [r4, #1]
    85b4:	2b2b      	cmp	r3, #43	; 0x2b
    85b6:	d03d      	beq.n	8634 <__gethex+0x14a>
    85b8:	2b2d      	cmp	r3, #45	; 0x2d
    85ba:	d037      	beq.n	862c <__gethex+0x142>
    85bc:	2300      	movs	r3, #0
    85be:	1c66      	adds	r6, r4, #1
    85c0:	9306      	str	r3, [sp, #24]
    85c2:	7830      	ldrb	r0, [r6, #0]
    85c4:	f7ff ff7c 	bl	84c0 <__hexdig_fun>
    85c8:	1e43      	subs	r3, r0, #1
    85ca:	b2db      	uxtb	r3, r3
    85cc:	2b18      	cmp	r3, #24
    85ce:	d838      	bhi.n	8642 <__gethex+0x158>
    85d0:	3810      	subs	r0, #16
    85d2:	0005      	movs	r5, r0
    85d4:	3601      	adds	r6, #1
    85d6:	7830      	ldrb	r0, [r6, #0]
    85d8:	f7ff ff72 	bl	84c0 <__hexdig_fun>
    85dc:	1e43      	subs	r3, r0, #1
    85de:	b2db      	uxtb	r3, r3
    85e0:	2b18      	cmp	r3, #24
    85e2:	d929      	bls.n	8638 <__gethex+0x14e>
    85e4:	9b06      	ldr	r3, [sp, #24]
    85e6:	2b00      	cmp	r3, #0
    85e8:	d000      	beq.n	85ec <__gethex+0x102>
    85ea:	426d      	negs	r5, r5
    85ec:	197f      	adds	r7, r7, r5
    85ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    85f0:	601e      	str	r6, [r3, #0]
    85f2:	9b03      	ldr	r3, [sp, #12]
    85f4:	2b00      	cmp	r3, #0
    85f6:	d026      	beq.n	8646 <__gethex+0x15c>
    85f8:	2600      	movs	r6, #0
    85fa:	9b08      	ldr	r3, [sp, #32]
    85fc:	42b3      	cmp	r3, r6
    85fe:	d100      	bne.n	8602 <__gethex+0x118>
    8600:	3606      	adds	r6, #6
    8602:	0030      	movs	r0, r6
    8604:	b00d      	add	sp, #52	; 0x34
    8606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8608:	9b01      	ldr	r3, [sp, #4]
    860a:	3301      	adds	r3, #1
    860c:	9301      	str	r3, [sp, #4]
    860e:	e7a4      	b.n	855a <__gethex+0x70>
    8610:	2300      	movs	r3, #0
    8612:	9303      	str	r3, [sp, #12]
    8614:	001e      	movs	r6, r3
    8616:	e7ac      	b.n	8572 <__gethex+0x88>
    8618:	3401      	adds	r4, #1
    861a:	e7ab      	b.n	8574 <__gethex+0x8a>
    861c:	3401      	adds	r4, #1
    861e:	e7ba      	b.n	8596 <__gethex+0xac>
    8620:	9c01      	ldr	r4, [sp, #4]
    8622:	2301      	movs	r3, #1
    8624:	9303      	str	r3, [sp, #12]
    8626:	e7bf      	b.n	85a8 <__gethex+0xbe>
    8628:	0007      	movs	r7, r0
    862a:	e7fa      	b.n	8622 <__gethex+0x138>
    862c:	2301      	movs	r3, #1
    862e:	9306      	str	r3, [sp, #24]
    8630:	1ca6      	adds	r6, r4, #2
    8632:	e7c6      	b.n	85c2 <__gethex+0xd8>
    8634:	2300      	movs	r3, #0
    8636:	e7fa      	b.n	862e <__gethex+0x144>
    8638:	230a      	movs	r3, #10
    863a:	435d      	muls	r5, r3
    863c:	182d      	adds	r5, r5, r0
    863e:	3d10      	subs	r5, #16
    8640:	e7c8      	b.n	85d4 <__gethex+0xea>
    8642:	0026      	movs	r6, r4
    8644:	e7d3      	b.n	85ee <__gethex+0x104>
    8646:	9b01      	ldr	r3, [sp, #4]
    8648:	9903      	ldr	r1, [sp, #12]
    864a:	1ae3      	subs	r3, r4, r3
    864c:	3b01      	subs	r3, #1
    864e:	2b07      	cmp	r3, #7
    8650:	dc47      	bgt.n	86e2 <__gethex+0x1f8>
    8652:	9805      	ldr	r0, [sp, #20]
    8654:	f000 fa46 	bl	8ae4 <_Balloc>
    8658:	0003      	movs	r3, r0
    865a:	3314      	adds	r3, #20
    865c:	9303      	str	r3, [sp, #12]
    865e:	9308      	str	r3, [sp, #32]
    8660:	2300      	movs	r3, #0
    8662:	0005      	movs	r5, r0
    8664:	001e      	movs	r6, r3
    8666:	9306      	str	r3, [sp, #24]
    8668:	9b01      	ldr	r3, [sp, #4]
    866a:	42a3      	cmp	r3, r4
    866c:	d33c      	bcc.n	86e8 <__gethex+0x1fe>
    866e:	9c08      	ldr	r4, [sp, #32]
    8670:	9b03      	ldr	r3, [sp, #12]
    8672:	c440      	stmia	r4!, {r6}
    8674:	1ae4      	subs	r4, r4, r3
    8676:	10a4      	asrs	r4, r4, #2
    8678:	612c      	str	r4, [r5, #16]
    867a:	0030      	movs	r0, r6
    867c:	f000 fafe 	bl	8c7c <__hi0bits>
    8680:	9b02      	ldr	r3, [sp, #8]
    8682:	0164      	lsls	r4, r4, #5
    8684:	681b      	ldr	r3, [r3, #0]
    8686:	1a26      	subs	r6, r4, r0
    8688:	9301      	str	r3, [sp, #4]
    868a:	429e      	cmp	r6, r3
    868c:	dd5f      	ble.n	874e <__gethex+0x264>
    868e:	1af6      	subs	r6, r6, r3
    8690:	0031      	movs	r1, r6
    8692:	0028      	movs	r0, r5
    8694:	f000 fdf7 	bl	9286 <__any_on>
    8698:	1e04      	subs	r4, r0, #0
    869a:	d00f      	beq.n	86bc <__gethex+0x1d2>
    869c:	2401      	movs	r4, #1
    869e:	211f      	movs	r1, #31
    86a0:	0020      	movs	r0, r4
    86a2:	1e73      	subs	r3, r6, #1
    86a4:	4019      	ands	r1, r3
    86a6:	4088      	lsls	r0, r1
    86a8:	0001      	movs	r1, r0
    86aa:	115a      	asrs	r2, r3, #5
    86ac:	9803      	ldr	r0, [sp, #12]
    86ae:	0092      	lsls	r2, r2, #2
    86b0:	5812      	ldr	r2, [r2, r0]
    86b2:	420a      	tst	r2, r1
    86b4:	d002      	beq.n	86bc <__gethex+0x1d2>
    86b6:	42a3      	cmp	r3, r4
    86b8:	dc41      	bgt.n	873e <__gethex+0x254>
    86ba:	2402      	movs	r4, #2
    86bc:	0031      	movs	r1, r6
    86be:	0028      	movs	r0, r5
    86c0:	f7ff fecc 	bl	845c <rshift>
    86c4:	19bf      	adds	r7, r7, r6
    86c6:	9b02      	ldr	r3, [sp, #8]
    86c8:	689b      	ldr	r3, [r3, #8]
    86ca:	9304      	str	r3, [sp, #16]
    86cc:	429f      	cmp	r7, r3
    86ce:	dd4e      	ble.n	876e <__gethex+0x284>
    86d0:	0029      	movs	r1, r5
    86d2:	9805      	ldr	r0, [sp, #20]
    86d4:	f000 fa3e 	bl	8b54 <_Bfree>
    86d8:	2300      	movs	r3, #0
    86da:	9a12      	ldr	r2, [sp, #72]	; 0x48
    86dc:	26a3      	movs	r6, #163	; 0xa3
    86de:	6013      	str	r3, [r2, #0]
    86e0:	e78f      	b.n	8602 <__gethex+0x118>
    86e2:	3101      	adds	r1, #1
    86e4:	105b      	asrs	r3, r3, #1
    86e6:	e7b2      	b.n	864e <__gethex+0x164>
    86e8:	1e63      	subs	r3, r4, #1
    86ea:	9309      	str	r3, [sp, #36]	; 0x24
    86ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	4293      	cmp	r3, r2
    86f2:	d015      	beq.n	8720 <__gethex+0x236>
    86f4:	9b06      	ldr	r3, [sp, #24]
    86f6:	2b20      	cmp	r3, #32
    86f8:	d105      	bne.n	8706 <__gethex+0x21c>
    86fa:	9b08      	ldr	r3, [sp, #32]
    86fc:	601e      	str	r6, [r3, #0]
    86fe:	2600      	movs	r6, #0
    8700:	3304      	adds	r3, #4
    8702:	9308      	str	r3, [sp, #32]
    8704:	9606      	str	r6, [sp, #24]
    8706:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8708:	7818      	ldrb	r0, [r3, #0]
    870a:	f7ff fed9 	bl	84c0 <__hexdig_fun>
    870e:	230f      	movs	r3, #15
    8710:	4018      	ands	r0, r3
    8712:	9b06      	ldr	r3, [sp, #24]
    8714:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8716:	4098      	lsls	r0, r3
    8718:	3304      	adds	r3, #4
    871a:	4306      	orrs	r6, r0
    871c:	9306      	str	r3, [sp, #24]
    871e:	e7a3      	b.n	8668 <__gethex+0x17e>
    8720:	2301      	movs	r3, #1
    8722:	9a04      	ldr	r2, [sp, #16]
    8724:	1a9c      	subs	r4, r3, r2
    8726:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8728:	191c      	adds	r4, r3, r4
    872a:	9b01      	ldr	r3, [sp, #4]
    872c:	42a3      	cmp	r3, r4
    872e:	d8e1      	bhi.n	86f4 <__gethex+0x20a>
    8730:	9907      	ldr	r1, [sp, #28]
    8732:	0020      	movs	r0, r4
    8734:	f001 f8c6 	bl	98c4 <strncmp>
    8738:	2800      	cmp	r0, #0
    873a:	d095      	beq.n	8668 <__gethex+0x17e>
    873c:	e7da      	b.n	86f4 <__gethex+0x20a>
    873e:	1eb1      	subs	r1, r6, #2
    8740:	0028      	movs	r0, r5
    8742:	f000 fda0 	bl	9286 <__any_on>
    8746:	2800      	cmp	r0, #0
    8748:	d0b7      	beq.n	86ba <__gethex+0x1d0>
    874a:	2403      	movs	r4, #3
    874c:	e7b6      	b.n	86bc <__gethex+0x1d2>
    874e:	9b01      	ldr	r3, [sp, #4]
    8750:	2400      	movs	r4, #0
    8752:	429e      	cmp	r6, r3
    8754:	dab7      	bge.n	86c6 <__gethex+0x1dc>
    8756:	1b9e      	subs	r6, r3, r6
    8758:	0029      	movs	r1, r5
    875a:	0032      	movs	r2, r6
    875c:	9805      	ldr	r0, [sp, #20]
    875e:	f000 fbc1 	bl	8ee4 <__lshift>
    8762:	0003      	movs	r3, r0
    8764:	3314      	adds	r3, #20
    8766:	0005      	movs	r5, r0
    8768:	1bbf      	subs	r7, r7, r6
    876a:	9303      	str	r3, [sp, #12]
    876c:	e7ab      	b.n	86c6 <__gethex+0x1dc>
    876e:	9b02      	ldr	r3, [sp, #8]
    8770:	685e      	ldr	r6, [r3, #4]
    8772:	42b7      	cmp	r7, r6
    8774:	da6b      	bge.n	884e <__gethex+0x364>
    8776:	9b01      	ldr	r3, [sp, #4]
    8778:	1bf6      	subs	r6, r6, r7
    877a:	42b3      	cmp	r3, r6
    877c:	dc32      	bgt.n	87e4 <__gethex+0x2fa>
    877e:	9b02      	ldr	r3, [sp, #8]
    8780:	68db      	ldr	r3, [r3, #12]
    8782:	2b02      	cmp	r3, #2
    8784:	d026      	beq.n	87d4 <__gethex+0x2ea>
    8786:	2b03      	cmp	r3, #3
    8788:	d028      	beq.n	87dc <__gethex+0x2f2>
    878a:	2b01      	cmp	r3, #1
    878c:	d119      	bne.n	87c2 <__gethex+0x2d8>
    878e:	9b01      	ldr	r3, [sp, #4]
    8790:	42b3      	cmp	r3, r6
    8792:	d116      	bne.n	87c2 <__gethex+0x2d8>
    8794:	2b01      	cmp	r3, #1
    8796:	dc0d      	bgt.n	87b4 <__gethex+0x2ca>
    8798:	9b02      	ldr	r3, [sp, #8]
    879a:	2662      	movs	r6, #98	; 0x62
    879c:	685b      	ldr	r3, [r3, #4]
    879e:	9301      	str	r3, [sp, #4]
    87a0:	9a01      	ldr	r2, [sp, #4]
    87a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    87a4:	601a      	str	r2, [r3, #0]
    87a6:	2301      	movs	r3, #1
    87a8:	9a03      	ldr	r2, [sp, #12]
    87aa:	612b      	str	r3, [r5, #16]
    87ac:	6013      	str	r3, [r2, #0]
    87ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    87b0:	601d      	str	r5, [r3, #0]
    87b2:	e726      	b.n	8602 <__gethex+0x118>
    87b4:	9901      	ldr	r1, [sp, #4]
    87b6:	0028      	movs	r0, r5
    87b8:	3901      	subs	r1, #1
    87ba:	f000 fd64 	bl	9286 <__any_on>
    87be:	2800      	cmp	r0, #0
    87c0:	d1ea      	bne.n	8798 <__gethex+0x2ae>
    87c2:	0029      	movs	r1, r5
    87c4:	9805      	ldr	r0, [sp, #20]
    87c6:	f000 f9c5 	bl	8b54 <_Bfree>
    87ca:	2300      	movs	r3, #0
    87cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    87ce:	2650      	movs	r6, #80	; 0x50
    87d0:	6013      	str	r3, [r2, #0]
    87d2:	e716      	b.n	8602 <__gethex+0x118>
    87d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    87d6:	2b00      	cmp	r3, #0
    87d8:	d0de      	beq.n	8798 <__gethex+0x2ae>
    87da:	e7f2      	b.n	87c2 <__gethex+0x2d8>
    87dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    87de:	2b00      	cmp	r3, #0
    87e0:	d1da      	bne.n	8798 <__gethex+0x2ae>
    87e2:	e7ee      	b.n	87c2 <__gethex+0x2d8>
    87e4:	1e77      	subs	r7, r6, #1
    87e6:	2c00      	cmp	r4, #0
    87e8:	d12f      	bne.n	884a <__gethex+0x360>
    87ea:	2f00      	cmp	r7, #0
    87ec:	d004      	beq.n	87f8 <__gethex+0x30e>
    87ee:	0039      	movs	r1, r7
    87f0:	0028      	movs	r0, r5
    87f2:	f000 fd48 	bl	9286 <__any_on>
    87f6:	0004      	movs	r4, r0
    87f8:	231f      	movs	r3, #31
    87fa:	117a      	asrs	r2, r7, #5
    87fc:	401f      	ands	r7, r3
    87fe:	3b1e      	subs	r3, #30
    8800:	40bb      	lsls	r3, r7
    8802:	9903      	ldr	r1, [sp, #12]
    8804:	0092      	lsls	r2, r2, #2
    8806:	5852      	ldr	r2, [r2, r1]
    8808:	421a      	tst	r2, r3
    880a:	d001      	beq.n	8810 <__gethex+0x326>
    880c:	2302      	movs	r3, #2
    880e:	431c      	orrs	r4, r3
    8810:	9b01      	ldr	r3, [sp, #4]
    8812:	0031      	movs	r1, r6
    8814:	1b9b      	subs	r3, r3, r6
    8816:	2602      	movs	r6, #2
    8818:	0028      	movs	r0, r5
    881a:	9301      	str	r3, [sp, #4]
    881c:	f7ff fe1e 	bl	845c <rshift>
    8820:	9b02      	ldr	r3, [sp, #8]
    8822:	685f      	ldr	r7, [r3, #4]
    8824:	2c00      	cmp	r4, #0
    8826:	d041      	beq.n	88ac <__gethex+0x3c2>
    8828:	9b02      	ldr	r3, [sp, #8]
    882a:	68db      	ldr	r3, [r3, #12]
    882c:	2b02      	cmp	r3, #2
    882e:	d010      	beq.n	8852 <__gethex+0x368>
    8830:	2b03      	cmp	r3, #3
    8832:	d012      	beq.n	885a <__gethex+0x370>
    8834:	2b01      	cmp	r3, #1
    8836:	d106      	bne.n	8846 <__gethex+0x35c>
    8838:	07a2      	lsls	r2, r4, #30
    883a:	d504      	bpl.n	8846 <__gethex+0x35c>
    883c:	9a03      	ldr	r2, [sp, #12]
    883e:	6812      	ldr	r2, [r2, #0]
    8840:	4314      	orrs	r4, r2
    8842:	421c      	tst	r4, r3
    8844:	d10c      	bne.n	8860 <__gethex+0x376>
    8846:	2310      	movs	r3, #16
    8848:	e02f      	b.n	88aa <__gethex+0x3c0>
    884a:	2401      	movs	r4, #1
    884c:	e7d4      	b.n	87f8 <__gethex+0x30e>
    884e:	2601      	movs	r6, #1
    8850:	e7e8      	b.n	8824 <__gethex+0x33a>
    8852:	2301      	movs	r3, #1
    8854:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8856:	1a9b      	subs	r3, r3, r2
    8858:	9313      	str	r3, [sp, #76]	; 0x4c
    885a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    885c:	2b00      	cmp	r3, #0
    885e:	d0f2      	beq.n	8846 <__gethex+0x35c>
    8860:	692c      	ldr	r4, [r5, #16]
    8862:	00a3      	lsls	r3, r4, #2
    8864:	9304      	str	r3, [sp, #16]
    8866:	002b      	movs	r3, r5
    8868:	00a2      	lsls	r2, r4, #2
    886a:	3314      	adds	r3, #20
    886c:	1899      	adds	r1, r3, r2
    886e:	2200      	movs	r2, #0
    8870:	4694      	mov	ip, r2
    8872:	681a      	ldr	r2, [r3, #0]
    8874:	1c50      	adds	r0, r2, #1
    8876:	d01e      	beq.n	88b6 <__gethex+0x3cc>
    8878:	3201      	adds	r2, #1
    887a:	601a      	str	r2, [r3, #0]
    887c:	002b      	movs	r3, r5
    887e:	3314      	adds	r3, #20
    8880:	2e02      	cmp	r6, #2
    8882:	d13b      	bne.n	88fc <__gethex+0x412>
    8884:	9a02      	ldr	r2, [sp, #8]
    8886:	9901      	ldr	r1, [sp, #4]
    8888:	6812      	ldr	r2, [r2, #0]
    888a:	3a01      	subs	r2, #1
    888c:	4291      	cmp	r1, r2
    888e:	d10b      	bne.n	88a8 <__gethex+0x3be>
    8890:	114a      	asrs	r2, r1, #5
    8892:	211f      	movs	r1, #31
    8894:	9801      	ldr	r0, [sp, #4]
    8896:	0092      	lsls	r2, r2, #2
    8898:	4001      	ands	r1, r0
    889a:	2001      	movs	r0, #1
    889c:	0004      	movs	r4, r0
    889e:	408c      	lsls	r4, r1
    88a0:	58d3      	ldr	r3, [r2, r3]
    88a2:	4223      	tst	r3, r4
    88a4:	d000      	beq.n	88a8 <__gethex+0x3be>
    88a6:	2601      	movs	r6, #1
    88a8:	2320      	movs	r3, #32
    88aa:	431e      	orrs	r6, r3
    88ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    88ae:	601d      	str	r5, [r3, #0]
    88b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    88b2:	601f      	str	r7, [r3, #0]
    88b4:	e6a5      	b.n	8602 <__gethex+0x118>
    88b6:	4662      	mov	r2, ip
    88b8:	c304      	stmia	r3!, {r2}
    88ba:	4299      	cmp	r1, r3
    88bc:	d8d9      	bhi.n	8872 <__gethex+0x388>
    88be:	68ab      	ldr	r3, [r5, #8]
    88c0:	429c      	cmp	r4, r3
    88c2:	db12      	blt.n	88ea <__gethex+0x400>
    88c4:	686b      	ldr	r3, [r5, #4]
    88c6:	9805      	ldr	r0, [sp, #20]
    88c8:	1c59      	adds	r1, r3, #1
    88ca:	f000 f90b 	bl	8ae4 <_Balloc>
    88ce:	0029      	movs	r1, r5
    88d0:	692b      	ldr	r3, [r5, #16]
    88d2:	9003      	str	r0, [sp, #12]
    88d4:	1c9a      	adds	r2, r3, #2
    88d6:	0092      	lsls	r2, r2, #2
    88d8:	310c      	adds	r1, #12
    88da:	300c      	adds	r0, #12
    88dc:	f7fe fce8 	bl	72b0 <memcpy>
    88e0:	0029      	movs	r1, r5
    88e2:	9805      	ldr	r0, [sp, #20]
    88e4:	f000 f936 	bl	8b54 <_Bfree>
    88e8:	9d03      	ldr	r5, [sp, #12]
    88ea:	692b      	ldr	r3, [r5, #16]
    88ec:	1c5a      	adds	r2, r3, #1
    88ee:	612a      	str	r2, [r5, #16]
    88f0:	2201      	movs	r2, #1
    88f2:	3304      	adds	r3, #4
    88f4:	009b      	lsls	r3, r3, #2
    88f6:	18eb      	adds	r3, r5, r3
    88f8:	605a      	str	r2, [r3, #4]
    88fa:	e7bf      	b.n	887c <__gethex+0x392>
    88fc:	692a      	ldr	r2, [r5, #16]
    88fe:	4294      	cmp	r4, r2
    8900:	da0a      	bge.n	8918 <__gethex+0x42e>
    8902:	2101      	movs	r1, #1
    8904:	0028      	movs	r0, r5
    8906:	f7ff fda9 	bl	845c <rshift>
    890a:	9b02      	ldr	r3, [sp, #8]
    890c:	3701      	adds	r7, #1
    890e:	689b      	ldr	r3, [r3, #8]
    8910:	429f      	cmp	r7, r3
    8912:	dd00      	ble.n	8916 <__gethex+0x42c>
    8914:	e6dc      	b.n	86d0 <__gethex+0x1e6>
    8916:	e7c6      	b.n	88a6 <__gethex+0x3bc>
    8918:	241f      	movs	r4, #31
    891a:	9a01      	ldr	r2, [sp, #4]
    891c:	2601      	movs	r6, #1
    891e:	4022      	ands	r2, r4
    8920:	1e14      	subs	r4, r2, #0
    8922:	d0c1      	beq.n	88a8 <__gethex+0x3be>
    8924:	9a04      	ldr	r2, [sp, #16]
    8926:	189b      	adds	r3, r3, r2
    8928:	3b04      	subs	r3, #4
    892a:	6818      	ldr	r0, [r3, #0]
    892c:	f000 f9a6 	bl	8c7c <__hi0bits>
    8930:	2120      	movs	r1, #32
    8932:	1b0c      	subs	r4, r1, r4
    8934:	42a0      	cmp	r0, r4
    8936:	dbe4      	blt.n	8902 <__gethex+0x418>
    8938:	e7b6      	b.n	88a8 <__gethex+0x3be>

0000893a <L_shift>:
    893a:	2308      	movs	r3, #8
    893c:	b570      	push	{r4, r5, r6, lr}
    893e:	2520      	movs	r5, #32
    8940:	1a9a      	subs	r2, r3, r2
    8942:	0092      	lsls	r2, r2, #2
    8944:	1aad      	subs	r5, r5, r2
    8946:	6843      	ldr	r3, [r0, #4]
    8948:	6806      	ldr	r6, [r0, #0]
    894a:	001c      	movs	r4, r3
    894c:	40ac      	lsls	r4, r5
    894e:	40d3      	lsrs	r3, r2
    8950:	4334      	orrs	r4, r6
    8952:	c010      	stmia	r0!, {r4}
    8954:	6003      	str	r3, [r0, #0]
    8956:	4288      	cmp	r0, r1
    8958:	d3f5      	bcc.n	8946 <L_shift+0xc>
    895a:	bd70      	pop	{r4, r5, r6, pc}

0000895c <__match>:
    895c:	b530      	push	{r4, r5, lr}
    895e:	6803      	ldr	r3, [r0, #0]
    8960:	780c      	ldrb	r4, [r1, #0]
    8962:	3301      	adds	r3, #1
    8964:	2c00      	cmp	r4, #0
    8966:	d102      	bne.n	896e <__match+0x12>
    8968:	6003      	str	r3, [r0, #0]
    896a:	2001      	movs	r0, #1
    896c:	bd30      	pop	{r4, r5, pc}
    896e:	781a      	ldrb	r2, [r3, #0]
    8970:	0015      	movs	r5, r2
    8972:	3d41      	subs	r5, #65	; 0x41
    8974:	2d19      	cmp	r5, #25
    8976:	d800      	bhi.n	897a <__match+0x1e>
    8978:	3220      	adds	r2, #32
    897a:	3101      	adds	r1, #1
    897c:	42a2      	cmp	r2, r4
    897e:	d0ef      	beq.n	8960 <__match+0x4>
    8980:	2000      	movs	r0, #0
    8982:	e7f3      	b.n	896c <__match+0x10>

00008984 <__hexnan>:
    8984:	b5f0      	push	{r4, r5, r6, r7, lr}
    8986:	b08b      	sub	sp, #44	; 0x2c
    8988:	9201      	str	r2, [sp, #4]
    898a:	680a      	ldr	r2, [r1, #0]
    898c:	9901      	ldr	r1, [sp, #4]
    898e:	1153      	asrs	r3, r2, #5
    8990:	009b      	lsls	r3, r3, #2
    8992:	18cb      	adds	r3, r1, r3
    8994:	9303      	str	r3, [sp, #12]
    8996:	231f      	movs	r3, #31
    8998:	401a      	ands	r2, r3
    899a:	9008      	str	r0, [sp, #32]
    899c:	9206      	str	r2, [sp, #24]
    899e:	d002      	beq.n	89a6 <__hexnan+0x22>
    89a0:	9b03      	ldr	r3, [sp, #12]
    89a2:	3304      	adds	r3, #4
    89a4:	9303      	str	r3, [sp, #12]
    89a6:	9b03      	ldr	r3, [sp, #12]
    89a8:	2500      	movs	r5, #0
    89aa:	1f1e      	subs	r6, r3, #4
    89ac:	0037      	movs	r7, r6
    89ae:	0034      	movs	r4, r6
    89b0:	9b08      	ldr	r3, [sp, #32]
    89b2:	6035      	str	r5, [r6, #0]
    89b4:	681b      	ldr	r3, [r3, #0]
    89b6:	9507      	str	r5, [sp, #28]
    89b8:	9304      	str	r3, [sp, #16]
    89ba:	9502      	str	r5, [sp, #8]
    89bc:	9b04      	ldr	r3, [sp, #16]
    89be:	3301      	adds	r3, #1
    89c0:	9309      	str	r3, [sp, #36]	; 0x24
    89c2:	9b04      	ldr	r3, [sp, #16]
    89c4:	785b      	ldrb	r3, [r3, #1]
    89c6:	9305      	str	r3, [sp, #20]
    89c8:	2b00      	cmp	r3, #0
    89ca:	d028      	beq.n	8a1e <__hexnan+0x9a>
    89cc:	9805      	ldr	r0, [sp, #20]
    89ce:	f7ff fd77 	bl	84c0 <__hexdig_fun>
    89d2:	2800      	cmp	r0, #0
    89d4:	d145      	bne.n	8a62 <__hexnan+0xde>
    89d6:	9b05      	ldr	r3, [sp, #20]
    89d8:	2b20      	cmp	r3, #32
    89da:	d819      	bhi.n	8a10 <__hexnan+0x8c>
    89dc:	9b02      	ldr	r3, [sp, #8]
    89de:	9a07      	ldr	r2, [sp, #28]
    89e0:	4293      	cmp	r3, r2
    89e2:	dd12      	ble.n	8a0a <__hexnan+0x86>
    89e4:	42bc      	cmp	r4, r7
    89e6:	d206      	bcs.n	89f6 <__hexnan+0x72>
    89e8:	2d07      	cmp	r5, #7
    89ea:	dc04      	bgt.n	89f6 <__hexnan+0x72>
    89ec:	002a      	movs	r2, r5
    89ee:	0039      	movs	r1, r7
    89f0:	0020      	movs	r0, r4
    89f2:	f7ff ffa2 	bl	893a <L_shift>
    89f6:	9b01      	ldr	r3, [sp, #4]
    89f8:	2508      	movs	r5, #8
    89fa:	429c      	cmp	r4, r3
    89fc:	d905      	bls.n	8a0a <__hexnan+0x86>
    89fe:	1f27      	subs	r7, r4, #4
    8a00:	2500      	movs	r5, #0
    8a02:	003c      	movs	r4, r7
    8a04:	9b02      	ldr	r3, [sp, #8]
    8a06:	603d      	str	r5, [r7, #0]
    8a08:	9307      	str	r3, [sp, #28]
    8a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a0c:	9304      	str	r3, [sp, #16]
    8a0e:	e7d5      	b.n	89bc <__hexnan+0x38>
    8a10:	9b05      	ldr	r3, [sp, #20]
    8a12:	2b29      	cmp	r3, #41	; 0x29
    8a14:	d14a      	bne.n	8aac <__hexnan+0x128>
    8a16:	9b04      	ldr	r3, [sp, #16]
    8a18:	9a08      	ldr	r2, [sp, #32]
    8a1a:	3302      	adds	r3, #2
    8a1c:	6013      	str	r3, [r2, #0]
    8a1e:	9b02      	ldr	r3, [sp, #8]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d043      	beq.n	8aac <__hexnan+0x128>
    8a24:	42bc      	cmp	r4, r7
    8a26:	d206      	bcs.n	8a36 <__hexnan+0xb2>
    8a28:	2d07      	cmp	r5, #7
    8a2a:	dc04      	bgt.n	8a36 <__hexnan+0xb2>
    8a2c:	002a      	movs	r2, r5
    8a2e:	0039      	movs	r1, r7
    8a30:	0020      	movs	r0, r4
    8a32:	f7ff ff82 	bl	893a <L_shift>
    8a36:	9b01      	ldr	r3, [sp, #4]
    8a38:	429c      	cmp	r4, r3
    8a3a:	d926      	bls.n	8a8a <__hexnan+0x106>
    8a3c:	cc04      	ldmia	r4!, {r2}
    8a3e:	601a      	str	r2, [r3, #0]
    8a40:	3304      	adds	r3, #4
    8a42:	42a6      	cmp	r6, r4
    8a44:	d2fa      	bcs.n	8a3c <__hexnan+0xb8>
    8a46:	2200      	movs	r2, #0
    8a48:	c304      	stmia	r3!, {r2}
    8a4a:	429e      	cmp	r6, r3
    8a4c:	d2fc      	bcs.n	8a48 <__hexnan+0xc4>
    8a4e:	6833      	ldr	r3, [r6, #0]
    8a50:	2b00      	cmp	r3, #0
    8a52:	d104      	bne.n	8a5e <__hexnan+0xda>
    8a54:	9b01      	ldr	r3, [sp, #4]
    8a56:	429e      	cmp	r6, r3
    8a58:	d126      	bne.n	8aa8 <__hexnan+0x124>
    8a5a:	2301      	movs	r3, #1
    8a5c:	6033      	str	r3, [r6, #0]
    8a5e:	2005      	movs	r0, #5
    8a60:	e025      	b.n	8aae <__hexnan+0x12a>
    8a62:	9b02      	ldr	r3, [sp, #8]
    8a64:	3501      	adds	r5, #1
    8a66:	3301      	adds	r3, #1
    8a68:	9302      	str	r3, [sp, #8]
    8a6a:	2d08      	cmp	r5, #8
    8a6c:	dd06      	ble.n	8a7c <__hexnan+0xf8>
    8a6e:	9b01      	ldr	r3, [sp, #4]
    8a70:	429c      	cmp	r4, r3
    8a72:	d9ca      	bls.n	8a0a <__hexnan+0x86>
    8a74:	2300      	movs	r3, #0
    8a76:	2501      	movs	r5, #1
    8a78:	3c04      	subs	r4, #4
    8a7a:	6023      	str	r3, [r4, #0]
    8a7c:	220f      	movs	r2, #15
    8a7e:	6823      	ldr	r3, [r4, #0]
    8a80:	4010      	ands	r0, r2
    8a82:	011b      	lsls	r3, r3, #4
    8a84:	4318      	orrs	r0, r3
    8a86:	6020      	str	r0, [r4, #0]
    8a88:	e7bf      	b.n	8a0a <__hexnan+0x86>
    8a8a:	9b06      	ldr	r3, [sp, #24]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d0de      	beq.n	8a4e <__hexnan+0xca>
    8a90:	2120      	movs	r1, #32
    8a92:	9a06      	ldr	r2, [sp, #24]
    8a94:	9b03      	ldr	r3, [sp, #12]
    8a96:	1a89      	subs	r1, r1, r2
    8a98:	2201      	movs	r2, #1
    8a9a:	4252      	negs	r2, r2
    8a9c:	40ca      	lsrs	r2, r1
    8a9e:	3b04      	subs	r3, #4
    8aa0:	6819      	ldr	r1, [r3, #0]
    8aa2:	400a      	ands	r2, r1
    8aa4:	601a      	str	r2, [r3, #0]
    8aa6:	e7d2      	b.n	8a4e <__hexnan+0xca>
    8aa8:	3e04      	subs	r6, #4
    8aaa:	e7d0      	b.n	8a4e <__hexnan+0xca>
    8aac:	2004      	movs	r0, #4
    8aae:	b00b      	add	sp, #44	; 0x2c
    8ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008ab2 <__locale_ctype_ptr_l>:
    8ab2:	30ec      	adds	r0, #236	; 0xec
    8ab4:	6800      	ldr	r0, [r0, #0]
    8ab6:	4770      	bx	lr

00008ab8 <__localeconv_l>:
    8ab8:	30f0      	adds	r0, #240	; 0xf0
    8aba:	4770      	bx	lr

00008abc <__ascii_mbtowc>:
    8abc:	b082      	sub	sp, #8
    8abe:	2900      	cmp	r1, #0
    8ac0:	d100      	bne.n	8ac4 <__ascii_mbtowc+0x8>
    8ac2:	a901      	add	r1, sp, #4
    8ac4:	1e10      	subs	r0, r2, #0
    8ac6:	d006      	beq.n	8ad6 <__ascii_mbtowc+0x1a>
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d006      	beq.n	8ada <__ascii_mbtowc+0x1e>
    8acc:	7813      	ldrb	r3, [r2, #0]
    8ace:	600b      	str	r3, [r1, #0]
    8ad0:	7810      	ldrb	r0, [r2, #0]
    8ad2:	1e43      	subs	r3, r0, #1
    8ad4:	4198      	sbcs	r0, r3
    8ad6:	b002      	add	sp, #8
    8ad8:	4770      	bx	lr
    8ada:	2002      	movs	r0, #2
    8adc:	4240      	negs	r0, r0
    8ade:	e7fa      	b.n	8ad6 <__ascii_mbtowc+0x1a>

00008ae0 <__malloc_lock>:
    8ae0:	4770      	bx	lr

00008ae2 <__malloc_unlock>:
    8ae2:	4770      	bx	lr

00008ae4 <_Balloc>:
    8ae4:	b570      	push	{r4, r5, r6, lr}
    8ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
    8ae8:	0004      	movs	r4, r0
    8aea:	000d      	movs	r5, r1
    8aec:	2e00      	cmp	r6, #0
    8aee:	d107      	bne.n	8b00 <_Balloc+0x1c>
    8af0:	2010      	movs	r0, #16
    8af2:	f7fe fbc9 	bl	7288 <malloc>
    8af6:	6260      	str	r0, [r4, #36]	; 0x24
    8af8:	6046      	str	r6, [r0, #4]
    8afa:	6086      	str	r6, [r0, #8]
    8afc:	6006      	str	r6, [r0, #0]
    8afe:	60c6      	str	r6, [r0, #12]
    8b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
    8b02:	68f3      	ldr	r3, [r6, #12]
    8b04:	2b00      	cmp	r3, #0
    8b06:	d013      	beq.n	8b30 <_Balloc+0x4c>
    8b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b0a:	00aa      	lsls	r2, r5, #2
    8b0c:	68db      	ldr	r3, [r3, #12]
    8b0e:	189b      	adds	r3, r3, r2
    8b10:	6818      	ldr	r0, [r3, #0]
    8b12:	2800      	cmp	r0, #0
    8b14:	d118      	bne.n	8b48 <_Balloc+0x64>
    8b16:	2101      	movs	r1, #1
    8b18:	000e      	movs	r6, r1
    8b1a:	40ae      	lsls	r6, r5
    8b1c:	1d72      	adds	r2, r6, #5
    8b1e:	0092      	lsls	r2, r2, #2
    8b20:	0020      	movs	r0, r4
    8b22:	f000 fbd2 	bl	92ca <_calloc_r>
    8b26:	2800      	cmp	r0, #0
    8b28:	d00c      	beq.n	8b44 <_Balloc+0x60>
    8b2a:	6045      	str	r5, [r0, #4]
    8b2c:	6086      	str	r6, [r0, #8]
    8b2e:	e00d      	b.n	8b4c <_Balloc+0x68>
    8b30:	2221      	movs	r2, #33	; 0x21
    8b32:	2104      	movs	r1, #4
    8b34:	0020      	movs	r0, r4
    8b36:	f000 fbc8 	bl	92ca <_calloc_r>
    8b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b3c:	60f0      	str	r0, [r6, #12]
    8b3e:	68db      	ldr	r3, [r3, #12]
    8b40:	2b00      	cmp	r3, #0
    8b42:	d1e1      	bne.n	8b08 <_Balloc+0x24>
    8b44:	2000      	movs	r0, #0
    8b46:	bd70      	pop	{r4, r5, r6, pc}
    8b48:	6802      	ldr	r2, [r0, #0]
    8b4a:	601a      	str	r2, [r3, #0]
    8b4c:	2300      	movs	r3, #0
    8b4e:	6103      	str	r3, [r0, #16]
    8b50:	60c3      	str	r3, [r0, #12]
    8b52:	e7f8      	b.n	8b46 <_Balloc+0x62>

00008b54 <_Bfree>:
    8b54:	b570      	push	{r4, r5, r6, lr}
    8b56:	6a44      	ldr	r4, [r0, #36]	; 0x24
    8b58:	0006      	movs	r6, r0
    8b5a:	000d      	movs	r5, r1
    8b5c:	2c00      	cmp	r4, #0
    8b5e:	d107      	bne.n	8b70 <_Bfree+0x1c>
    8b60:	2010      	movs	r0, #16
    8b62:	f7fe fb91 	bl	7288 <malloc>
    8b66:	6270      	str	r0, [r6, #36]	; 0x24
    8b68:	6044      	str	r4, [r0, #4]
    8b6a:	6084      	str	r4, [r0, #8]
    8b6c:	6004      	str	r4, [r0, #0]
    8b6e:	60c4      	str	r4, [r0, #12]
    8b70:	2d00      	cmp	r5, #0
    8b72:	d007      	beq.n	8b84 <_Bfree+0x30>
    8b74:	6a73      	ldr	r3, [r6, #36]	; 0x24
    8b76:	686a      	ldr	r2, [r5, #4]
    8b78:	68db      	ldr	r3, [r3, #12]
    8b7a:	0092      	lsls	r2, r2, #2
    8b7c:	189b      	adds	r3, r3, r2
    8b7e:	681a      	ldr	r2, [r3, #0]
    8b80:	602a      	str	r2, [r5, #0]
    8b82:	601d      	str	r5, [r3, #0]
    8b84:	bd70      	pop	{r4, r5, r6, pc}

00008b86 <__multadd>:
    8b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8b88:	001e      	movs	r6, r3
    8b8a:	2314      	movs	r3, #20
    8b8c:	469c      	mov	ip, r3
    8b8e:	0007      	movs	r7, r0
    8b90:	000c      	movs	r4, r1
    8b92:	2000      	movs	r0, #0
    8b94:	690d      	ldr	r5, [r1, #16]
    8b96:	448c      	add	ip, r1
    8b98:	4663      	mov	r3, ip
    8b9a:	8819      	ldrh	r1, [r3, #0]
    8b9c:	681b      	ldr	r3, [r3, #0]
    8b9e:	4351      	muls	r1, r2
    8ba0:	0c1b      	lsrs	r3, r3, #16
    8ba2:	4353      	muls	r3, r2
    8ba4:	1989      	adds	r1, r1, r6
    8ba6:	0c0e      	lsrs	r6, r1, #16
    8ba8:	199b      	adds	r3, r3, r6
    8baa:	b289      	uxth	r1, r1
    8bac:	0c1e      	lsrs	r6, r3, #16
    8bae:	041b      	lsls	r3, r3, #16
    8bb0:	185b      	adds	r3, r3, r1
    8bb2:	4661      	mov	r1, ip
    8bb4:	3001      	adds	r0, #1
    8bb6:	c108      	stmia	r1!, {r3}
    8bb8:	468c      	mov	ip, r1
    8bba:	4285      	cmp	r5, r0
    8bbc:	dcec      	bgt.n	8b98 <__multadd+0x12>
    8bbe:	2e00      	cmp	r6, #0
    8bc0:	d01b      	beq.n	8bfa <__multadd+0x74>
    8bc2:	68a3      	ldr	r3, [r4, #8]
    8bc4:	429d      	cmp	r5, r3
    8bc6:	db12      	blt.n	8bee <__multadd+0x68>
    8bc8:	6863      	ldr	r3, [r4, #4]
    8bca:	0038      	movs	r0, r7
    8bcc:	1c59      	adds	r1, r3, #1
    8bce:	f7ff ff89 	bl	8ae4 <_Balloc>
    8bd2:	0021      	movs	r1, r4
    8bd4:	6923      	ldr	r3, [r4, #16]
    8bd6:	9001      	str	r0, [sp, #4]
    8bd8:	1c9a      	adds	r2, r3, #2
    8bda:	0092      	lsls	r2, r2, #2
    8bdc:	310c      	adds	r1, #12
    8bde:	300c      	adds	r0, #12
    8be0:	f7fe fb66 	bl	72b0 <memcpy>
    8be4:	0021      	movs	r1, r4
    8be6:	0038      	movs	r0, r7
    8be8:	f7ff ffb4 	bl	8b54 <_Bfree>
    8bec:	9c01      	ldr	r4, [sp, #4]
    8bee:	1d2b      	adds	r3, r5, #4
    8bf0:	009b      	lsls	r3, r3, #2
    8bf2:	18e3      	adds	r3, r4, r3
    8bf4:	3501      	adds	r5, #1
    8bf6:	605e      	str	r6, [r3, #4]
    8bf8:	6125      	str	r5, [r4, #16]
    8bfa:	0020      	movs	r0, r4
    8bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008bfe <__s2b>:
    8bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8c00:	0006      	movs	r6, r0
    8c02:	0018      	movs	r0, r3
    8c04:	000c      	movs	r4, r1
    8c06:	3008      	adds	r0, #8
    8c08:	2109      	movs	r1, #9
    8c0a:	9301      	str	r3, [sp, #4]
    8c0c:	0015      	movs	r5, r2
    8c0e:	f7fc fbb3 	bl	5378 <__divsi3>
    8c12:	2301      	movs	r3, #1
    8c14:	2100      	movs	r1, #0
    8c16:	4283      	cmp	r3, r0
    8c18:	db20      	blt.n	8c5c <__s2b+0x5e>
    8c1a:	0030      	movs	r0, r6
    8c1c:	f7ff ff62 	bl	8ae4 <_Balloc>
    8c20:	9b08      	ldr	r3, [sp, #32]
    8c22:	6143      	str	r3, [r0, #20]
    8c24:	2301      	movs	r3, #1
    8c26:	6103      	str	r3, [r0, #16]
    8c28:	2d09      	cmp	r5, #9
    8c2a:	dd1a      	ble.n	8c62 <__s2b+0x64>
    8c2c:	0023      	movs	r3, r4
    8c2e:	3309      	adds	r3, #9
    8c30:	001f      	movs	r7, r3
    8c32:	9300      	str	r3, [sp, #0]
    8c34:	1964      	adds	r4, r4, r5
    8c36:	783b      	ldrb	r3, [r7, #0]
    8c38:	0001      	movs	r1, r0
    8c3a:	3b30      	subs	r3, #48	; 0x30
    8c3c:	220a      	movs	r2, #10
    8c3e:	0030      	movs	r0, r6
    8c40:	3701      	adds	r7, #1
    8c42:	f7ff ffa0 	bl	8b86 <__multadd>
    8c46:	42a7      	cmp	r7, r4
    8c48:	d1f5      	bne.n	8c36 <__s2b+0x38>
    8c4a:	002c      	movs	r4, r5
    8c4c:	9b00      	ldr	r3, [sp, #0]
    8c4e:	3c08      	subs	r4, #8
    8c50:	191c      	adds	r4, r3, r4
    8c52:	002f      	movs	r7, r5
    8c54:	9b01      	ldr	r3, [sp, #4]
    8c56:	429f      	cmp	r7, r3
    8c58:	db06      	blt.n	8c68 <__s2b+0x6a>
    8c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8c5c:	005b      	lsls	r3, r3, #1
    8c5e:	3101      	adds	r1, #1
    8c60:	e7d9      	b.n	8c16 <__s2b+0x18>
    8c62:	340a      	adds	r4, #10
    8c64:	2509      	movs	r5, #9
    8c66:	e7f4      	b.n	8c52 <__s2b+0x54>
    8c68:	1b63      	subs	r3, r4, r5
    8c6a:	5ddb      	ldrb	r3, [r3, r7]
    8c6c:	0001      	movs	r1, r0
    8c6e:	3b30      	subs	r3, #48	; 0x30
    8c70:	220a      	movs	r2, #10
    8c72:	0030      	movs	r0, r6
    8c74:	f7ff ff87 	bl	8b86 <__multadd>
    8c78:	3701      	adds	r7, #1
    8c7a:	e7eb      	b.n	8c54 <__s2b+0x56>

00008c7c <__hi0bits>:
    8c7c:	0003      	movs	r3, r0
    8c7e:	0c02      	lsrs	r2, r0, #16
    8c80:	2000      	movs	r0, #0
    8c82:	4282      	cmp	r2, r0
    8c84:	d101      	bne.n	8c8a <__hi0bits+0xe>
    8c86:	041b      	lsls	r3, r3, #16
    8c88:	3010      	adds	r0, #16
    8c8a:	0e1a      	lsrs	r2, r3, #24
    8c8c:	d101      	bne.n	8c92 <__hi0bits+0x16>
    8c8e:	3008      	adds	r0, #8
    8c90:	021b      	lsls	r3, r3, #8
    8c92:	0f1a      	lsrs	r2, r3, #28
    8c94:	d101      	bne.n	8c9a <__hi0bits+0x1e>
    8c96:	3004      	adds	r0, #4
    8c98:	011b      	lsls	r3, r3, #4
    8c9a:	0f9a      	lsrs	r2, r3, #30
    8c9c:	d101      	bne.n	8ca2 <__hi0bits+0x26>
    8c9e:	3002      	adds	r0, #2
    8ca0:	009b      	lsls	r3, r3, #2
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	db03      	blt.n	8cae <__hi0bits+0x32>
    8ca6:	3001      	adds	r0, #1
    8ca8:	005b      	lsls	r3, r3, #1
    8caa:	d400      	bmi.n	8cae <__hi0bits+0x32>
    8cac:	2020      	movs	r0, #32
    8cae:	4770      	bx	lr

00008cb0 <__lo0bits>:
    8cb0:	2207      	movs	r2, #7
    8cb2:	6803      	ldr	r3, [r0, #0]
    8cb4:	b510      	push	{r4, lr}
    8cb6:	0001      	movs	r1, r0
    8cb8:	401a      	ands	r2, r3
    8cba:	d00d      	beq.n	8cd8 <__lo0bits+0x28>
    8cbc:	2401      	movs	r4, #1
    8cbe:	2000      	movs	r0, #0
    8cc0:	4223      	tst	r3, r4
    8cc2:	d105      	bne.n	8cd0 <__lo0bits+0x20>
    8cc4:	3002      	adds	r0, #2
    8cc6:	4203      	tst	r3, r0
    8cc8:	d003      	beq.n	8cd2 <__lo0bits+0x22>
    8cca:	40e3      	lsrs	r3, r4
    8ccc:	0020      	movs	r0, r4
    8cce:	600b      	str	r3, [r1, #0]
    8cd0:	bd10      	pop	{r4, pc}
    8cd2:	089b      	lsrs	r3, r3, #2
    8cd4:	600b      	str	r3, [r1, #0]
    8cd6:	e7fb      	b.n	8cd0 <__lo0bits+0x20>
    8cd8:	b29c      	uxth	r4, r3
    8cda:	0010      	movs	r0, r2
    8cdc:	2c00      	cmp	r4, #0
    8cde:	d101      	bne.n	8ce4 <__lo0bits+0x34>
    8ce0:	2010      	movs	r0, #16
    8ce2:	0c1b      	lsrs	r3, r3, #16
    8ce4:	b2da      	uxtb	r2, r3
    8ce6:	2a00      	cmp	r2, #0
    8ce8:	d101      	bne.n	8cee <__lo0bits+0x3e>
    8cea:	3008      	adds	r0, #8
    8cec:	0a1b      	lsrs	r3, r3, #8
    8cee:	071a      	lsls	r2, r3, #28
    8cf0:	d101      	bne.n	8cf6 <__lo0bits+0x46>
    8cf2:	3004      	adds	r0, #4
    8cf4:	091b      	lsrs	r3, r3, #4
    8cf6:	079a      	lsls	r2, r3, #30
    8cf8:	d101      	bne.n	8cfe <__lo0bits+0x4e>
    8cfa:	3002      	adds	r0, #2
    8cfc:	089b      	lsrs	r3, r3, #2
    8cfe:	07da      	lsls	r2, r3, #31
    8d00:	d4e8      	bmi.n	8cd4 <__lo0bits+0x24>
    8d02:	085b      	lsrs	r3, r3, #1
    8d04:	d001      	beq.n	8d0a <__lo0bits+0x5a>
    8d06:	3001      	adds	r0, #1
    8d08:	e7e4      	b.n	8cd4 <__lo0bits+0x24>
    8d0a:	2020      	movs	r0, #32
    8d0c:	e7e0      	b.n	8cd0 <__lo0bits+0x20>

00008d0e <__i2b>:
    8d0e:	b510      	push	{r4, lr}
    8d10:	000c      	movs	r4, r1
    8d12:	2101      	movs	r1, #1
    8d14:	f7ff fee6 	bl	8ae4 <_Balloc>
    8d18:	2301      	movs	r3, #1
    8d1a:	6144      	str	r4, [r0, #20]
    8d1c:	6103      	str	r3, [r0, #16]
    8d1e:	bd10      	pop	{r4, pc}

00008d20 <__multiply>:
    8d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d22:	690b      	ldr	r3, [r1, #16]
    8d24:	0015      	movs	r5, r2
    8d26:	6912      	ldr	r2, [r2, #16]
    8d28:	b089      	sub	sp, #36	; 0x24
    8d2a:	000c      	movs	r4, r1
    8d2c:	4293      	cmp	r3, r2
    8d2e:	da01      	bge.n	8d34 <__multiply+0x14>
    8d30:	002c      	movs	r4, r5
    8d32:	000d      	movs	r5, r1
    8d34:	6927      	ldr	r7, [r4, #16]
    8d36:	692e      	ldr	r6, [r5, #16]
    8d38:	68a2      	ldr	r2, [r4, #8]
    8d3a:	19bb      	adds	r3, r7, r6
    8d3c:	6861      	ldr	r1, [r4, #4]
    8d3e:	9301      	str	r3, [sp, #4]
    8d40:	4293      	cmp	r3, r2
    8d42:	dd00      	ble.n	8d46 <__multiply+0x26>
    8d44:	3101      	adds	r1, #1
    8d46:	f7ff fecd 	bl	8ae4 <_Balloc>
    8d4a:	0003      	movs	r3, r0
    8d4c:	3314      	adds	r3, #20
    8d4e:	9300      	str	r3, [sp, #0]
    8d50:	9a00      	ldr	r2, [sp, #0]
    8d52:	19bb      	adds	r3, r7, r6
    8d54:	4694      	mov	ip, r2
    8d56:	009b      	lsls	r3, r3, #2
    8d58:	449c      	add	ip, r3
    8d5a:	0013      	movs	r3, r2
    8d5c:	2200      	movs	r2, #0
    8d5e:	9004      	str	r0, [sp, #16]
    8d60:	4563      	cmp	r3, ip
    8d62:	d31c      	bcc.n	8d9e <__multiply+0x7e>
    8d64:	002a      	movs	r2, r5
    8d66:	3414      	adds	r4, #20
    8d68:	00bf      	lsls	r7, r7, #2
    8d6a:	19e3      	adds	r3, r4, r7
    8d6c:	3214      	adds	r2, #20
    8d6e:	00b6      	lsls	r6, r6, #2
    8d70:	9305      	str	r3, [sp, #20]
    8d72:	1993      	adds	r3, r2, r6
    8d74:	9402      	str	r4, [sp, #8]
    8d76:	9306      	str	r3, [sp, #24]
    8d78:	9b06      	ldr	r3, [sp, #24]
    8d7a:	429a      	cmp	r2, r3
    8d7c:	d311      	bcc.n	8da2 <__multiply+0x82>
    8d7e:	9b01      	ldr	r3, [sp, #4]
    8d80:	2b00      	cmp	r3, #0
    8d82:	dd06      	ble.n	8d92 <__multiply+0x72>
    8d84:	2304      	movs	r3, #4
    8d86:	425b      	negs	r3, r3
    8d88:	449c      	add	ip, r3
    8d8a:	4663      	mov	r3, ip
    8d8c:	681b      	ldr	r3, [r3, #0]
    8d8e:	2b00      	cmp	r3, #0
    8d90:	d051      	beq.n	8e36 <__multiply+0x116>
    8d92:	9b04      	ldr	r3, [sp, #16]
    8d94:	9a01      	ldr	r2, [sp, #4]
    8d96:	0018      	movs	r0, r3
    8d98:	611a      	str	r2, [r3, #16]
    8d9a:	b009      	add	sp, #36	; 0x24
    8d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d9e:	c304      	stmia	r3!, {r2}
    8da0:	e7de      	b.n	8d60 <__multiply+0x40>
    8da2:	8814      	ldrh	r4, [r2, #0]
    8da4:	2c00      	cmp	r4, #0
    8da6:	d01e      	beq.n	8de6 <__multiply+0xc6>
    8da8:	2600      	movs	r6, #0
    8daa:	9d00      	ldr	r5, [sp, #0]
    8dac:	9f02      	ldr	r7, [sp, #8]
    8dae:	cf01      	ldmia	r7!, {r0}
    8db0:	9507      	str	r5, [sp, #28]
    8db2:	cd08      	ldmia	r5!, {r3}
    8db4:	9303      	str	r3, [sp, #12]
    8db6:	b283      	uxth	r3, r0
    8db8:	4363      	muls	r3, r4
    8dba:	0019      	movs	r1, r3
    8dbc:	466b      	mov	r3, sp
    8dbe:	0c00      	lsrs	r0, r0, #16
    8dc0:	899b      	ldrh	r3, [r3, #12]
    8dc2:	4360      	muls	r0, r4
    8dc4:	18cb      	adds	r3, r1, r3
    8dc6:	9903      	ldr	r1, [sp, #12]
    8dc8:	199b      	adds	r3, r3, r6
    8dca:	0c09      	lsrs	r1, r1, #16
    8dcc:	1841      	adds	r1, r0, r1
    8dce:	0c18      	lsrs	r0, r3, #16
    8dd0:	1809      	adds	r1, r1, r0
    8dd2:	0c0e      	lsrs	r6, r1, #16
    8dd4:	b29b      	uxth	r3, r3
    8dd6:	0409      	lsls	r1, r1, #16
    8dd8:	430b      	orrs	r3, r1
    8dda:	9907      	ldr	r1, [sp, #28]
    8ddc:	600b      	str	r3, [r1, #0]
    8dde:	9b05      	ldr	r3, [sp, #20]
    8de0:	42bb      	cmp	r3, r7
    8de2:	d8e4      	bhi.n	8dae <__multiply+0x8e>
    8de4:	602e      	str	r6, [r5, #0]
    8de6:	6813      	ldr	r3, [r2, #0]
    8de8:	0c1b      	lsrs	r3, r3, #16
    8dea:	9303      	str	r3, [sp, #12]
    8dec:	d01e      	beq.n	8e2c <__multiply+0x10c>
    8dee:	2600      	movs	r6, #0
    8df0:	9b00      	ldr	r3, [sp, #0]
    8df2:	9c02      	ldr	r4, [sp, #8]
    8df4:	681b      	ldr	r3, [r3, #0]
    8df6:	9800      	ldr	r0, [sp, #0]
    8df8:	0007      	movs	r7, r0
    8dfa:	8821      	ldrh	r1, [r4, #0]
    8dfc:	9d03      	ldr	r5, [sp, #12]
    8dfe:	b29b      	uxth	r3, r3
    8e00:	4369      	muls	r1, r5
    8e02:	c820      	ldmia	r0!, {r5}
    8e04:	0c2d      	lsrs	r5, r5, #16
    8e06:	1949      	adds	r1, r1, r5
    8e08:	198e      	adds	r6, r1, r6
    8e0a:	0431      	lsls	r1, r6, #16
    8e0c:	430b      	orrs	r3, r1
    8e0e:	603b      	str	r3, [r7, #0]
    8e10:	cc08      	ldmia	r4!, {r3}
    8e12:	9903      	ldr	r1, [sp, #12]
    8e14:	0c1b      	lsrs	r3, r3, #16
    8e16:	434b      	muls	r3, r1
    8e18:	6879      	ldr	r1, [r7, #4]
    8e1a:	0c36      	lsrs	r6, r6, #16
    8e1c:	b289      	uxth	r1, r1
    8e1e:	185b      	adds	r3, r3, r1
    8e20:	9905      	ldr	r1, [sp, #20]
    8e22:	199b      	adds	r3, r3, r6
    8e24:	0c1e      	lsrs	r6, r3, #16
    8e26:	42a1      	cmp	r1, r4
    8e28:	d8e6      	bhi.n	8df8 <__multiply+0xd8>
    8e2a:	6003      	str	r3, [r0, #0]
    8e2c:	9b00      	ldr	r3, [sp, #0]
    8e2e:	3204      	adds	r2, #4
    8e30:	3304      	adds	r3, #4
    8e32:	9300      	str	r3, [sp, #0]
    8e34:	e7a0      	b.n	8d78 <__multiply+0x58>
    8e36:	9b01      	ldr	r3, [sp, #4]
    8e38:	3b01      	subs	r3, #1
    8e3a:	9301      	str	r3, [sp, #4]
    8e3c:	e79f      	b.n	8d7e <__multiply+0x5e>
	...

00008e40 <__pow5mult>:
    8e40:	2303      	movs	r3, #3
    8e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8e44:	4013      	ands	r3, r2
    8e46:	0005      	movs	r5, r0
    8e48:	000e      	movs	r6, r1
    8e4a:	0014      	movs	r4, r2
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d008      	beq.n	8e62 <__pow5mult+0x22>
    8e50:	4922      	ldr	r1, [pc, #136]	; (8edc <__pow5mult+0x9c>)
    8e52:	3b01      	subs	r3, #1
    8e54:	009a      	lsls	r2, r3, #2
    8e56:	5852      	ldr	r2, [r2, r1]
    8e58:	2300      	movs	r3, #0
    8e5a:	0031      	movs	r1, r6
    8e5c:	f7ff fe93 	bl	8b86 <__multadd>
    8e60:	0006      	movs	r6, r0
    8e62:	10a3      	asrs	r3, r4, #2
    8e64:	9301      	str	r3, [sp, #4]
    8e66:	d036      	beq.n	8ed6 <__pow5mult+0x96>
    8e68:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    8e6a:	2c00      	cmp	r4, #0
    8e6c:	d107      	bne.n	8e7e <__pow5mult+0x3e>
    8e6e:	2010      	movs	r0, #16
    8e70:	f7fe fa0a 	bl	7288 <malloc>
    8e74:	6268      	str	r0, [r5, #36]	; 0x24
    8e76:	6044      	str	r4, [r0, #4]
    8e78:	6084      	str	r4, [r0, #8]
    8e7a:	6004      	str	r4, [r0, #0]
    8e7c:	60c4      	str	r4, [r0, #12]
    8e7e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    8e80:	68bc      	ldr	r4, [r7, #8]
    8e82:	2c00      	cmp	r4, #0
    8e84:	d107      	bne.n	8e96 <__pow5mult+0x56>
    8e86:	4916      	ldr	r1, [pc, #88]	; (8ee0 <__pow5mult+0xa0>)
    8e88:	0028      	movs	r0, r5
    8e8a:	f7ff ff40 	bl	8d0e <__i2b>
    8e8e:	2300      	movs	r3, #0
    8e90:	0004      	movs	r4, r0
    8e92:	60b8      	str	r0, [r7, #8]
    8e94:	6003      	str	r3, [r0, #0]
    8e96:	2201      	movs	r2, #1
    8e98:	9b01      	ldr	r3, [sp, #4]
    8e9a:	4213      	tst	r3, r2
    8e9c:	d00a      	beq.n	8eb4 <__pow5mult+0x74>
    8e9e:	0031      	movs	r1, r6
    8ea0:	0022      	movs	r2, r4
    8ea2:	0028      	movs	r0, r5
    8ea4:	f7ff ff3c 	bl	8d20 <__multiply>
    8ea8:	0007      	movs	r7, r0
    8eaa:	0031      	movs	r1, r6
    8eac:	0028      	movs	r0, r5
    8eae:	f7ff fe51 	bl	8b54 <_Bfree>
    8eb2:	003e      	movs	r6, r7
    8eb4:	9b01      	ldr	r3, [sp, #4]
    8eb6:	105b      	asrs	r3, r3, #1
    8eb8:	9301      	str	r3, [sp, #4]
    8eba:	d00c      	beq.n	8ed6 <__pow5mult+0x96>
    8ebc:	6820      	ldr	r0, [r4, #0]
    8ebe:	2800      	cmp	r0, #0
    8ec0:	d107      	bne.n	8ed2 <__pow5mult+0x92>
    8ec2:	0022      	movs	r2, r4
    8ec4:	0021      	movs	r1, r4
    8ec6:	0028      	movs	r0, r5
    8ec8:	f7ff ff2a 	bl	8d20 <__multiply>
    8ecc:	2300      	movs	r3, #0
    8ece:	6020      	str	r0, [r4, #0]
    8ed0:	6003      	str	r3, [r0, #0]
    8ed2:	0004      	movs	r4, r0
    8ed4:	e7df      	b.n	8e96 <__pow5mult+0x56>
    8ed6:	0030      	movs	r0, r6
    8ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8eda:	46c0      	nop			; (mov r8, r8)
    8edc:	0000aa60 	.word	0x0000aa60
    8ee0:	00000271 	.word	0x00000271

00008ee4 <__lshift>:
    8ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ee6:	000d      	movs	r5, r1
    8ee8:	0017      	movs	r7, r2
    8eea:	692b      	ldr	r3, [r5, #16]
    8eec:	1154      	asrs	r4, r2, #5
    8eee:	b085      	sub	sp, #20
    8ef0:	18e3      	adds	r3, r4, r3
    8ef2:	9302      	str	r3, [sp, #8]
    8ef4:	3301      	adds	r3, #1
    8ef6:	9301      	str	r3, [sp, #4]
    8ef8:	6849      	ldr	r1, [r1, #4]
    8efa:	68ab      	ldr	r3, [r5, #8]
    8efc:	9003      	str	r0, [sp, #12]
    8efe:	9a01      	ldr	r2, [sp, #4]
    8f00:	4293      	cmp	r3, r2
    8f02:	db34      	blt.n	8f6e <__lshift+0x8a>
    8f04:	9803      	ldr	r0, [sp, #12]
    8f06:	f7ff fded 	bl	8ae4 <_Balloc>
    8f0a:	2300      	movs	r3, #0
    8f0c:	0002      	movs	r2, r0
    8f0e:	0006      	movs	r6, r0
    8f10:	0019      	movs	r1, r3
    8f12:	3214      	adds	r2, #20
    8f14:	42a3      	cmp	r3, r4
    8f16:	db2d      	blt.n	8f74 <__lshift+0x90>
    8f18:	43e3      	mvns	r3, r4
    8f1a:	17db      	asrs	r3, r3, #31
    8f1c:	401c      	ands	r4, r3
    8f1e:	002b      	movs	r3, r5
    8f20:	211f      	movs	r1, #31
    8f22:	00a4      	lsls	r4, r4, #2
    8f24:	1914      	adds	r4, r2, r4
    8f26:	692a      	ldr	r2, [r5, #16]
    8f28:	3314      	adds	r3, #20
    8f2a:	0092      	lsls	r2, r2, #2
    8f2c:	189a      	adds	r2, r3, r2
    8f2e:	400f      	ands	r7, r1
    8f30:	d024      	beq.n	8f7c <__lshift+0x98>
    8f32:	3101      	adds	r1, #1
    8f34:	1bc9      	subs	r1, r1, r7
    8f36:	468c      	mov	ip, r1
    8f38:	2100      	movs	r1, #0
    8f3a:	6818      	ldr	r0, [r3, #0]
    8f3c:	40b8      	lsls	r0, r7
    8f3e:	4301      	orrs	r1, r0
    8f40:	4660      	mov	r0, ip
    8f42:	6021      	str	r1, [r4, #0]
    8f44:	cb02      	ldmia	r3!, {r1}
    8f46:	3404      	adds	r4, #4
    8f48:	40c1      	lsrs	r1, r0
    8f4a:	429a      	cmp	r2, r3
    8f4c:	d8f5      	bhi.n	8f3a <__lshift+0x56>
    8f4e:	6021      	str	r1, [r4, #0]
    8f50:	2900      	cmp	r1, #0
    8f52:	d002      	beq.n	8f5a <__lshift+0x76>
    8f54:	9b02      	ldr	r3, [sp, #8]
    8f56:	3302      	adds	r3, #2
    8f58:	9301      	str	r3, [sp, #4]
    8f5a:	9b01      	ldr	r3, [sp, #4]
    8f5c:	9803      	ldr	r0, [sp, #12]
    8f5e:	3b01      	subs	r3, #1
    8f60:	6133      	str	r3, [r6, #16]
    8f62:	0029      	movs	r1, r5
    8f64:	f7ff fdf6 	bl	8b54 <_Bfree>
    8f68:	0030      	movs	r0, r6
    8f6a:	b005      	add	sp, #20
    8f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f6e:	3101      	adds	r1, #1
    8f70:	005b      	lsls	r3, r3, #1
    8f72:	e7c4      	b.n	8efe <__lshift+0x1a>
    8f74:	0098      	lsls	r0, r3, #2
    8f76:	5011      	str	r1, [r2, r0]
    8f78:	3301      	adds	r3, #1
    8f7a:	e7cb      	b.n	8f14 <__lshift+0x30>
    8f7c:	cb02      	ldmia	r3!, {r1}
    8f7e:	c402      	stmia	r4!, {r1}
    8f80:	429a      	cmp	r2, r3
    8f82:	d8fb      	bhi.n	8f7c <__lshift+0x98>
    8f84:	e7e9      	b.n	8f5a <__lshift+0x76>

00008f86 <__mcmp>:
    8f86:	690a      	ldr	r2, [r1, #16]
    8f88:	6903      	ldr	r3, [r0, #16]
    8f8a:	b530      	push	{r4, r5, lr}
    8f8c:	1a9b      	subs	r3, r3, r2
    8f8e:	d10e      	bne.n	8fae <__mcmp+0x28>
    8f90:	0092      	lsls	r2, r2, #2
    8f92:	3014      	adds	r0, #20
    8f94:	3114      	adds	r1, #20
    8f96:	1884      	adds	r4, r0, r2
    8f98:	1889      	adds	r1, r1, r2
    8f9a:	3c04      	subs	r4, #4
    8f9c:	3904      	subs	r1, #4
    8f9e:	6822      	ldr	r2, [r4, #0]
    8fa0:	680d      	ldr	r5, [r1, #0]
    8fa2:	42aa      	cmp	r2, r5
    8fa4:	d005      	beq.n	8fb2 <__mcmp+0x2c>
    8fa6:	42aa      	cmp	r2, r5
    8fa8:	4192      	sbcs	r2, r2
    8faa:	2301      	movs	r3, #1
    8fac:	4313      	orrs	r3, r2
    8fae:	0018      	movs	r0, r3
    8fb0:	bd30      	pop	{r4, r5, pc}
    8fb2:	42a0      	cmp	r0, r4
    8fb4:	d3f1      	bcc.n	8f9a <__mcmp+0x14>
    8fb6:	e7fa      	b.n	8fae <__mcmp+0x28>

00008fb8 <__mdiff>:
    8fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fba:	000d      	movs	r5, r1
    8fbc:	b085      	sub	sp, #20
    8fbe:	0007      	movs	r7, r0
    8fc0:	0011      	movs	r1, r2
    8fc2:	0028      	movs	r0, r5
    8fc4:	0014      	movs	r4, r2
    8fc6:	f7ff ffde 	bl	8f86 <__mcmp>
    8fca:	1e06      	subs	r6, r0, #0
    8fcc:	d108      	bne.n	8fe0 <__mdiff+0x28>
    8fce:	0001      	movs	r1, r0
    8fd0:	0038      	movs	r0, r7
    8fd2:	f7ff fd87 	bl	8ae4 <_Balloc>
    8fd6:	2301      	movs	r3, #1
    8fd8:	6146      	str	r6, [r0, #20]
    8fda:	6103      	str	r3, [r0, #16]
    8fdc:	b005      	add	sp, #20
    8fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fe0:	2301      	movs	r3, #1
    8fe2:	9301      	str	r3, [sp, #4]
    8fe4:	2800      	cmp	r0, #0
    8fe6:	db04      	blt.n	8ff2 <__mdiff+0x3a>
    8fe8:	0023      	movs	r3, r4
    8fea:	002c      	movs	r4, r5
    8fec:	001d      	movs	r5, r3
    8fee:	2300      	movs	r3, #0
    8ff0:	9301      	str	r3, [sp, #4]
    8ff2:	6861      	ldr	r1, [r4, #4]
    8ff4:	0038      	movs	r0, r7
    8ff6:	f7ff fd75 	bl	8ae4 <_Balloc>
    8ffa:	002f      	movs	r7, r5
    8ffc:	2200      	movs	r2, #0
    8ffe:	9b01      	ldr	r3, [sp, #4]
    9000:	6926      	ldr	r6, [r4, #16]
    9002:	60c3      	str	r3, [r0, #12]
    9004:	3414      	adds	r4, #20
    9006:	00b3      	lsls	r3, r6, #2
    9008:	18e3      	adds	r3, r4, r3
    900a:	9302      	str	r3, [sp, #8]
    900c:	692b      	ldr	r3, [r5, #16]
    900e:	3714      	adds	r7, #20
    9010:	009b      	lsls	r3, r3, #2
    9012:	18fb      	adds	r3, r7, r3
    9014:	9303      	str	r3, [sp, #12]
    9016:	0003      	movs	r3, r0
    9018:	4694      	mov	ip, r2
    901a:	3314      	adds	r3, #20
    901c:	cc20      	ldmia	r4!, {r5}
    901e:	cf04      	ldmia	r7!, {r2}
    9020:	9201      	str	r2, [sp, #4]
    9022:	b2aa      	uxth	r2, r5
    9024:	4494      	add	ip, r2
    9026:	466a      	mov	r2, sp
    9028:	4661      	mov	r1, ip
    902a:	8892      	ldrh	r2, [r2, #4]
    902c:	0c2d      	lsrs	r5, r5, #16
    902e:	1a8a      	subs	r2, r1, r2
    9030:	9901      	ldr	r1, [sp, #4]
    9032:	0c09      	lsrs	r1, r1, #16
    9034:	1a69      	subs	r1, r5, r1
    9036:	1415      	asrs	r5, r2, #16
    9038:	1949      	adds	r1, r1, r5
    903a:	140d      	asrs	r5, r1, #16
    903c:	b292      	uxth	r2, r2
    903e:	0409      	lsls	r1, r1, #16
    9040:	430a      	orrs	r2, r1
    9042:	601a      	str	r2, [r3, #0]
    9044:	9a03      	ldr	r2, [sp, #12]
    9046:	46ac      	mov	ip, r5
    9048:	3304      	adds	r3, #4
    904a:	42ba      	cmp	r2, r7
    904c:	d8e6      	bhi.n	901c <__mdiff+0x64>
    904e:	9902      	ldr	r1, [sp, #8]
    9050:	001a      	movs	r2, r3
    9052:	428c      	cmp	r4, r1
    9054:	d305      	bcc.n	9062 <__mdiff+0xaa>
    9056:	3a04      	subs	r2, #4
    9058:	6813      	ldr	r3, [r2, #0]
    905a:	2b00      	cmp	r3, #0
    905c:	d00e      	beq.n	907c <__mdiff+0xc4>
    905e:	6106      	str	r6, [r0, #16]
    9060:	e7bc      	b.n	8fdc <__mdiff+0x24>
    9062:	cc04      	ldmia	r4!, {r2}
    9064:	b291      	uxth	r1, r2
    9066:	4461      	add	r1, ip
    9068:	140d      	asrs	r5, r1, #16
    906a:	0c12      	lsrs	r2, r2, #16
    906c:	1952      	adds	r2, r2, r5
    906e:	1415      	asrs	r5, r2, #16
    9070:	b289      	uxth	r1, r1
    9072:	0412      	lsls	r2, r2, #16
    9074:	430a      	orrs	r2, r1
    9076:	46ac      	mov	ip, r5
    9078:	c304      	stmia	r3!, {r2}
    907a:	e7e8      	b.n	904e <__mdiff+0x96>
    907c:	3e01      	subs	r6, #1
    907e:	e7ea      	b.n	9056 <__mdiff+0x9e>

00009080 <__ulp>:
    9080:	000b      	movs	r3, r1
    9082:	4910      	ldr	r1, [pc, #64]	; (90c4 <__ulp+0x44>)
    9084:	b510      	push	{r4, lr}
    9086:	4019      	ands	r1, r3
    9088:	4b0f      	ldr	r3, [pc, #60]	; (90c8 <__ulp+0x48>)
    908a:	18c9      	adds	r1, r1, r3
    908c:	2900      	cmp	r1, #0
    908e:	dd04      	ble.n	909a <__ulp+0x1a>
    9090:	2200      	movs	r2, #0
    9092:	000b      	movs	r3, r1
    9094:	0010      	movs	r0, r2
    9096:	0019      	movs	r1, r3
    9098:	bd10      	pop	{r4, pc}
    909a:	4249      	negs	r1, r1
    909c:	1509      	asrs	r1, r1, #20
    909e:	2200      	movs	r2, #0
    90a0:	2300      	movs	r3, #0
    90a2:	2913      	cmp	r1, #19
    90a4:	dc04      	bgt.n	90b0 <__ulp+0x30>
    90a6:	2080      	movs	r0, #128	; 0x80
    90a8:	0300      	lsls	r0, r0, #12
    90aa:	4108      	asrs	r0, r1
    90ac:	0003      	movs	r3, r0
    90ae:	e7f1      	b.n	9094 <__ulp+0x14>
    90b0:	3914      	subs	r1, #20
    90b2:	2001      	movs	r0, #1
    90b4:	291e      	cmp	r1, #30
    90b6:	dc02      	bgt.n	90be <__ulp+0x3e>
    90b8:	241f      	movs	r4, #31
    90ba:	1a61      	subs	r1, r4, r1
    90bc:	4088      	lsls	r0, r1
    90be:	0002      	movs	r2, r0
    90c0:	e7e8      	b.n	9094 <__ulp+0x14>
    90c2:	46c0      	nop			; (mov r8, r8)
    90c4:	7ff00000 	.word	0x7ff00000
    90c8:	fcc00000 	.word	0xfcc00000

000090cc <__b2d>:
    90cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    90ce:	0006      	movs	r6, r0
    90d0:	6903      	ldr	r3, [r0, #16]
    90d2:	3614      	adds	r6, #20
    90d4:	009b      	lsls	r3, r3, #2
    90d6:	18f3      	adds	r3, r6, r3
    90d8:	1f1d      	subs	r5, r3, #4
    90da:	682c      	ldr	r4, [r5, #0]
    90dc:	000f      	movs	r7, r1
    90de:	0020      	movs	r0, r4
    90e0:	9301      	str	r3, [sp, #4]
    90e2:	f7ff fdcb 	bl	8c7c <__hi0bits>
    90e6:	2320      	movs	r3, #32
    90e8:	1a1b      	subs	r3, r3, r0
    90ea:	603b      	str	r3, [r7, #0]
    90ec:	491c      	ldr	r1, [pc, #112]	; (9160 <__b2d+0x94>)
    90ee:	280a      	cmp	r0, #10
    90f0:	dc16      	bgt.n	9120 <__b2d+0x54>
    90f2:	230b      	movs	r3, #11
    90f4:	0027      	movs	r7, r4
    90f6:	1a1b      	subs	r3, r3, r0
    90f8:	40df      	lsrs	r7, r3
    90fa:	4339      	orrs	r1, r7
    90fc:	469c      	mov	ip, r3
    90fe:	000b      	movs	r3, r1
    9100:	2100      	movs	r1, #0
    9102:	42ae      	cmp	r6, r5
    9104:	d202      	bcs.n	910c <__b2d+0x40>
    9106:	9901      	ldr	r1, [sp, #4]
    9108:	3908      	subs	r1, #8
    910a:	6809      	ldr	r1, [r1, #0]
    910c:	3015      	adds	r0, #21
    910e:	4084      	lsls	r4, r0
    9110:	4660      	mov	r0, ip
    9112:	40c1      	lsrs	r1, r0
    9114:	430c      	orrs	r4, r1
    9116:	0022      	movs	r2, r4
    9118:	0010      	movs	r0, r2
    911a:	0019      	movs	r1, r3
    911c:	b003      	add	sp, #12
    911e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9120:	2700      	movs	r7, #0
    9122:	42ae      	cmp	r6, r5
    9124:	d202      	bcs.n	912c <__b2d+0x60>
    9126:	9d01      	ldr	r5, [sp, #4]
    9128:	3d08      	subs	r5, #8
    912a:	682f      	ldr	r7, [r5, #0]
    912c:	380b      	subs	r0, #11
    912e:	4684      	mov	ip, r0
    9130:	1e03      	subs	r3, r0, #0
    9132:	d012      	beq.n	915a <__b2d+0x8e>
    9134:	409c      	lsls	r4, r3
    9136:	2020      	movs	r0, #32
    9138:	4321      	orrs	r1, r4
    913a:	003c      	movs	r4, r7
    913c:	1ac0      	subs	r0, r0, r3
    913e:	40c4      	lsrs	r4, r0
    9140:	4321      	orrs	r1, r4
    9142:	000b      	movs	r3, r1
    9144:	2100      	movs	r1, #0
    9146:	42b5      	cmp	r5, r6
    9148:	d901      	bls.n	914e <__b2d+0x82>
    914a:	3d04      	subs	r5, #4
    914c:	6829      	ldr	r1, [r5, #0]
    914e:	4664      	mov	r4, ip
    9150:	40c1      	lsrs	r1, r0
    9152:	40a7      	lsls	r7, r4
    9154:	430f      	orrs	r7, r1
    9156:	003a      	movs	r2, r7
    9158:	e7de      	b.n	9118 <__b2d+0x4c>
    915a:	4321      	orrs	r1, r4
    915c:	000b      	movs	r3, r1
    915e:	e7fa      	b.n	9156 <__b2d+0x8a>
    9160:	3ff00000 	.word	0x3ff00000

00009164 <__d2b>:
    9164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9166:	001d      	movs	r5, r3
    9168:	2101      	movs	r1, #1
    916a:	9f08      	ldr	r7, [sp, #32]
    916c:	0014      	movs	r4, r2
    916e:	f7ff fcb9 	bl	8ae4 <_Balloc>
    9172:	032b      	lsls	r3, r5, #12
    9174:	006d      	lsls	r5, r5, #1
    9176:	0006      	movs	r6, r0
    9178:	0b1b      	lsrs	r3, r3, #12
    917a:	0d6d      	lsrs	r5, r5, #21
    917c:	d124      	bne.n	91c8 <__d2b+0x64>
    917e:	9301      	str	r3, [sp, #4]
    9180:	2c00      	cmp	r4, #0
    9182:	d027      	beq.n	91d4 <__d2b+0x70>
    9184:	4668      	mov	r0, sp
    9186:	9400      	str	r4, [sp, #0]
    9188:	f7ff fd92 	bl	8cb0 <__lo0bits>
    918c:	9c00      	ldr	r4, [sp, #0]
    918e:	2800      	cmp	r0, #0
    9190:	d01e      	beq.n	91d0 <__d2b+0x6c>
    9192:	9b01      	ldr	r3, [sp, #4]
    9194:	2120      	movs	r1, #32
    9196:	001a      	movs	r2, r3
    9198:	1a09      	subs	r1, r1, r0
    919a:	408a      	lsls	r2, r1
    919c:	40c3      	lsrs	r3, r0
    919e:	4322      	orrs	r2, r4
    91a0:	6172      	str	r2, [r6, #20]
    91a2:	9301      	str	r3, [sp, #4]
    91a4:	9c01      	ldr	r4, [sp, #4]
    91a6:	61b4      	str	r4, [r6, #24]
    91a8:	1e63      	subs	r3, r4, #1
    91aa:	419c      	sbcs	r4, r3
    91ac:	3401      	adds	r4, #1
    91ae:	6134      	str	r4, [r6, #16]
    91b0:	2d00      	cmp	r5, #0
    91b2:	d018      	beq.n	91e6 <__d2b+0x82>
    91b4:	4b12      	ldr	r3, [pc, #72]	; (9200 <__d2b+0x9c>)
    91b6:	18ed      	adds	r5, r5, r3
    91b8:	2335      	movs	r3, #53	; 0x35
    91ba:	182d      	adds	r5, r5, r0
    91bc:	603d      	str	r5, [r7, #0]
    91be:	1a18      	subs	r0, r3, r0
    91c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91c2:	6018      	str	r0, [r3, #0]
    91c4:	0030      	movs	r0, r6
    91c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    91c8:	2280      	movs	r2, #128	; 0x80
    91ca:	0352      	lsls	r2, r2, #13
    91cc:	4313      	orrs	r3, r2
    91ce:	e7d6      	b.n	917e <__d2b+0x1a>
    91d0:	6174      	str	r4, [r6, #20]
    91d2:	e7e7      	b.n	91a4 <__d2b+0x40>
    91d4:	a801      	add	r0, sp, #4
    91d6:	f7ff fd6b 	bl	8cb0 <__lo0bits>
    91da:	2401      	movs	r4, #1
    91dc:	9b01      	ldr	r3, [sp, #4]
    91de:	6134      	str	r4, [r6, #16]
    91e0:	6173      	str	r3, [r6, #20]
    91e2:	3020      	adds	r0, #32
    91e4:	e7e4      	b.n	91b0 <__d2b+0x4c>
    91e6:	4b07      	ldr	r3, [pc, #28]	; (9204 <__d2b+0xa0>)
    91e8:	18c0      	adds	r0, r0, r3
    91ea:	4b07      	ldr	r3, [pc, #28]	; (9208 <__d2b+0xa4>)
    91ec:	6038      	str	r0, [r7, #0]
    91ee:	18e3      	adds	r3, r4, r3
    91f0:	009b      	lsls	r3, r3, #2
    91f2:	18f3      	adds	r3, r6, r3
    91f4:	6958      	ldr	r0, [r3, #20]
    91f6:	f7ff fd41 	bl	8c7c <__hi0bits>
    91fa:	0164      	lsls	r4, r4, #5
    91fc:	1a20      	subs	r0, r4, r0
    91fe:	e7df      	b.n	91c0 <__d2b+0x5c>
    9200:	fffffbcd 	.word	0xfffffbcd
    9204:	fffffbce 	.word	0xfffffbce
    9208:	3fffffff 	.word	0x3fffffff

0000920c <__ratio>:
    920c:	b5f0      	push	{r4, r5, r6, r7, lr}
    920e:	b085      	sub	sp, #20
    9210:	000f      	movs	r7, r1
    9212:	a902      	add	r1, sp, #8
    9214:	0006      	movs	r6, r0
    9216:	f7ff ff59 	bl	90cc <__b2d>
    921a:	0004      	movs	r4, r0
    921c:	000d      	movs	r5, r1
    921e:	0038      	movs	r0, r7
    9220:	a903      	add	r1, sp, #12
    9222:	9400      	str	r4, [sp, #0]
    9224:	9501      	str	r5, [sp, #4]
    9226:	f7ff ff51 	bl	90cc <__b2d>
    922a:	6936      	ldr	r6, [r6, #16]
    922c:	693f      	ldr	r7, [r7, #16]
    922e:	0002      	movs	r2, r0
    9230:	1bf7      	subs	r7, r6, r7
    9232:	017e      	lsls	r6, r7, #5
    9234:	46b4      	mov	ip, r6
    9236:	9f03      	ldr	r7, [sp, #12]
    9238:	9e02      	ldr	r6, [sp, #8]
    923a:	000b      	movs	r3, r1
    923c:	1bf6      	subs	r6, r6, r7
    923e:	4466      	add	r6, ip
    9240:	0537      	lsls	r7, r6, #20
    9242:	2e00      	cmp	r6, #0
    9244:	dd07      	ble.n	9256 <__ratio+0x4a>
    9246:	1979      	adds	r1, r7, r5
    9248:	9101      	str	r1, [sp, #4]
    924a:	9800      	ldr	r0, [sp, #0]
    924c:	9901      	ldr	r1, [sp, #4]
    924e:	f000 fbab 	bl	99a8 <__aeabi_ddiv>
    9252:	b005      	add	sp, #20
    9254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9256:	1bcb      	subs	r3, r1, r7
    9258:	e7f7      	b.n	924a <__ratio+0x3e>

0000925a <__copybits>:
    925a:	0013      	movs	r3, r2
    925c:	3901      	subs	r1, #1
    925e:	b510      	push	{r4, lr}
    9260:	1149      	asrs	r1, r1, #5
    9262:	6912      	ldr	r2, [r2, #16]
    9264:	3101      	adds	r1, #1
    9266:	0089      	lsls	r1, r1, #2
    9268:	3314      	adds	r3, #20
    926a:	0092      	lsls	r2, r2, #2
    926c:	1841      	adds	r1, r0, r1
    926e:	189a      	adds	r2, r3, r2
    9270:	429a      	cmp	r2, r3
    9272:	d803      	bhi.n	927c <__copybits+0x22>
    9274:	2300      	movs	r3, #0
    9276:	4281      	cmp	r1, r0
    9278:	d803      	bhi.n	9282 <__copybits+0x28>
    927a:	bd10      	pop	{r4, pc}
    927c:	cb10      	ldmia	r3!, {r4}
    927e:	c010      	stmia	r0!, {r4}
    9280:	e7f6      	b.n	9270 <__copybits+0x16>
    9282:	c008      	stmia	r0!, {r3}
    9284:	e7f7      	b.n	9276 <__copybits+0x1c>

00009286 <__any_on>:
    9286:	0002      	movs	r2, r0
    9288:	6900      	ldr	r0, [r0, #16]
    928a:	b510      	push	{r4, lr}
    928c:	3214      	adds	r2, #20
    928e:	114b      	asrs	r3, r1, #5
    9290:	4298      	cmp	r0, r3
    9292:	db12      	blt.n	92ba <__any_on+0x34>
    9294:	dd0b      	ble.n	92ae <__any_on+0x28>
    9296:	201f      	movs	r0, #31
    9298:	4001      	ands	r1, r0
    929a:	d008      	beq.n	92ae <__any_on+0x28>
    929c:	0098      	lsls	r0, r3, #2
    929e:	5884      	ldr	r4, [r0, r2]
    92a0:	0020      	movs	r0, r4
    92a2:	40c8      	lsrs	r0, r1
    92a4:	4088      	lsls	r0, r1
    92a6:	0001      	movs	r1, r0
    92a8:	2001      	movs	r0, #1
    92aa:	428c      	cmp	r4, r1
    92ac:	d104      	bne.n	92b8 <__any_on+0x32>
    92ae:	009b      	lsls	r3, r3, #2
    92b0:	18d3      	adds	r3, r2, r3
    92b2:	4293      	cmp	r3, r2
    92b4:	d803      	bhi.n	92be <__any_on+0x38>
    92b6:	2000      	movs	r0, #0
    92b8:	bd10      	pop	{r4, pc}
    92ba:	0003      	movs	r3, r0
    92bc:	e7f7      	b.n	92ae <__any_on+0x28>
    92be:	3b04      	subs	r3, #4
    92c0:	6819      	ldr	r1, [r3, #0]
    92c2:	2900      	cmp	r1, #0
    92c4:	d0f5      	beq.n	92b2 <__any_on+0x2c>
    92c6:	2001      	movs	r0, #1
    92c8:	e7f6      	b.n	92b8 <__any_on+0x32>

000092ca <_calloc_r>:
    92ca:	434a      	muls	r2, r1
    92cc:	b570      	push	{r4, r5, r6, lr}
    92ce:	0011      	movs	r1, r2
    92d0:	0014      	movs	r4, r2
    92d2:	f7fe f849 	bl	7368 <_malloc_r>
    92d6:	1e05      	subs	r5, r0, #0
    92d8:	d003      	beq.n	92e2 <_calloc_r+0x18>
    92da:	0022      	movs	r2, r4
    92dc:	2100      	movs	r1, #0
    92de:	f7fd fff0 	bl	72c2 <memset>
    92e2:	0028      	movs	r0, r5
    92e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000092e8 <__ssputs_r>:
    92e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    92ea:	688e      	ldr	r6, [r1, #8]
    92ec:	b085      	sub	sp, #20
    92ee:	0007      	movs	r7, r0
    92f0:	000c      	movs	r4, r1
    92f2:	9203      	str	r2, [sp, #12]
    92f4:	9301      	str	r3, [sp, #4]
    92f6:	429e      	cmp	r6, r3
    92f8:	d839      	bhi.n	936e <__ssputs_r+0x86>
    92fa:	2390      	movs	r3, #144	; 0x90
    92fc:	898a      	ldrh	r2, [r1, #12]
    92fe:	00db      	lsls	r3, r3, #3
    9300:	421a      	tst	r2, r3
    9302:	d034      	beq.n	936e <__ssputs_r+0x86>
    9304:	2503      	movs	r5, #3
    9306:	6909      	ldr	r1, [r1, #16]
    9308:	6823      	ldr	r3, [r4, #0]
    930a:	1a5b      	subs	r3, r3, r1
    930c:	9302      	str	r3, [sp, #8]
    930e:	6963      	ldr	r3, [r4, #20]
    9310:	9802      	ldr	r0, [sp, #8]
    9312:	435d      	muls	r5, r3
    9314:	0feb      	lsrs	r3, r5, #31
    9316:	195d      	adds	r5, r3, r5
    9318:	9b01      	ldr	r3, [sp, #4]
    931a:	106d      	asrs	r5, r5, #1
    931c:	3301      	adds	r3, #1
    931e:	181b      	adds	r3, r3, r0
    9320:	42ab      	cmp	r3, r5
    9322:	d900      	bls.n	9326 <__ssputs_r+0x3e>
    9324:	001d      	movs	r5, r3
    9326:	0553      	lsls	r3, r2, #21
    9328:	d532      	bpl.n	9390 <__ssputs_r+0xa8>
    932a:	0029      	movs	r1, r5
    932c:	0038      	movs	r0, r7
    932e:	f7fe f81b 	bl	7368 <_malloc_r>
    9332:	1e06      	subs	r6, r0, #0
    9334:	d109      	bne.n	934a <__ssputs_r+0x62>
    9336:	230c      	movs	r3, #12
    9338:	603b      	str	r3, [r7, #0]
    933a:	2340      	movs	r3, #64	; 0x40
    933c:	2001      	movs	r0, #1
    933e:	89a2      	ldrh	r2, [r4, #12]
    9340:	4240      	negs	r0, r0
    9342:	4313      	orrs	r3, r2
    9344:	81a3      	strh	r3, [r4, #12]
    9346:	b005      	add	sp, #20
    9348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    934a:	9a02      	ldr	r2, [sp, #8]
    934c:	6921      	ldr	r1, [r4, #16]
    934e:	f7fd ffaf 	bl	72b0 <memcpy>
    9352:	89a3      	ldrh	r3, [r4, #12]
    9354:	4a14      	ldr	r2, [pc, #80]	; (93a8 <__ssputs_r+0xc0>)
    9356:	401a      	ands	r2, r3
    9358:	2380      	movs	r3, #128	; 0x80
    935a:	4313      	orrs	r3, r2
    935c:	81a3      	strh	r3, [r4, #12]
    935e:	9b02      	ldr	r3, [sp, #8]
    9360:	6126      	str	r6, [r4, #16]
    9362:	18f6      	adds	r6, r6, r3
    9364:	6026      	str	r6, [r4, #0]
    9366:	6165      	str	r5, [r4, #20]
    9368:	9e01      	ldr	r6, [sp, #4]
    936a:	1aed      	subs	r5, r5, r3
    936c:	60a5      	str	r5, [r4, #8]
    936e:	9b01      	ldr	r3, [sp, #4]
    9370:	42b3      	cmp	r3, r6
    9372:	d200      	bcs.n	9376 <__ssputs_r+0x8e>
    9374:	001e      	movs	r6, r3
    9376:	0032      	movs	r2, r6
    9378:	9903      	ldr	r1, [sp, #12]
    937a:	6820      	ldr	r0, [r4, #0]
    937c:	f000 faca 	bl	9914 <memmove>
    9380:	68a3      	ldr	r3, [r4, #8]
    9382:	2000      	movs	r0, #0
    9384:	1b9b      	subs	r3, r3, r6
    9386:	60a3      	str	r3, [r4, #8]
    9388:	6823      	ldr	r3, [r4, #0]
    938a:	199e      	adds	r6, r3, r6
    938c:	6026      	str	r6, [r4, #0]
    938e:	e7da      	b.n	9346 <__ssputs_r+0x5e>
    9390:	002a      	movs	r2, r5
    9392:	0038      	movs	r0, r7
    9394:	f000 fad0 	bl	9938 <_realloc_r>
    9398:	1e06      	subs	r6, r0, #0
    939a:	d1e0      	bne.n	935e <__ssputs_r+0x76>
    939c:	6921      	ldr	r1, [r4, #16]
    939e:	0038      	movs	r0, r7
    93a0:	f7fd ff98 	bl	72d4 <_free_r>
    93a4:	e7c7      	b.n	9336 <__ssputs_r+0x4e>
    93a6:	46c0      	nop			; (mov r8, r8)
    93a8:	fffffb7f 	.word	0xfffffb7f

000093ac <_svfiprintf_r>:
    93ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    93ae:	b09f      	sub	sp, #124	; 0x7c
    93b0:	9002      	str	r0, [sp, #8]
    93b2:	9305      	str	r3, [sp, #20]
    93b4:	898b      	ldrh	r3, [r1, #12]
    93b6:	000f      	movs	r7, r1
    93b8:	0016      	movs	r6, r2
    93ba:	061b      	lsls	r3, r3, #24
    93bc:	d511      	bpl.n	93e2 <_svfiprintf_r+0x36>
    93be:	690b      	ldr	r3, [r1, #16]
    93c0:	2b00      	cmp	r3, #0
    93c2:	d10e      	bne.n	93e2 <_svfiprintf_r+0x36>
    93c4:	2140      	movs	r1, #64	; 0x40
    93c6:	f7fd ffcf 	bl	7368 <_malloc_r>
    93ca:	6038      	str	r0, [r7, #0]
    93cc:	6138      	str	r0, [r7, #16]
    93ce:	2800      	cmp	r0, #0
    93d0:	d105      	bne.n	93de <_svfiprintf_r+0x32>
    93d2:	230c      	movs	r3, #12
    93d4:	9a02      	ldr	r2, [sp, #8]
    93d6:	3801      	subs	r0, #1
    93d8:	6013      	str	r3, [r2, #0]
    93da:	b01f      	add	sp, #124	; 0x7c
    93dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93de:	2340      	movs	r3, #64	; 0x40
    93e0:	617b      	str	r3, [r7, #20]
    93e2:	2300      	movs	r3, #0
    93e4:	ad06      	add	r5, sp, #24
    93e6:	616b      	str	r3, [r5, #20]
    93e8:	3320      	adds	r3, #32
    93ea:	766b      	strb	r3, [r5, #25]
    93ec:	3310      	adds	r3, #16
    93ee:	76ab      	strb	r3, [r5, #26]
    93f0:	0034      	movs	r4, r6
    93f2:	7823      	ldrb	r3, [r4, #0]
    93f4:	2b00      	cmp	r3, #0
    93f6:	d147      	bne.n	9488 <_svfiprintf_r+0xdc>
    93f8:	1ba3      	subs	r3, r4, r6
    93fa:	9304      	str	r3, [sp, #16]
    93fc:	d00d      	beq.n	941a <_svfiprintf_r+0x6e>
    93fe:	1ba3      	subs	r3, r4, r6
    9400:	0032      	movs	r2, r6
    9402:	0039      	movs	r1, r7
    9404:	9802      	ldr	r0, [sp, #8]
    9406:	f7ff ff6f 	bl	92e8 <__ssputs_r>
    940a:	1c43      	adds	r3, r0, #1
    940c:	d100      	bne.n	9410 <_svfiprintf_r+0x64>
    940e:	e0b5      	b.n	957c <_svfiprintf_r+0x1d0>
    9410:	696a      	ldr	r2, [r5, #20]
    9412:	9b04      	ldr	r3, [sp, #16]
    9414:	4694      	mov	ip, r2
    9416:	4463      	add	r3, ip
    9418:	616b      	str	r3, [r5, #20]
    941a:	7823      	ldrb	r3, [r4, #0]
    941c:	2b00      	cmp	r3, #0
    941e:	d100      	bne.n	9422 <_svfiprintf_r+0x76>
    9420:	e0ac      	b.n	957c <_svfiprintf_r+0x1d0>
    9422:	2201      	movs	r2, #1
    9424:	2300      	movs	r3, #0
    9426:	4252      	negs	r2, r2
    9428:	606a      	str	r2, [r5, #4]
    942a:	a902      	add	r1, sp, #8
    942c:	3254      	adds	r2, #84	; 0x54
    942e:	1852      	adds	r2, r2, r1
    9430:	3401      	adds	r4, #1
    9432:	602b      	str	r3, [r5, #0]
    9434:	60eb      	str	r3, [r5, #12]
    9436:	60ab      	str	r3, [r5, #8]
    9438:	7013      	strb	r3, [r2, #0]
    943a:	65ab      	str	r3, [r5, #88]	; 0x58
    943c:	4e58      	ldr	r6, [pc, #352]	; (95a0 <_svfiprintf_r+0x1f4>)
    943e:	2205      	movs	r2, #5
    9440:	7821      	ldrb	r1, [r4, #0]
    9442:	0030      	movs	r0, r6
    9444:	f000 fa5b 	bl	98fe <memchr>
    9448:	1c62      	adds	r2, r4, #1
    944a:	2800      	cmp	r0, #0
    944c:	d120      	bne.n	9490 <_svfiprintf_r+0xe4>
    944e:	6829      	ldr	r1, [r5, #0]
    9450:	06cb      	lsls	r3, r1, #27
    9452:	d504      	bpl.n	945e <_svfiprintf_r+0xb2>
    9454:	2353      	movs	r3, #83	; 0x53
    9456:	ae02      	add	r6, sp, #8
    9458:	3020      	adds	r0, #32
    945a:	199b      	adds	r3, r3, r6
    945c:	7018      	strb	r0, [r3, #0]
    945e:	070b      	lsls	r3, r1, #28
    9460:	d504      	bpl.n	946c <_svfiprintf_r+0xc0>
    9462:	2353      	movs	r3, #83	; 0x53
    9464:	202b      	movs	r0, #43	; 0x2b
    9466:	ae02      	add	r6, sp, #8
    9468:	199b      	adds	r3, r3, r6
    946a:	7018      	strb	r0, [r3, #0]
    946c:	7823      	ldrb	r3, [r4, #0]
    946e:	2b2a      	cmp	r3, #42	; 0x2a
    9470:	d016      	beq.n	94a0 <_svfiprintf_r+0xf4>
    9472:	2000      	movs	r0, #0
    9474:	210a      	movs	r1, #10
    9476:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9478:	7822      	ldrb	r2, [r4, #0]
    947a:	3a30      	subs	r2, #48	; 0x30
    947c:	2a09      	cmp	r2, #9
    947e:	d955      	bls.n	952c <_svfiprintf_r+0x180>
    9480:	2800      	cmp	r0, #0
    9482:	d015      	beq.n	94b0 <_svfiprintf_r+0x104>
    9484:	9309      	str	r3, [sp, #36]	; 0x24
    9486:	e013      	b.n	94b0 <_svfiprintf_r+0x104>
    9488:	2b25      	cmp	r3, #37	; 0x25
    948a:	d0b5      	beq.n	93f8 <_svfiprintf_r+0x4c>
    948c:	3401      	adds	r4, #1
    948e:	e7b0      	b.n	93f2 <_svfiprintf_r+0x46>
    9490:	2301      	movs	r3, #1
    9492:	1b80      	subs	r0, r0, r6
    9494:	4083      	lsls	r3, r0
    9496:	6829      	ldr	r1, [r5, #0]
    9498:	0014      	movs	r4, r2
    949a:	430b      	orrs	r3, r1
    949c:	602b      	str	r3, [r5, #0]
    949e:	e7cd      	b.n	943c <_svfiprintf_r+0x90>
    94a0:	9b05      	ldr	r3, [sp, #20]
    94a2:	1d18      	adds	r0, r3, #4
    94a4:	681b      	ldr	r3, [r3, #0]
    94a6:	9005      	str	r0, [sp, #20]
    94a8:	2b00      	cmp	r3, #0
    94aa:	db39      	blt.n	9520 <_svfiprintf_r+0x174>
    94ac:	9309      	str	r3, [sp, #36]	; 0x24
    94ae:	0014      	movs	r4, r2
    94b0:	7823      	ldrb	r3, [r4, #0]
    94b2:	2b2e      	cmp	r3, #46	; 0x2e
    94b4:	d10b      	bne.n	94ce <_svfiprintf_r+0x122>
    94b6:	7863      	ldrb	r3, [r4, #1]
    94b8:	1c62      	adds	r2, r4, #1
    94ba:	2b2a      	cmp	r3, #42	; 0x2a
    94bc:	d13e      	bne.n	953c <_svfiprintf_r+0x190>
    94be:	9b05      	ldr	r3, [sp, #20]
    94c0:	3402      	adds	r4, #2
    94c2:	1d1a      	adds	r2, r3, #4
    94c4:	681b      	ldr	r3, [r3, #0]
    94c6:	9205      	str	r2, [sp, #20]
    94c8:	2b00      	cmp	r3, #0
    94ca:	db34      	blt.n	9536 <_svfiprintf_r+0x18a>
    94cc:	9307      	str	r3, [sp, #28]
    94ce:	4e35      	ldr	r6, [pc, #212]	; (95a4 <_svfiprintf_r+0x1f8>)
    94d0:	7821      	ldrb	r1, [r4, #0]
    94d2:	2203      	movs	r2, #3
    94d4:	0030      	movs	r0, r6
    94d6:	f000 fa12 	bl	98fe <memchr>
    94da:	2800      	cmp	r0, #0
    94dc:	d006      	beq.n	94ec <_svfiprintf_r+0x140>
    94de:	2340      	movs	r3, #64	; 0x40
    94e0:	1b80      	subs	r0, r0, r6
    94e2:	4083      	lsls	r3, r0
    94e4:	682a      	ldr	r2, [r5, #0]
    94e6:	3401      	adds	r4, #1
    94e8:	4313      	orrs	r3, r2
    94ea:	602b      	str	r3, [r5, #0]
    94ec:	7821      	ldrb	r1, [r4, #0]
    94ee:	2206      	movs	r2, #6
    94f0:	482d      	ldr	r0, [pc, #180]	; (95a8 <_svfiprintf_r+0x1fc>)
    94f2:	1c66      	adds	r6, r4, #1
    94f4:	7629      	strb	r1, [r5, #24]
    94f6:	f000 fa02 	bl	98fe <memchr>
    94fa:	2800      	cmp	r0, #0
    94fc:	d046      	beq.n	958c <_svfiprintf_r+0x1e0>
    94fe:	4b2b      	ldr	r3, [pc, #172]	; (95ac <_svfiprintf_r+0x200>)
    9500:	2b00      	cmp	r3, #0
    9502:	d12f      	bne.n	9564 <_svfiprintf_r+0x1b8>
    9504:	6829      	ldr	r1, [r5, #0]
    9506:	9b05      	ldr	r3, [sp, #20]
    9508:	2207      	movs	r2, #7
    950a:	05c9      	lsls	r1, r1, #23
    950c:	d528      	bpl.n	9560 <_svfiprintf_r+0x1b4>
    950e:	189b      	adds	r3, r3, r2
    9510:	4393      	bics	r3, r2
    9512:	3308      	adds	r3, #8
    9514:	9305      	str	r3, [sp, #20]
    9516:	696b      	ldr	r3, [r5, #20]
    9518:	9a03      	ldr	r2, [sp, #12]
    951a:	189b      	adds	r3, r3, r2
    951c:	616b      	str	r3, [r5, #20]
    951e:	e767      	b.n	93f0 <_svfiprintf_r+0x44>
    9520:	425b      	negs	r3, r3
    9522:	60eb      	str	r3, [r5, #12]
    9524:	2302      	movs	r3, #2
    9526:	430b      	orrs	r3, r1
    9528:	602b      	str	r3, [r5, #0]
    952a:	e7c0      	b.n	94ae <_svfiprintf_r+0x102>
    952c:	434b      	muls	r3, r1
    952e:	3401      	adds	r4, #1
    9530:	189b      	adds	r3, r3, r2
    9532:	2001      	movs	r0, #1
    9534:	e7a0      	b.n	9478 <_svfiprintf_r+0xcc>
    9536:	2301      	movs	r3, #1
    9538:	425b      	negs	r3, r3
    953a:	e7c7      	b.n	94cc <_svfiprintf_r+0x120>
    953c:	2300      	movs	r3, #0
    953e:	0014      	movs	r4, r2
    9540:	200a      	movs	r0, #10
    9542:	001a      	movs	r2, r3
    9544:	606b      	str	r3, [r5, #4]
    9546:	7821      	ldrb	r1, [r4, #0]
    9548:	3930      	subs	r1, #48	; 0x30
    954a:	2909      	cmp	r1, #9
    954c:	d903      	bls.n	9556 <_svfiprintf_r+0x1aa>
    954e:	2b00      	cmp	r3, #0
    9550:	d0bd      	beq.n	94ce <_svfiprintf_r+0x122>
    9552:	9207      	str	r2, [sp, #28]
    9554:	e7bb      	b.n	94ce <_svfiprintf_r+0x122>
    9556:	4342      	muls	r2, r0
    9558:	3401      	adds	r4, #1
    955a:	1852      	adds	r2, r2, r1
    955c:	2301      	movs	r3, #1
    955e:	e7f2      	b.n	9546 <_svfiprintf_r+0x19a>
    9560:	3307      	adds	r3, #7
    9562:	e7d5      	b.n	9510 <_svfiprintf_r+0x164>
    9564:	ab05      	add	r3, sp, #20
    9566:	9300      	str	r3, [sp, #0]
    9568:	003a      	movs	r2, r7
    956a:	4b11      	ldr	r3, [pc, #68]	; (95b0 <_svfiprintf_r+0x204>)
    956c:	0029      	movs	r1, r5
    956e:	9802      	ldr	r0, [sp, #8]
    9570:	e000      	b.n	9574 <_svfiprintf_r+0x1c8>
    9572:	bf00      	nop
    9574:	9003      	str	r0, [sp, #12]
    9576:	9b03      	ldr	r3, [sp, #12]
    9578:	3301      	adds	r3, #1
    957a:	d1cc      	bne.n	9516 <_svfiprintf_r+0x16a>
    957c:	89bb      	ldrh	r3, [r7, #12]
    957e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9580:	065b      	lsls	r3, r3, #25
    9582:	d400      	bmi.n	9586 <_svfiprintf_r+0x1da>
    9584:	e729      	b.n	93da <_svfiprintf_r+0x2e>
    9586:	2001      	movs	r0, #1
    9588:	4240      	negs	r0, r0
    958a:	e726      	b.n	93da <_svfiprintf_r+0x2e>
    958c:	ab05      	add	r3, sp, #20
    958e:	9300      	str	r3, [sp, #0]
    9590:	003a      	movs	r2, r7
    9592:	4b07      	ldr	r3, [pc, #28]	; (95b0 <_svfiprintf_r+0x204>)
    9594:	0029      	movs	r1, r5
    9596:	9802      	ldr	r0, [sp, #8]
    9598:	f000 f87a 	bl	9690 <_printf_i>
    959c:	e7ea      	b.n	9574 <_svfiprintf_r+0x1c8>
    959e:	46c0      	nop			; (mov r8, r8)
    95a0:	0000aa6c 	.word	0x0000aa6c
    95a4:	0000aa72 	.word	0x0000aa72
    95a8:	0000aa76 	.word	0x0000aa76
    95ac:	00000000 	.word	0x00000000
    95b0:	000092e9 	.word	0x000092e9

000095b4 <_printf_common>:
    95b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    95b6:	0015      	movs	r5, r2
    95b8:	9301      	str	r3, [sp, #4]
    95ba:	688a      	ldr	r2, [r1, #8]
    95bc:	690b      	ldr	r3, [r1, #16]
    95be:	9000      	str	r0, [sp, #0]
    95c0:	000c      	movs	r4, r1
    95c2:	4293      	cmp	r3, r2
    95c4:	da00      	bge.n	95c8 <_printf_common+0x14>
    95c6:	0013      	movs	r3, r2
    95c8:	0022      	movs	r2, r4
    95ca:	602b      	str	r3, [r5, #0]
    95cc:	3243      	adds	r2, #67	; 0x43
    95ce:	7812      	ldrb	r2, [r2, #0]
    95d0:	2a00      	cmp	r2, #0
    95d2:	d001      	beq.n	95d8 <_printf_common+0x24>
    95d4:	3301      	adds	r3, #1
    95d6:	602b      	str	r3, [r5, #0]
    95d8:	6823      	ldr	r3, [r4, #0]
    95da:	069b      	lsls	r3, r3, #26
    95dc:	d502      	bpl.n	95e4 <_printf_common+0x30>
    95de:	682b      	ldr	r3, [r5, #0]
    95e0:	3302      	adds	r3, #2
    95e2:	602b      	str	r3, [r5, #0]
    95e4:	2706      	movs	r7, #6
    95e6:	6823      	ldr	r3, [r4, #0]
    95e8:	401f      	ands	r7, r3
    95ea:	d027      	beq.n	963c <_printf_common+0x88>
    95ec:	0023      	movs	r3, r4
    95ee:	3343      	adds	r3, #67	; 0x43
    95f0:	781b      	ldrb	r3, [r3, #0]
    95f2:	1e5a      	subs	r2, r3, #1
    95f4:	4193      	sbcs	r3, r2
    95f6:	6822      	ldr	r2, [r4, #0]
    95f8:	0692      	lsls	r2, r2, #26
    95fa:	d430      	bmi.n	965e <_printf_common+0xaa>
    95fc:	0022      	movs	r2, r4
    95fe:	9901      	ldr	r1, [sp, #4]
    9600:	3243      	adds	r2, #67	; 0x43
    9602:	9800      	ldr	r0, [sp, #0]
    9604:	9e08      	ldr	r6, [sp, #32]
    9606:	47b0      	blx	r6
    9608:	1c43      	adds	r3, r0, #1
    960a:	d025      	beq.n	9658 <_printf_common+0xa4>
    960c:	2306      	movs	r3, #6
    960e:	6820      	ldr	r0, [r4, #0]
    9610:	682a      	ldr	r2, [r5, #0]
    9612:	68e1      	ldr	r1, [r4, #12]
    9614:	4003      	ands	r3, r0
    9616:	2500      	movs	r5, #0
    9618:	2b04      	cmp	r3, #4
    961a:	d103      	bne.n	9624 <_printf_common+0x70>
    961c:	1a8d      	subs	r5, r1, r2
    961e:	43eb      	mvns	r3, r5
    9620:	17db      	asrs	r3, r3, #31
    9622:	401d      	ands	r5, r3
    9624:	68a3      	ldr	r3, [r4, #8]
    9626:	6922      	ldr	r2, [r4, #16]
    9628:	4293      	cmp	r3, r2
    962a:	dd01      	ble.n	9630 <_printf_common+0x7c>
    962c:	1a9b      	subs	r3, r3, r2
    962e:	18ed      	adds	r5, r5, r3
    9630:	2700      	movs	r7, #0
    9632:	42bd      	cmp	r5, r7
    9634:	d120      	bne.n	9678 <_printf_common+0xc4>
    9636:	2000      	movs	r0, #0
    9638:	e010      	b.n	965c <_printf_common+0xa8>
    963a:	3701      	adds	r7, #1
    963c:	68e3      	ldr	r3, [r4, #12]
    963e:	682a      	ldr	r2, [r5, #0]
    9640:	1a9b      	subs	r3, r3, r2
    9642:	429f      	cmp	r7, r3
    9644:	dad2      	bge.n	95ec <_printf_common+0x38>
    9646:	0022      	movs	r2, r4
    9648:	2301      	movs	r3, #1
    964a:	3219      	adds	r2, #25
    964c:	9901      	ldr	r1, [sp, #4]
    964e:	9800      	ldr	r0, [sp, #0]
    9650:	9e08      	ldr	r6, [sp, #32]
    9652:	47b0      	blx	r6
    9654:	1c43      	adds	r3, r0, #1
    9656:	d1f0      	bne.n	963a <_printf_common+0x86>
    9658:	2001      	movs	r0, #1
    965a:	4240      	negs	r0, r0
    965c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    965e:	2030      	movs	r0, #48	; 0x30
    9660:	18e1      	adds	r1, r4, r3
    9662:	3143      	adds	r1, #67	; 0x43
    9664:	7008      	strb	r0, [r1, #0]
    9666:	0021      	movs	r1, r4
    9668:	1c5a      	adds	r2, r3, #1
    966a:	3145      	adds	r1, #69	; 0x45
    966c:	7809      	ldrb	r1, [r1, #0]
    966e:	18a2      	adds	r2, r4, r2
    9670:	3243      	adds	r2, #67	; 0x43
    9672:	3302      	adds	r3, #2
    9674:	7011      	strb	r1, [r2, #0]
    9676:	e7c1      	b.n	95fc <_printf_common+0x48>
    9678:	0022      	movs	r2, r4
    967a:	2301      	movs	r3, #1
    967c:	321a      	adds	r2, #26
    967e:	9901      	ldr	r1, [sp, #4]
    9680:	9800      	ldr	r0, [sp, #0]
    9682:	9e08      	ldr	r6, [sp, #32]
    9684:	47b0      	blx	r6
    9686:	1c43      	adds	r3, r0, #1
    9688:	d0e6      	beq.n	9658 <_printf_common+0xa4>
    968a:	3701      	adds	r7, #1
    968c:	e7d1      	b.n	9632 <_printf_common+0x7e>
	...

00009690 <_printf_i>:
    9690:	b5f0      	push	{r4, r5, r6, r7, lr}
    9692:	b08b      	sub	sp, #44	; 0x2c
    9694:	9206      	str	r2, [sp, #24]
    9696:	000a      	movs	r2, r1
    9698:	3243      	adds	r2, #67	; 0x43
    969a:	9307      	str	r3, [sp, #28]
    969c:	9005      	str	r0, [sp, #20]
    969e:	9204      	str	r2, [sp, #16]
    96a0:	7e0a      	ldrb	r2, [r1, #24]
    96a2:	000c      	movs	r4, r1
    96a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    96a6:	2a6e      	cmp	r2, #110	; 0x6e
    96a8:	d100      	bne.n	96ac <_printf_i+0x1c>
    96aa:	e08f      	b.n	97cc <_printf_i+0x13c>
    96ac:	d817      	bhi.n	96de <_printf_i+0x4e>
    96ae:	2a63      	cmp	r2, #99	; 0x63
    96b0:	d02c      	beq.n	970c <_printf_i+0x7c>
    96b2:	d808      	bhi.n	96c6 <_printf_i+0x36>
    96b4:	2a00      	cmp	r2, #0
    96b6:	d100      	bne.n	96ba <_printf_i+0x2a>
    96b8:	e099      	b.n	97ee <_printf_i+0x15e>
    96ba:	2a58      	cmp	r2, #88	; 0x58
    96bc:	d054      	beq.n	9768 <_printf_i+0xd8>
    96be:	0026      	movs	r6, r4
    96c0:	3642      	adds	r6, #66	; 0x42
    96c2:	7032      	strb	r2, [r6, #0]
    96c4:	e029      	b.n	971a <_printf_i+0x8a>
    96c6:	2a64      	cmp	r2, #100	; 0x64
    96c8:	d001      	beq.n	96ce <_printf_i+0x3e>
    96ca:	2a69      	cmp	r2, #105	; 0x69
    96cc:	d1f7      	bne.n	96be <_printf_i+0x2e>
    96ce:	6821      	ldr	r1, [r4, #0]
    96d0:	681a      	ldr	r2, [r3, #0]
    96d2:	0608      	lsls	r0, r1, #24
    96d4:	d523      	bpl.n	971e <_printf_i+0x8e>
    96d6:	1d11      	adds	r1, r2, #4
    96d8:	6019      	str	r1, [r3, #0]
    96da:	6815      	ldr	r5, [r2, #0]
    96dc:	e025      	b.n	972a <_printf_i+0x9a>
    96de:	2a73      	cmp	r2, #115	; 0x73
    96e0:	d100      	bne.n	96e4 <_printf_i+0x54>
    96e2:	e088      	b.n	97f6 <_printf_i+0x166>
    96e4:	d808      	bhi.n	96f8 <_printf_i+0x68>
    96e6:	2a6f      	cmp	r2, #111	; 0x6f
    96e8:	d029      	beq.n	973e <_printf_i+0xae>
    96ea:	2a70      	cmp	r2, #112	; 0x70
    96ec:	d1e7      	bne.n	96be <_printf_i+0x2e>
    96ee:	2220      	movs	r2, #32
    96f0:	6809      	ldr	r1, [r1, #0]
    96f2:	430a      	orrs	r2, r1
    96f4:	6022      	str	r2, [r4, #0]
    96f6:	e003      	b.n	9700 <_printf_i+0x70>
    96f8:	2a75      	cmp	r2, #117	; 0x75
    96fa:	d020      	beq.n	973e <_printf_i+0xae>
    96fc:	2a78      	cmp	r2, #120	; 0x78
    96fe:	d1de      	bne.n	96be <_printf_i+0x2e>
    9700:	0022      	movs	r2, r4
    9702:	2178      	movs	r1, #120	; 0x78
    9704:	3245      	adds	r2, #69	; 0x45
    9706:	7011      	strb	r1, [r2, #0]
    9708:	4a6c      	ldr	r2, [pc, #432]	; (98bc <_printf_i+0x22c>)
    970a:	e030      	b.n	976e <_printf_i+0xde>
    970c:	000e      	movs	r6, r1
    970e:	681a      	ldr	r2, [r3, #0]
    9710:	3642      	adds	r6, #66	; 0x42
    9712:	1d11      	adds	r1, r2, #4
    9714:	6019      	str	r1, [r3, #0]
    9716:	6813      	ldr	r3, [r2, #0]
    9718:	7033      	strb	r3, [r6, #0]
    971a:	2301      	movs	r3, #1
    971c:	e079      	b.n	9812 <_printf_i+0x182>
    971e:	0649      	lsls	r1, r1, #25
    9720:	d5d9      	bpl.n	96d6 <_printf_i+0x46>
    9722:	1d11      	adds	r1, r2, #4
    9724:	6019      	str	r1, [r3, #0]
    9726:	2300      	movs	r3, #0
    9728:	5ed5      	ldrsh	r5, [r2, r3]
    972a:	2d00      	cmp	r5, #0
    972c:	da03      	bge.n	9736 <_printf_i+0xa6>
    972e:	232d      	movs	r3, #45	; 0x2d
    9730:	9a04      	ldr	r2, [sp, #16]
    9732:	426d      	negs	r5, r5
    9734:	7013      	strb	r3, [r2, #0]
    9736:	4b62      	ldr	r3, [pc, #392]	; (98c0 <_printf_i+0x230>)
    9738:	270a      	movs	r7, #10
    973a:	9303      	str	r3, [sp, #12]
    973c:	e02f      	b.n	979e <_printf_i+0x10e>
    973e:	6820      	ldr	r0, [r4, #0]
    9740:	6819      	ldr	r1, [r3, #0]
    9742:	0605      	lsls	r5, r0, #24
    9744:	d503      	bpl.n	974e <_printf_i+0xbe>
    9746:	1d08      	adds	r0, r1, #4
    9748:	6018      	str	r0, [r3, #0]
    974a:	680d      	ldr	r5, [r1, #0]
    974c:	e005      	b.n	975a <_printf_i+0xca>
    974e:	0640      	lsls	r0, r0, #25
    9750:	d5f9      	bpl.n	9746 <_printf_i+0xb6>
    9752:	680d      	ldr	r5, [r1, #0]
    9754:	1d08      	adds	r0, r1, #4
    9756:	6018      	str	r0, [r3, #0]
    9758:	b2ad      	uxth	r5, r5
    975a:	4b59      	ldr	r3, [pc, #356]	; (98c0 <_printf_i+0x230>)
    975c:	2708      	movs	r7, #8
    975e:	9303      	str	r3, [sp, #12]
    9760:	2a6f      	cmp	r2, #111	; 0x6f
    9762:	d018      	beq.n	9796 <_printf_i+0x106>
    9764:	270a      	movs	r7, #10
    9766:	e016      	b.n	9796 <_printf_i+0x106>
    9768:	3145      	adds	r1, #69	; 0x45
    976a:	700a      	strb	r2, [r1, #0]
    976c:	4a54      	ldr	r2, [pc, #336]	; (98c0 <_printf_i+0x230>)
    976e:	9203      	str	r2, [sp, #12]
    9770:	681a      	ldr	r2, [r3, #0]
    9772:	6821      	ldr	r1, [r4, #0]
    9774:	1d10      	adds	r0, r2, #4
    9776:	6018      	str	r0, [r3, #0]
    9778:	6815      	ldr	r5, [r2, #0]
    977a:	0608      	lsls	r0, r1, #24
    977c:	d522      	bpl.n	97c4 <_printf_i+0x134>
    977e:	07cb      	lsls	r3, r1, #31
    9780:	d502      	bpl.n	9788 <_printf_i+0xf8>
    9782:	2320      	movs	r3, #32
    9784:	4319      	orrs	r1, r3
    9786:	6021      	str	r1, [r4, #0]
    9788:	2710      	movs	r7, #16
    978a:	2d00      	cmp	r5, #0
    978c:	d103      	bne.n	9796 <_printf_i+0x106>
    978e:	2320      	movs	r3, #32
    9790:	6822      	ldr	r2, [r4, #0]
    9792:	439a      	bics	r2, r3
    9794:	6022      	str	r2, [r4, #0]
    9796:	0023      	movs	r3, r4
    9798:	2200      	movs	r2, #0
    979a:	3343      	adds	r3, #67	; 0x43
    979c:	701a      	strb	r2, [r3, #0]
    979e:	6863      	ldr	r3, [r4, #4]
    97a0:	60a3      	str	r3, [r4, #8]
    97a2:	2b00      	cmp	r3, #0
    97a4:	db5c      	blt.n	9860 <_printf_i+0x1d0>
    97a6:	2204      	movs	r2, #4
    97a8:	6821      	ldr	r1, [r4, #0]
    97aa:	4391      	bics	r1, r2
    97ac:	6021      	str	r1, [r4, #0]
    97ae:	2d00      	cmp	r5, #0
    97b0:	d158      	bne.n	9864 <_printf_i+0x1d4>
    97b2:	9e04      	ldr	r6, [sp, #16]
    97b4:	2b00      	cmp	r3, #0
    97b6:	d064      	beq.n	9882 <_printf_i+0x1f2>
    97b8:	0026      	movs	r6, r4
    97ba:	9b03      	ldr	r3, [sp, #12]
    97bc:	3642      	adds	r6, #66	; 0x42
    97be:	781b      	ldrb	r3, [r3, #0]
    97c0:	7033      	strb	r3, [r6, #0]
    97c2:	e05e      	b.n	9882 <_printf_i+0x1f2>
    97c4:	0648      	lsls	r0, r1, #25
    97c6:	d5da      	bpl.n	977e <_printf_i+0xee>
    97c8:	b2ad      	uxth	r5, r5
    97ca:	e7d8      	b.n	977e <_printf_i+0xee>
    97cc:	6809      	ldr	r1, [r1, #0]
    97ce:	681a      	ldr	r2, [r3, #0]
    97d0:	0608      	lsls	r0, r1, #24
    97d2:	d505      	bpl.n	97e0 <_printf_i+0x150>
    97d4:	1d11      	adds	r1, r2, #4
    97d6:	6019      	str	r1, [r3, #0]
    97d8:	6813      	ldr	r3, [r2, #0]
    97da:	6962      	ldr	r2, [r4, #20]
    97dc:	601a      	str	r2, [r3, #0]
    97de:	e006      	b.n	97ee <_printf_i+0x15e>
    97e0:	0649      	lsls	r1, r1, #25
    97e2:	d5f7      	bpl.n	97d4 <_printf_i+0x144>
    97e4:	1d11      	adds	r1, r2, #4
    97e6:	6019      	str	r1, [r3, #0]
    97e8:	6813      	ldr	r3, [r2, #0]
    97ea:	8aa2      	ldrh	r2, [r4, #20]
    97ec:	801a      	strh	r2, [r3, #0]
    97ee:	2300      	movs	r3, #0
    97f0:	9e04      	ldr	r6, [sp, #16]
    97f2:	6123      	str	r3, [r4, #16]
    97f4:	e054      	b.n	98a0 <_printf_i+0x210>
    97f6:	681a      	ldr	r2, [r3, #0]
    97f8:	1d11      	adds	r1, r2, #4
    97fa:	6019      	str	r1, [r3, #0]
    97fc:	6816      	ldr	r6, [r2, #0]
    97fe:	2100      	movs	r1, #0
    9800:	6862      	ldr	r2, [r4, #4]
    9802:	0030      	movs	r0, r6
    9804:	f000 f87b 	bl	98fe <memchr>
    9808:	2800      	cmp	r0, #0
    980a:	d001      	beq.n	9810 <_printf_i+0x180>
    980c:	1b80      	subs	r0, r0, r6
    980e:	6060      	str	r0, [r4, #4]
    9810:	6863      	ldr	r3, [r4, #4]
    9812:	6123      	str	r3, [r4, #16]
    9814:	2300      	movs	r3, #0
    9816:	9a04      	ldr	r2, [sp, #16]
    9818:	7013      	strb	r3, [r2, #0]
    981a:	e041      	b.n	98a0 <_printf_i+0x210>
    981c:	6923      	ldr	r3, [r4, #16]
    981e:	0032      	movs	r2, r6
    9820:	9906      	ldr	r1, [sp, #24]
    9822:	9805      	ldr	r0, [sp, #20]
    9824:	9d07      	ldr	r5, [sp, #28]
    9826:	47a8      	blx	r5
    9828:	1c43      	adds	r3, r0, #1
    982a:	d043      	beq.n	98b4 <_printf_i+0x224>
    982c:	6823      	ldr	r3, [r4, #0]
    982e:	2500      	movs	r5, #0
    9830:	079b      	lsls	r3, r3, #30
    9832:	d40f      	bmi.n	9854 <_printf_i+0x1c4>
    9834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9836:	68e0      	ldr	r0, [r4, #12]
    9838:	4298      	cmp	r0, r3
    983a:	da3d      	bge.n	98b8 <_printf_i+0x228>
    983c:	0018      	movs	r0, r3
    983e:	e03b      	b.n	98b8 <_printf_i+0x228>
    9840:	0022      	movs	r2, r4
    9842:	2301      	movs	r3, #1
    9844:	3219      	adds	r2, #25
    9846:	9906      	ldr	r1, [sp, #24]
    9848:	9805      	ldr	r0, [sp, #20]
    984a:	9e07      	ldr	r6, [sp, #28]
    984c:	47b0      	blx	r6
    984e:	1c43      	adds	r3, r0, #1
    9850:	d030      	beq.n	98b4 <_printf_i+0x224>
    9852:	3501      	adds	r5, #1
    9854:	68e3      	ldr	r3, [r4, #12]
    9856:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9858:	1a9b      	subs	r3, r3, r2
    985a:	429d      	cmp	r5, r3
    985c:	dbf0      	blt.n	9840 <_printf_i+0x1b0>
    985e:	e7e9      	b.n	9834 <_printf_i+0x1a4>
    9860:	2d00      	cmp	r5, #0
    9862:	d0a9      	beq.n	97b8 <_printf_i+0x128>
    9864:	9e04      	ldr	r6, [sp, #16]
    9866:	0028      	movs	r0, r5
    9868:	0039      	movs	r1, r7
    986a:	f7fb fd81 	bl	5370 <__aeabi_uidivmod>
    986e:	9b03      	ldr	r3, [sp, #12]
    9870:	3e01      	subs	r6, #1
    9872:	5c5b      	ldrb	r3, [r3, r1]
    9874:	0028      	movs	r0, r5
    9876:	7033      	strb	r3, [r6, #0]
    9878:	0039      	movs	r1, r7
    987a:	f7fb fcf3 	bl	5264 <__udivsi3>
    987e:	1e05      	subs	r5, r0, #0
    9880:	d1f1      	bne.n	9866 <_printf_i+0x1d6>
    9882:	2f08      	cmp	r7, #8
    9884:	d109      	bne.n	989a <_printf_i+0x20a>
    9886:	6823      	ldr	r3, [r4, #0]
    9888:	07db      	lsls	r3, r3, #31
    988a:	d506      	bpl.n	989a <_printf_i+0x20a>
    988c:	6863      	ldr	r3, [r4, #4]
    988e:	6922      	ldr	r2, [r4, #16]
    9890:	4293      	cmp	r3, r2
    9892:	dc02      	bgt.n	989a <_printf_i+0x20a>
    9894:	2330      	movs	r3, #48	; 0x30
    9896:	3e01      	subs	r6, #1
    9898:	7033      	strb	r3, [r6, #0]
    989a:	9b04      	ldr	r3, [sp, #16]
    989c:	1b9b      	subs	r3, r3, r6
    989e:	6123      	str	r3, [r4, #16]
    98a0:	9b07      	ldr	r3, [sp, #28]
    98a2:	aa09      	add	r2, sp, #36	; 0x24
    98a4:	9300      	str	r3, [sp, #0]
    98a6:	0021      	movs	r1, r4
    98a8:	9b06      	ldr	r3, [sp, #24]
    98aa:	9805      	ldr	r0, [sp, #20]
    98ac:	f7ff fe82 	bl	95b4 <_printf_common>
    98b0:	1c43      	adds	r3, r0, #1
    98b2:	d1b3      	bne.n	981c <_printf_i+0x18c>
    98b4:	2001      	movs	r0, #1
    98b6:	4240      	negs	r0, r0
    98b8:	b00b      	add	sp, #44	; 0x2c
    98ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98bc:	0000aa8e 	.word	0x0000aa8e
    98c0:	0000aa7d 	.word	0x0000aa7d

000098c4 <strncmp>:
    98c4:	2300      	movs	r3, #0
    98c6:	b530      	push	{r4, r5, lr}
    98c8:	429a      	cmp	r2, r3
    98ca:	d00a      	beq.n	98e2 <strncmp+0x1e>
    98cc:	3a01      	subs	r2, #1
    98ce:	5cc4      	ldrb	r4, [r0, r3]
    98d0:	5ccd      	ldrb	r5, [r1, r3]
    98d2:	42ac      	cmp	r4, r5
    98d4:	d104      	bne.n	98e0 <strncmp+0x1c>
    98d6:	429a      	cmp	r2, r3
    98d8:	d002      	beq.n	98e0 <strncmp+0x1c>
    98da:	3301      	adds	r3, #1
    98dc:	2c00      	cmp	r4, #0
    98de:	d1f6      	bne.n	98ce <strncmp+0xa>
    98e0:	1b63      	subs	r3, r4, r5
    98e2:	0018      	movs	r0, r3
    98e4:	bd30      	pop	{r4, r5, pc}

000098e6 <__ascii_wctomb>:
    98e6:	1e0b      	subs	r3, r1, #0
    98e8:	d004      	beq.n	98f4 <__ascii_wctomb+0xe>
    98ea:	2aff      	cmp	r2, #255	; 0xff
    98ec:	d904      	bls.n	98f8 <__ascii_wctomb+0x12>
    98ee:	238a      	movs	r3, #138	; 0x8a
    98f0:	6003      	str	r3, [r0, #0]
    98f2:	3b8b      	subs	r3, #139	; 0x8b
    98f4:	0018      	movs	r0, r3
    98f6:	4770      	bx	lr
    98f8:	700a      	strb	r2, [r1, #0]
    98fa:	2301      	movs	r3, #1
    98fc:	e7fa      	b.n	98f4 <__ascii_wctomb+0xe>

000098fe <memchr>:
    98fe:	b2c9      	uxtb	r1, r1
    9900:	1882      	adds	r2, r0, r2
    9902:	4290      	cmp	r0, r2
    9904:	d101      	bne.n	990a <memchr+0xc>
    9906:	2000      	movs	r0, #0
    9908:	4770      	bx	lr
    990a:	7803      	ldrb	r3, [r0, #0]
    990c:	428b      	cmp	r3, r1
    990e:	d0fb      	beq.n	9908 <memchr+0xa>
    9910:	3001      	adds	r0, #1
    9912:	e7f6      	b.n	9902 <memchr+0x4>

00009914 <memmove>:
    9914:	b510      	push	{r4, lr}
    9916:	4288      	cmp	r0, r1
    9918:	d902      	bls.n	9920 <memmove+0xc>
    991a:	188b      	adds	r3, r1, r2
    991c:	4298      	cmp	r0, r3
    991e:	d308      	bcc.n	9932 <memmove+0x1e>
    9920:	2300      	movs	r3, #0
    9922:	429a      	cmp	r2, r3
    9924:	d007      	beq.n	9936 <memmove+0x22>
    9926:	5ccc      	ldrb	r4, [r1, r3]
    9928:	54c4      	strb	r4, [r0, r3]
    992a:	3301      	adds	r3, #1
    992c:	e7f9      	b.n	9922 <memmove+0xe>
    992e:	5c8b      	ldrb	r3, [r1, r2]
    9930:	5483      	strb	r3, [r0, r2]
    9932:	3a01      	subs	r2, #1
    9934:	d2fb      	bcs.n	992e <memmove+0x1a>
    9936:	bd10      	pop	{r4, pc}

00009938 <_realloc_r>:
    9938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    993a:	0007      	movs	r7, r0
    993c:	000d      	movs	r5, r1
    993e:	0016      	movs	r6, r2
    9940:	2900      	cmp	r1, #0
    9942:	d105      	bne.n	9950 <_realloc_r+0x18>
    9944:	0011      	movs	r1, r2
    9946:	f7fd fd0f 	bl	7368 <_malloc_r>
    994a:	0004      	movs	r4, r0
    994c:	0020      	movs	r0, r4
    994e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9950:	2a00      	cmp	r2, #0
    9952:	d103      	bne.n	995c <_realloc_r+0x24>
    9954:	f7fd fcbe 	bl	72d4 <_free_r>
    9958:	0034      	movs	r4, r6
    995a:	e7f7      	b.n	994c <_realloc_r+0x14>
    995c:	f000 f812 	bl	9984 <_malloc_usable_size_r>
    9960:	002c      	movs	r4, r5
    9962:	4286      	cmp	r6, r0
    9964:	d9f2      	bls.n	994c <_realloc_r+0x14>
    9966:	0031      	movs	r1, r6
    9968:	0038      	movs	r0, r7
    996a:	f7fd fcfd 	bl	7368 <_malloc_r>
    996e:	1e04      	subs	r4, r0, #0
    9970:	d0ec      	beq.n	994c <_realloc_r+0x14>
    9972:	0029      	movs	r1, r5
    9974:	0032      	movs	r2, r6
    9976:	f7fd fc9b 	bl	72b0 <memcpy>
    997a:	0029      	movs	r1, r5
    997c:	0038      	movs	r0, r7
    997e:	f7fd fca9 	bl	72d4 <_free_r>
    9982:	e7e3      	b.n	994c <_realloc_r+0x14>

00009984 <_malloc_usable_size_r>:
    9984:	1f0b      	subs	r3, r1, #4
    9986:	681b      	ldr	r3, [r3, #0]
    9988:	1f18      	subs	r0, r3, #4
    998a:	2b00      	cmp	r3, #0
    998c:	da01      	bge.n	9992 <_malloc_usable_size_r+0xe>
    998e:	580b      	ldr	r3, [r1, r0]
    9990:	18c0      	adds	r0, r0, r3
    9992:	4770      	bx	lr

00009994 <__gnu_thumb1_case_uqi>:
    9994:	b402      	push	{r1}
    9996:	4671      	mov	r1, lr
    9998:	0849      	lsrs	r1, r1, #1
    999a:	0049      	lsls	r1, r1, #1
    999c:	5c09      	ldrb	r1, [r1, r0]
    999e:	0049      	lsls	r1, r1, #1
    99a0:	448e      	add	lr, r1
    99a2:	bc02      	pop	{r1}
    99a4:	4770      	bx	lr
    99a6:	46c0      	nop			; (mov r8, r8)

000099a8 <__aeabi_ddiv>:
    99a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    99aa:	4657      	mov	r7, sl
    99ac:	4645      	mov	r5, r8
    99ae:	46de      	mov	lr, fp
    99b0:	464e      	mov	r6, r9
    99b2:	b5e0      	push	{r5, r6, r7, lr}
    99b4:	004c      	lsls	r4, r1, #1
    99b6:	030e      	lsls	r6, r1, #12
    99b8:	b087      	sub	sp, #28
    99ba:	4683      	mov	fp, r0
    99bc:	4692      	mov	sl, r2
    99be:	001d      	movs	r5, r3
    99c0:	4680      	mov	r8, r0
    99c2:	0b36      	lsrs	r6, r6, #12
    99c4:	0d64      	lsrs	r4, r4, #21
    99c6:	0fcf      	lsrs	r7, r1, #31
    99c8:	2c00      	cmp	r4, #0
    99ca:	d04f      	beq.n	9a6c <__aeabi_ddiv+0xc4>
    99cc:	4b6f      	ldr	r3, [pc, #444]	; (9b8c <__aeabi_ddiv+0x1e4>)
    99ce:	429c      	cmp	r4, r3
    99d0:	d035      	beq.n	9a3e <__aeabi_ddiv+0x96>
    99d2:	2380      	movs	r3, #128	; 0x80
    99d4:	0f42      	lsrs	r2, r0, #29
    99d6:	041b      	lsls	r3, r3, #16
    99d8:	00f6      	lsls	r6, r6, #3
    99da:	4313      	orrs	r3, r2
    99dc:	4333      	orrs	r3, r6
    99de:	4699      	mov	r9, r3
    99e0:	00c3      	lsls	r3, r0, #3
    99e2:	4698      	mov	r8, r3
    99e4:	4b6a      	ldr	r3, [pc, #424]	; (9b90 <__aeabi_ddiv+0x1e8>)
    99e6:	2600      	movs	r6, #0
    99e8:	469c      	mov	ip, r3
    99ea:	2300      	movs	r3, #0
    99ec:	4464      	add	r4, ip
    99ee:	9303      	str	r3, [sp, #12]
    99f0:	032b      	lsls	r3, r5, #12
    99f2:	0b1b      	lsrs	r3, r3, #12
    99f4:	469b      	mov	fp, r3
    99f6:	006b      	lsls	r3, r5, #1
    99f8:	0fed      	lsrs	r5, r5, #31
    99fa:	4650      	mov	r0, sl
    99fc:	0d5b      	lsrs	r3, r3, #21
    99fe:	9501      	str	r5, [sp, #4]
    9a00:	d05e      	beq.n	9ac0 <__aeabi_ddiv+0x118>
    9a02:	4a62      	ldr	r2, [pc, #392]	; (9b8c <__aeabi_ddiv+0x1e4>)
    9a04:	4293      	cmp	r3, r2
    9a06:	d053      	beq.n	9ab0 <__aeabi_ddiv+0x108>
    9a08:	465a      	mov	r2, fp
    9a0a:	00d1      	lsls	r1, r2, #3
    9a0c:	2280      	movs	r2, #128	; 0x80
    9a0e:	0f40      	lsrs	r0, r0, #29
    9a10:	0412      	lsls	r2, r2, #16
    9a12:	4302      	orrs	r2, r0
    9a14:	430a      	orrs	r2, r1
    9a16:	4693      	mov	fp, r2
    9a18:	4652      	mov	r2, sl
    9a1a:	00d1      	lsls	r1, r2, #3
    9a1c:	4a5c      	ldr	r2, [pc, #368]	; (9b90 <__aeabi_ddiv+0x1e8>)
    9a1e:	4694      	mov	ip, r2
    9a20:	2200      	movs	r2, #0
    9a22:	4463      	add	r3, ip
    9a24:	0038      	movs	r0, r7
    9a26:	4068      	eors	r0, r5
    9a28:	4684      	mov	ip, r0
    9a2a:	9002      	str	r0, [sp, #8]
    9a2c:	1ae4      	subs	r4, r4, r3
    9a2e:	4316      	orrs	r6, r2
    9a30:	2e0f      	cmp	r6, #15
    9a32:	d900      	bls.n	9a36 <__aeabi_ddiv+0x8e>
    9a34:	e0b4      	b.n	9ba0 <__aeabi_ddiv+0x1f8>
    9a36:	4b57      	ldr	r3, [pc, #348]	; (9b94 <__aeabi_ddiv+0x1ec>)
    9a38:	00b6      	lsls	r6, r6, #2
    9a3a:	599b      	ldr	r3, [r3, r6]
    9a3c:	469f      	mov	pc, r3
    9a3e:	0003      	movs	r3, r0
    9a40:	4333      	orrs	r3, r6
    9a42:	4699      	mov	r9, r3
    9a44:	d16c      	bne.n	9b20 <__aeabi_ddiv+0x178>
    9a46:	2300      	movs	r3, #0
    9a48:	4698      	mov	r8, r3
    9a4a:	3302      	adds	r3, #2
    9a4c:	2608      	movs	r6, #8
    9a4e:	9303      	str	r3, [sp, #12]
    9a50:	e7ce      	b.n	99f0 <__aeabi_ddiv+0x48>
    9a52:	46cb      	mov	fp, r9
    9a54:	4641      	mov	r1, r8
    9a56:	9a03      	ldr	r2, [sp, #12]
    9a58:	9701      	str	r7, [sp, #4]
    9a5a:	2a02      	cmp	r2, #2
    9a5c:	d165      	bne.n	9b2a <__aeabi_ddiv+0x182>
    9a5e:	9b01      	ldr	r3, [sp, #4]
    9a60:	4c4a      	ldr	r4, [pc, #296]	; (9b8c <__aeabi_ddiv+0x1e4>)
    9a62:	469c      	mov	ip, r3
    9a64:	2300      	movs	r3, #0
    9a66:	2200      	movs	r2, #0
    9a68:	4698      	mov	r8, r3
    9a6a:	e06b      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9a6c:	0003      	movs	r3, r0
    9a6e:	4333      	orrs	r3, r6
    9a70:	4699      	mov	r9, r3
    9a72:	d04e      	beq.n	9b12 <__aeabi_ddiv+0x16a>
    9a74:	2e00      	cmp	r6, #0
    9a76:	d100      	bne.n	9a7a <__aeabi_ddiv+0xd2>
    9a78:	e1bc      	b.n	9df4 <__aeabi_ddiv+0x44c>
    9a7a:	0030      	movs	r0, r6
    9a7c:	f7fb fde0 	bl	5640 <__clzsi2>
    9a80:	0003      	movs	r3, r0
    9a82:	3b0b      	subs	r3, #11
    9a84:	2b1c      	cmp	r3, #28
    9a86:	dd00      	ble.n	9a8a <__aeabi_ddiv+0xe2>
    9a88:	e1ac      	b.n	9de4 <__aeabi_ddiv+0x43c>
    9a8a:	221d      	movs	r2, #29
    9a8c:	1ad3      	subs	r3, r2, r3
    9a8e:	465a      	mov	r2, fp
    9a90:	0001      	movs	r1, r0
    9a92:	40da      	lsrs	r2, r3
    9a94:	3908      	subs	r1, #8
    9a96:	408e      	lsls	r6, r1
    9a98:	0013      	movs	r3, r2
    9a9a:	4333      	orrs	r3, r6
    9a9c:	4699      	mov	r9, r3
    9a9e:	465b      	mov	r3, fp
    9aa0:	408b      	lsls	r3, r1
    9aa2:	4698      	mov	r8, r3
    9aa4:	2300      	movs	r3, #0
    9aa6:	4c3c      	ldr	r4, [pc, #240]	; (9b98 <__aeabi_ddiv+0x1f0>)
    9aa8:	2600      	movs	r6, #0
    9aaa:	1a24      	subs	r4, r4, r0
    9aac:	9303      	str	r3, [sp, #12]
    9aae:	e79f      	b.n	99f0 <__aeabi_ddiv+0x48>
    9ab0:	4651      	mov	r1, sl
    9ab2:	465a      	mov	r2, fp
    9ab4:	4311      	orrs	r1, r2
    9ab6:	d129      	bne.n	9b0c <__aeabi_ddiv+0x164>
    9ab8:	2200      	movs	r2, #0
    9aba:	4693      	mov	fp, r2
    9abc:	3202      	adds	r2, #2
    9abe:	e7b1      	b.n	9a24 <__aeabi_ddiv+0x7c>
    9ac0:	4659      	mov	r1, fp
    9ac2:	4301      	orrs	r1, r0
    9ac4:	d01e      	beq.n	9b04 <__aeabi_ddiv+0x15c>
    9ac6:	465b      	mov	r3, fp
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d100      	bne.n	9ace <__aeabi_ddiv+0x126>
    9acc:	e19e      	b.n	9e0c <__aeabi_ddiv+0x464>
    9ace:	4658      	mov	r0, fp
    9ad0:	f7fb fdb6 	bl	5640 <__clzsi2>
    9ad4:	0003      	movs	r3, r0
    9ad6:	3b0b      	subs	r3, #11
    9ad8:	2b1c      	cmp	r3, #28
    9ada:	dd00      	ble.n	9ade <__aeabi_ddiv+0x136>
    9adc:	e18f      	b.n	9dfe <__aeabi_ddiv+0x456>
    9ade:	0002      	movs	r2, r0
    9ae0:	4659      	mov	r1, fp
    9ae2:	3a08      	subs	r2, #8
    9ae4:	4091      	lsls	r1, r2
    9ae6:	468b      	mov	fp, r1
    9ae8:	211d      	movs	r1, #29
    9aea:	1acb      	subs	r3, r1, r3
    9aec:	4651      	mov	r1, sl
    9aee:	40d9      	lsrs	r1, r3
    9af0:	000b      	movs	r3, r1
    9af2:	4659      	mov	r1, fp
    9af4:	430b      	orrs	r3, r1
    9af6:	4651      	mov	r1, sl
    9af8:	469b      	mov	fp, r3
    9afa:	4091      	lsls	r1, r2
    9afc:	4b26      	ldr	r3, [pc, #152]	; (9b98 <__aeabi_ddiv+0x1f0>)
    9afe:	2200      	movs	r2, #0
    9b00:	1a1b      	subs	r3, r3, r0
    9b02:	e78f      	b.n	9a24 <__aeabi_ddiv+0x7c>
    9b04:	2300      	movs	r3, #0
    9b06:	2201      	movs	r2, #1
    9b08:	469b      	mov	fp, r3
    9b0a:	e78b      	b.n	9a24 <__aeabi_ddiv+0x7c>
    9b0c:	4651      	mov	r1, sl
    9b0e:	2203      	movs	r2, #3
    9b10:	e788      	b.n	9a24 <__aeabi_ddiv+0x7c>
    9b12:	2300      	movs	r3, #0
    9b14:	4698      	mov	r8, r3
    9b16:	3301      	adds	r3, #1
    9b18:	2604      	movs	r6, #4
    9b1a:	2400      	movs	r4, #0
    9b1c:	9303      	str	r3, [sp, #12]
    9b1e:	e767      	b.n	99f0 <__aeabi_ddiv+0x48>
    9b20:	2303      	movs	r3, #3
    9b22:	46b1      	mov	r9, r6
    9b24:	9303      	str	r3, [sp, #12]
    9b26:	260c      	movs	r6, #12
    9b28:	e762      	b.n	99f0 <__aeabi_ddiv+0x48>
    9b2a:	2a03      	cmp	r2, #3
    9b2c:	d100      	bne.n	9b30 <__aeabi_ddiv+0x188>
    9b2e:	e25c      	b.n	9fea <__aeabi_ddiv+0x642>
    9b30:	9b01      	ldr	r3, [sp, #4]
    9b32:	2a01      	cmp	r2, #1
    9b34:	d000      	beq.n	9b38 <__aeabi_ddiv+0x190>
    9b36:	e1e4      	b.n	9f02 <__aeabi_ddiv+0x55a>
    9b38:	4013      	ands	r3, r2
    9b3a:	469c      	mov	ip, r3
    9b3c:	2300      	movs	r3, #0
    9b3e:	2400      	movs	r4, #0
    9b40:	2200      	movs	r2, #0
    9b42:	4698      	mov	r8, r3
    9b44:	2100      	movs	r1, #0
    9b46:	0312      	lsls	r2, r2, #12
    9b48:	0b13      	lsrs	r3, r2, #12
    9b4a:	0d0a      	lsrs	r2, r1, #20
    9b4c:	0512      	lsls	r2, r2, #20
    9b4e:	431a      	orrs	r2, r3
    9b50:	0523      	lsls	r3, r4, #20
    9b52:	4c12      	ldr	r4, [pc, #72]	; (9b9c <__aeabi_ddiv+0x1f4>)
    9b54:	4640      	mov	r0, r8
    9b56:	4022      	ands	r2, r4
    9b58:	4313      	orrs	r3, r2
    9b5a:	4662      	mov	r2, ip
    9b5c:	005b      	lsls	r3, r3, #1
    9b5e:	07d2      	lsls	r2, r2, #31
    9b60:	085b      	lsrs	r3, r3, #1
    9b62:	4313      	orrs	r3, r2
    9b64:	0019      	movs	r1, r3
    9b66:	b007      	add	sp, #28
    9b68:	bc3c      	pop	{r2, r3, r4, r5}
    9b6a:	4690      	mov	r8, r2
    9b6c:	4699      	mov	r9, r3
    9b6e:	46a2      	mov	sl, r4
    9b70:	46ab      	mov	fp, r5
    9b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b74:	2300      	movs	r3, #0
    9b76:	2280      	movs	r2, #128	; 0x80
    9b78:	469c      	mov	ip, r3
    9b7a:	0312      	lsls	r2, r2, #12
    9b7c:	4698      	mov	r8, r3
    9b7e:	4c03      	ldr	r4, [pc, #12]	; (9b8c <__aeabi_ddiv+0x1e4>)
    9b80:	e7e0      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9b82:	2300      	movs	r3, #0
    9b84:	4c01      	ldr	r4, [pc, #4]	; (9b8c <__aeabi_ddiv+0x1e4>)
    9b86:	2200      	movs	r2, #0
    9b88:	4698      	mov	r8, r3
    9b8a:	e7db      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9b8c:	000007ff 	.word	0x000007ff
    9b90:	fffffc01 	.word	0xfffffc01
    9b94:	0000aba0 	.word	0x0000aba0
    9b98:	fffffc0d 	.word	0xfffffc0d
    9b9c:	800fffff 	.word	0x800fffff
    9ba0:	45d9      	cmp	r9, fp
    9ba2:	d900      	bls.n	9ba6 <__aeabi_ddiv+0x1fe>
    9ba4:	e139      	b.n	9e1a <__aeabi_ddiv+0x472>
    9ba6:	d100      	bne.n	9baa <__aeabi_ddiv+0x202>
    9ba8:	e134      	b.n	9e14 <__aeabi_ddiv+0x46c>
    9baa:	2300      	movs	r3, #0
    9bac:	4646      	mov	r6, r8
    9bae:	464d      	mov	r5, r9
    9bb0:	469a      	mov	sl, r3
    9bb2:	3c01      	subs	r4, #1
    9bb4:	465b      	mov	r3, fp
    9bb6:	0e0a      	lsrs	r2, r1, #24
    9bb8:	021b      	lsls	r3, r3, #8
    9bba:	431a      	orrs	r2, r3
    9bbc:	020b      	lsls	r3, r1, #8
    9bbe:	0c17      	lsrs	r7, r2, #16
    9bc0:	9303      	str	r3, [sp, #12]
    9bc2:	0413      	lsls	r3, r2, #16
    9bc4:	0c1b      	lsrs	r3, r3, #16
    9bc6:	0039      	movs	r1, r7
    9bc8:	0028      	movs	r0, r5
    9bca:	4690      	mov	r8, r2
    9bcc:	9301      	str	r3, [sp, #4]
    9bce:	f7fb fb49 	bl	5264 <__udivsi3>
    9bd2:	0002      	movs	r2, r0
    9bd4:	9b01      	ldr	r3, [sp, #4]
    9bd6:	4683      	mov	fp, r0
    9bd8:	435a      	muls	r2, r3
    9bda:	0028      	movs	r0, r5
    9bdc:	0039      	movs	r1, r7
    9bde:	4691      	mov	r9, r2
    9be0:	f7fb fbc6 	bl	5370 <__aeabi_uidivmod>
    9be4:	0c35      	lsrs	r5, r6, #16
    9be6:	0409      	lsls	r1, r1, #16
    9be8:	430d      	orrs	r5, r1
    9bea:	45a9      	cmp	r9, r5
    9bec:	d90d      	bls.n	9c0a <__aeabi_ddiv+0x262>
    9bee:	465b      	mov	r3, fp
    9bf0:	4445      	add	r5, r8
    9bf2:	3b01      	subs	r3, #1
    9bf4:	45a8      	cmp	r8, r5
    9bf6:	d900      	bls.n	9bfa <__aeabi_ddiv+0x252>
    9bf8:	e13a      	b.n	9e70 <__aeabi_ddiv+0x4c8>
    9bfa:	45a9      	cmp	r9, r5
    9bfc:	d800      	bhi.n	9c00 <__aeabi_ddiv+0x258>
    9bfe:	e137      	b.n	9e70 <__aeabi_ddiv+0x4c8>
    9c00:	2302      	movs	r3, #2
    9c02:	425b      	negs	r3, r3
    9c04:	469c      	mov	ip, r3
    9c06:	4445      	add	r5, r8
    9c08:	44e3      	add	fp, ip
    9c0a:	464b      	mov	r3, r9
    9c0c:	1aeb      	subs	r3, r5, r3
    9c0e:	0039      	movs	r1, r7
    9c10:	0018      	movs	r0, r3
    9c12:	9304      	str	r3, [sp, #16]
    9c14:	f7fb fb26 	bl	5264 <__udivsi3>
    9c18:	9b01      	ldr	r3, [sp, #4]
    9c1a:	0005      	movs	r5, r0
    9c1c:	4343      	muls	r3, r0
    9c1e:	0039      	movs	r1, r7
    9c20:	9804      	ldr	r0, [sp, #16]
    9c22:	4699      	mov	r9, r3
    9c24:	f7fb fba4 	bl	5370 <__aeabi_uidivmod>
    9c28:	0433      	lsls	r3, r6, #16
    9c2a:	0409      	lsls	r1, r1, #16
    9c2c:	0c1b      	lsrs	r3, r3, #16
    9c2e:	430b      	orrs	r3, r1
    9c30:	4599      	cmp	r9, r3
    9c32:	d909      	bls.n	9c48 <__aeabi_ddiv+0x2a0>
    9c34:	4443      	add	r3, r8
    9c36:	1e6a      	subs	r2, r5, #1
    9c38:	4598      	cmp	r8, r3
    9c3a:	d900      	bls.n	9c3e <__aeabi_ddiv+0x296>
    9c3c:	e11a      	b.n	9e74 <__aeabi_ddiv+0x4cc>
    9c3e:	4599      	cmp	r9, r3
    9c40:	d800      	bhi.n	9c44 <__aeabi_ddiv+0x29c>
    9c42:	e117      	b.n	9e74 <__aeabi_ddiv+0x4cc>
    9c44:	3d02      	subs	r5, #2
    9c46:	4443      	add	r3, r8
    9c48:	464a      	mov	r2, r9
    9c4a:	1a9b      	subs	r3, r3, r2
    9c4c:	465a      	mov	r2, fp
    9c4e:	0412      	lsls	r2, r2, #16
    9c50:	432a      	orrs	r2, r5
    9c52:	9903      	ldr	r1, [sp, #12]
    9c54:	4693      	mov	fp, r2
    9c56:	0c10      	lsrs	r0, r2, #16
    9c58:	0c0a      	lsrs	r2, r1, #16
    9c5a:	4691      	mov	r9, r2
    9c5c:	0409      	lsls	r1, r1, #16
    9c5e:	465a      	mov	r2, fp
    9c60:	0c09      	lsrs	r1, r1, #16
    9c62:	464e      	mov	r6, r9
    9c64:	000d      	movs	r5, r1
    9c66:	0412      	lsls	r2, r2, #16
    9c68:	0c12      	lsrs	r2, r2, #16
    9c6a:	4345      	muls	r5, r0
    9c6c:	9105      	str	r1, [sp, #20]
    9c6e:	4351      	muls	r1, r2
    9c70:	4372      	muls	r2, r6
    9c72:	4370      	muls	r0, r6
    9c74:	1952      	adds	r2, r2, r5
    9c76:	0c0e      	lsrs	r6, r1, #16
    9c78:	18b2      	adds	r2, r6, r2
    9c7a:	4295      	cmp	r5, r2
    9c7c:	d903      	bls.n	9c86 <__aeabi_ddiv+0x2de>
    9c7e:	2580      	movs	r5, #128	; 0x80
    9c80:	026d      	lsls	r5, r5, #9
    9c82:	46ac      	mov	ip, r5
    9c84:	4460      	add	r0, ip
    9c86:	0c15      	lsrs	r5, r2, #16
    9c88:	0409      	lsls	r1, r1, #16
    9c8a:	0412      	lsls	r2, r2, #16
    9c8c:	0c09      	lsrs	r1, r1, #16
    9c8e:	1828      	adds	r0, r5, r0
    9c90:	1852      	adds	r2, r2, r1
    9c92:	4283      	cmp	r3, r0
    9c94:	d200      	bcs.n	9c98 <__aeabi_ddiv+0x2f0>
    9c96:	e0ce      	b.n	9e36 <__aeabi_ddiv+0x48e>
    9c98:	d100      	bne.n	9c9c <__aeabi_ddiv+0x2f4>
    9c9a:	e0c8      	b.n	9e2e <__aeabi_ddiv+0x486>
    9c9c:	1a1d      	subs	r5, r3, r0
    9c9e:	4653      	mov	r3, sl
    9ca0:	1a9e      	subs	r6, r3, r2
    9ca2:	45b2      	cmp	sl, r6
    9ca4:	4192      	sbcs	r2, r2
    9ca6:	4252      	negs	r2, r2
    9ca8:	1aab      	subs	r3, r5, r2
    9caa:	469a      	mov	sl, r3
    9cac:	4598      	cmp	r8, r3
    9cae:	d100      	bne.n	9cb2 <__aeabi_ddiv+0x30a>
    9cb0:	e117      	b.n	9ee2 <__aeabi_ddiv+0x53a>
    9cb2:	0039      	movs	r1, r7
    9cb4:	0018      	movs	r0, r3
    9cb6:	f7fb fad5 	bl	5264 <__udivsi3>
    9cba:	9b01      	ldr	r3, [sp, #4]
    9cbc:	0005      	movs	r5, r0
    9cbe:	4343      	muls	r3, r0
    9cc0:	0039      	movs	r1, r7
    9cc2:	4650      	mov	r0, sl
    9cc4:	9304      	str	r3, [sp, #16]
    9cc6:	f7fb fb53 	bl	5370 <__aeabi_uidivmod>
    9cca:	9804      	ldr	r0, [sp, #16]
    9ccc:	040b      	lsls	r3, r1, #16
    9cce:	0c31      	lsrs	r1, r6, #16
    9cd0:	4319      	orrs	r1, r3
    9cd2:	4288      	cmp	r0, r1
    9cd4:	d909      	bls.n	9cea <__aeabi_ddiv+0x342>
    9cd6:	4441      	add	r1, r8
    9cd8:	1e6b      	subs	r3, r5, #1
    9cda:	4588      	cmp	r8, r1
    9cdc:	d900      	bls.n	9ce0 <__aeabi_ddiv+0x338>
    9cde:	e107      	b.n	9ef0 <__aeabi_ddiv+0x548>
    9ce0:	4288      	cmp	r0, r1
    9ce2:	d800      	bhi.n	9ce6 <__aeabi_ddiv+0x33e>
    9ce4:	e104      	b.n	9ef0 <__aeabi_ddiv+0x548>
    9ce6:	3d02      	subs	r5, #2
    9ce8:	4441      	add	r1, r8
    9cea:	9b04      	ldr	r3, [sp, #16]
    9cec:	1acb      	subs	r3, r1, r3
    9cee:	0018      	movs	r0, r3
    9cf0:	0039      	movs	r1, r7
    9cf2:	9304      	str	r3, [sp, #16]
    9cf4:	f7fb fab6 	bl	5264 <__udivsi3>
    9cf8:	9b01      	ldr	r3, [sp, #4]
    9cfa:	4682      	mov	sl, r0
    9cfc:	4343      	muls	r3, r0
    9cfe:	0039      	movs	r1, r7
    9d00:	9804      	ldr	r0, [sp, #16]
    9d02:	9301      	str	r3, [sp, #4]
    9d04:	f7fb fb34 	bl	5370 <__aeabi_uidivmod>
    9d08:	9801      	ldr	r0, [sp, #4]
    9d0a:	040b      	lsls	r3, r1, #16
    9d0c:	0431      	lsls	r1, r6, #16
    9d0e:	0c09      	lsrs	r1, r1, #16
    9d10:	4319      	orrs	r1, r3
    9d12:	4288      	cmp	r0, r1
    9d14:	d90d      	bls.n	9d32 <__aeabi_ddiv+0x38a>
    9d16:	4653      	mov	r3, sl
    9d18:	4441      	add	r1, r8
    9d1a:	3b01      	subs	r3, #1
    9d1c:	4588      	cmp	r8, r1
    9d1e:	d900      	bls.n	9d22 <__aeabi_ddiv+0x37a>
    9d20:	e0e8      	b.n	9ef4 <__aeabi_ddiv+0x54c>
    9d22:	4288      	cmp	r0, r1
    9d24:	d800      	bhi.n	9d28 <__aeabi_ddiv+0x380>
    9d26:	e0e5      	b.n	9ef4 <__aeabi_ddiv+0x54c>
    9d28:	2302      	movs	r3, #2
    9d2a:	425b      	negs	r3, r3
    9d2c:	469c      	mov	ip, r3
    9d2e:	4441      	add	r1, r8
    9d30:	44e2      	add	sl, ip
    9d32:	9b01      	ldr	r3, [sp, #4]
    9d34:	042d      	lsls	r5, r5, #16
    9d36:	1ace      	subs	r6, r1, r3
    9d38:	4651      	mov	r1, sl
    9d3a:	4329      	orrs	r1, r5
    9d3c:	9d05      	ldr	r5, [sp, #20]
    9d3e:	464f      	mov	r7, r9
    9d40:	002a      	movs	r2, r5
    9d42:	040b      	lsls	r3, r1, #16
    9d44:	0c08      	lsrs	r0, r1, #16
    9d46:	0c1b      	lsrs	r3, r3, #16
    9d48:	435a      	muls	r2, r3
    9d4a:	4345      	muls	r5, r0
    9d4c:	437b      	muls	r3, r7
    9d4e:	4378      	muls	r0, r7
    9d50:	195b      	adds	r3, r3, r5
    9d52:	0c17      	lsrs	r7, r2, #16
    9d54:	18fb      	adds	r3, r7, r3
    9d56:	429d      	cmp	r5, r3
    9d58:	d903      	bls.n	9d62 <__aeabi_ddiv+0x3ba>
    9d5a:	2580      	movs	r5, #128	; 0x80
    9d5c:	026d      	lsls	r5, r5, #9
    9d5e:	46ac      	mov	ip, r5
    9d60:	4460      	add	r0, ip
    9d62:	0c1d      	lsrs	r5, r3, #16
    9d64:	0412      	lsls	r2, r2, #16
    9d66:	041b      	lsls	r3, r3, #16
    9d68:	0c12      	lsrs	r2, r2, #16
    9d6a:	1828      	adds	r0, r5, r0
    9d6c:	189b      	adds	r3, r3, r2
    9d6e:	4286      	cmp	r6, r0
    9d70:	d200      	bcs.n	9d74 <__aeabi_ddiv+0x3cc>
    9d72:	e093      	b.n	9e9c <__aeabi_ddiv+0x4f4>
    9d74:	d100      	bne.n	9d78 <__aeabi_ddiv+0x3d0>
    9d76:	e08e      	b.n	9e96 <__aeabi_ddiv+0x4ee>
    9d78:	2301      	movs	r3, #1
    9d7a:	4319      	orrs	r1, r3
    9d7c:	4ba0      	ldr	r3, [pc, #640]	; (a000 <__aeabi_ddiv+0x658>)
    9d7e:	18e3      	adds	r3, r4, r3
    9d80:	2b00      	cmp	r3, #0
    9d82:	dc00      	bgt.n	9d86 <__aeabi_ddiv+0x3de>
    9d84:	e099      	b.n	9eba <__aeabi_ddiv+0x512>
    9d86:	074a      	lsls	r2, r1, #29
    9d88:	d000      	beq.n	9d8c <__aeabi_ddiv+0x3e4>
    9d8a:	e09e      	b.n	9eca <__aeabi_ddiv+0x522>
    9d8c:	465a      	mov	r2, fp
    9d8e:	01d2      	lsls	r2, r2, #7
    9d90:	d506      	bpl.n	9da0 <__aeabi_ddiv+0x3f8>
    9d92:	465a      	mov	r2, fp
    9d94:	4b9b      	ldr	r3, [pc, #620]	; (a004 <__aeabi_ddiv+0x65c>)
    9d96:	401a      	ands	r2, r3
    9d98:	2380      	movs	r3, #128	; 0x80
    9d9a:	4693      	mov	fp, r2
    9d9c:	00db      	lsls	r3, r3, #3
    9d9e:	18e3      	adds	r3, r4, r3
    9da0:	4a99      	ldr	r2, [pc, #612]	; (a008 <__aeabi_ddiv+0x660>)
    9da2:	4293      	cmp	r3, r2
    9da4:	dd68      	ble.n	9e78 <__aeabi_ddiv+0x4d0>
    9da6:	2301      	movs	r3, #1
    9da8:	9a02      	ldr	r2, [sp, #8]
    9daa:	4c98      	ldr	r4, [pc, #608]	; (a00c <__aeabi_ddiv+0x664>)
    9dac:	401a      	ands	r2, r3
    9dae:	2300      	movs	r3, #0
    9db0:	4694      	mov	ip, r2
    9db2:	4698      	mov	r8, r3
    9db4:	2200      	movs	r2, #0
    9db6:	e6c5      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9db8:	2280      	movs	r2, #128	; 0x80
    9dba:	464b      	mov	r3, r9
    9dbc:	0312      	lsls	r2, r2, #12
    9dbe:	4213      	tst	r3, r2
    9dc0:	d00a      	beq.n	9dd8 <__aeabi_ddiv+0x430>
    9dc2:	465b      	mov	r3, fp
    9dc4:	4213      	tst	r3, r2
    9dc6:	d106      	bne.n	9dd6 <__aeabi_ddiv+0x42e>
    9dc8:	431a      	orrs	r2, r3
    9dca:	0312      	lsls	r2, r2, #12
    9dcc:	0b12      	lsrs	r2, r2, #12
    9dce:	46ac      	mov	ip, r5
    9dd0:	4688      	mov	r8, r1
    9dd2:	4c8e      	ldr	r4, [pc, #568]	; (a00c <__aeabi_ddiv+0x664>)
    9dd4:	e6b6      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9dd6:	464b      	mov	r3, r9
    9dd8:	431a      	orrs	r2, r3
    9dda:	0312      	lsls	r2, r2, #12
    9ddc:	0b12      	lsrs	r2, r2, #12
    9dde:	46bc      	mov	ip, r7
    9de0:	4c8a      	ldr	r4, [pc, #552]	; (a00c <__aeabi_ddiv+0x664>)
    9de2:	e6af      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9de4:	0003      	movs	r3, r0
    9de6:	465a      	mov	r2, fp
    9de8:	3b28      	subs	r3, #40	; 0x28
    9dea:	409a      	lsls	r2, r3
    9dec:	2300      	movs	r3, #0
    9dee:	4691      	mov	r9, r2
    9df0:	4698      	mov	r8, r3
    9df2:	e657      	b.n	9aa4 <__aeabi_ddiv+0xfc>
    9df4:	4658      	mov	r0, fp
    9df6:	f7fb fc23 	bl	5640 <__clzsi2>
    9dfa:	3020      	adds	r0, #32
    9dfc:	e640      	b.n	9a80 <__aeabi_ddiv+0xd8>
    9dfe:	0003      	movs	r3, r0
    9e00:	4652      	mov	r2, sl
    9e02:	3b28      	subs	r3, #40	; 0x28
    9e04:	409a      	lsls	r2, r3
    9e06:	2100      	movs	r1, #0
    9e08:	4693      	mov	fp, r2
    9e0a:	e677      	b.n	9afc <__aeabi_ddiv+0x154>
    9e0c:	f7fb fc18 	bl	5640 <__clzsi2>
    9e10:	3020      	adds	r0, #32
    9e12:	e65f      	b.n	9ad4 <__aeabi_ddiv+0x12c>
    9e14:	4588      	cmp	r8, r1
    9e16:	d200      	bcs.n	9e1a <__aeabi_ddiv+0x472>
    9e18:	e6c7      	b.n	9baa <__aeabi_ddiv+0x202>
    9e1a:	464b      	mov	r3, r9
    9e1c:	07de      	lsls	r6, r3, #31
    9e1e:	085d      	lsrs	r5, r3, #1
    9e20:	4643      	mov	r3, r8
    9e22:	085b      	lsrs	r3, r3, #1
    9e24:	431e      	orrs	r6, r3
    9e26:	4643      	mov	r3, r8
    9e28:	07db      	lsls	r3, r3, #31
    9e2a:	469a      	mov	sl, r3
    9e2c:	e6c2      	b.n	9bb4 <__aeabi_ddiv+0x20c>
    9e2e:	2500      	movs	r5, #0
    9e30:	4592      	cmp	sl, r2
    9e32:	d300      	bcc.n	9e36 <__aeabi_ddiv+0x48e>
    9e34:	e733      	b.n	9c9e <__aeabi_ddiv+0x2f6>
    9e36:	9e03      	ldr	r6, [sp, #12]
    9e38:	4659      	mov	r1, fp
    9e3a:	46b4      	mov	ip, r6
    9e3c:	44e2      	add	sl, ip
    9e3e:	45b2      	cmp	sl, r6
    9e40:	41ad      	sbcs	r5, r5
    9e42:	426d      	negs	r5, r5
    9e44:	4445      	add	r5, r8
    9e46:	18eb      	adds	r3, r5, r3
    9e48:	3901      	subs	r1, #1
    9e4a:	4598      	cmp	r8, r3
    9e4c:	d207      	bcs.n	9e5e <__aeabi_ddiv+0x4b6>
    9e4e:	4298      	cmp	r0, r3
    9e50:	d900      	bls.n	9e54 <__aeabi_ddiv+0x4ac>
    9e52:	e07f      	b.n	9f54 <__aeabi_ddiv+0x5ac>
    9e54:	d100      	bne.n	9e58 <__aeabi_ddiv+0x4b0>
    9e56:	e0bc      	b.n	9fd2 <__aeabi_ddiv+0x62a>
    9e58:	1a1d      	subs	r5, r3, r0
    9e5a:	468b      	mov	fp, r1
    9e5c:	e71f      	b.n	9c9e <__aeabi_ddiv+0x2f6>
    9e5e:	4598      	cmp	r8, r3
    9e60:	d1fa      	bne.n	9e58 <__aeabi_ddiv+0x4b0>
    9e62:	9d03      	ldr	r5, [sp, #12]
    9e64:	4555      	cmp	r5, sl
    9e66:	d9f2      	bls.n	9e4e <__aeabi_ddiv+0x4a6>
    9e68:	4643      	mov	r3, r8
    9e6a:	468b      	mov	fp, r1
    9e6c:	1a1d      	subs	r5, r3, r0
    9e6e:	e716      	b.n	9c9e <__aeabi_ddiv+0x2f6>
    9e70:	469b      	mov	fp, r3
    9e72:	e6ca      	b.n	9c0a <__aeabi_ddiv+0x262>
    9e74:	0015      	movs	r5, r2
    9e76:	e6e7      	b.n	9c48 <__aeabi_ddiv+0x2a0>
    9e78:	465a      	mov	r2, fp
    9e7a:	08c9      	lsrs	r1, r1, #3
    9e7c:	0752      	lsls	r2, r2, #29
    9e7e:	430a      	orrs	r2, r1
    9e80:	055b      	lsls	r3, r3, #21
    9e82:	4690      	mov	r8, r2
    9e84:	0d5c      	lsrs	r4, r3, #21
    9e86:	465a      	mov	r2, fp
    9e88:	2301      	movs	r3, #1
    9e8a:	9902      	ldr	r1, [sp, #8]
    9e8c:	0252      	lsls	r2, r2, #9
    9e8e:	4019      	ands	r1, r3
    9e90:	0b12      	lsrs	r2, r2, #12
    9e92:	468c      	mov	ip, r1
    9e94:	e656      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9e96:	2b00      	cmp	r3, #0
    9e98:	d100      	bne.n	9e9c <__aeabi_ddiv+0x4f4>
    9e9a:	e76f      	b.n	9d7c <__aeabi_ddiv+0x3d4>
    9e9c:	4446      	add	r6, r8
    9e9e:	1e4a      	subs	r2, r1, #1
    9ea0:	45b0      	cmp	r8, r6
    9ea2:	d929      	bls.n	9ef8 <__aeabi_ddiv+0x550>
    9ea4:	0011      	movs	r1, r2
    9ea6:	4286      	cmp	r6, r0
    9ea8:	d000      	beq.n	9eac <__aeabi_ddiv+0x504>
    9eaa:	e765      	b.n	9d78 <__aeabi_ddiv+0x3d0>
    9eac:	9a03      	ldr	r2, [sp, #12]
    9eae:	4293      	cmp	r3, r2
    9eb0:	d000      	beq.n	9eb4 <__aeabi_ddiv+0x50c>
    9eb2:	e761      	b.n	9d78 <__aeabi_ddiv+0x3d0>
    9eb4:	e762      	b.n	9d7c <__aeabi_ddiv+0x3d4>
    9eb6:	2101      	movs	r1, #1
    9eb8:	4249      	negs	r1, r1
    9eba:	2001      	movs	r0, #1
    9ebc:	1ac2      	subs	r2, r0, r3
    9ebe:	2a38      	cmp	r2, #56	; 0x38
    9ec0:	dd21      	ble.n	9f06 <__aeabi_ddiv+0x55e>
    9ec2:	9b02      	ldr	r3, [sp, #8]
    9ec4:	4003      	ands	r3, r0
    9ec6:	469c      	mov	ip, r3
    9ec8:	e638      	b.n	9b3c <__aeabi_ddiv+0x194>
    9eca:	220f      	movs	r2, #15
    9ecc:	400a      	ands	r2, r1
    9ece:	2a04      	cmp	r2, #4
    9ed0:	d100      	bne.n	9ed4 <__aeabi_ddiv+0x52c>
    9ed2:	e75b      	b.n	9d8c <__aeabi_ddiv+0x3e4>
    9ed4:	000a      	movs	r2, r1
    9ed6:	1d11      	adds	r1, r2, #4
    9ed8:	4291      	cmp	r1, r2
    9eda:	4192      	sbcs	r2, r2
    9edc:	4252      	negs	r2, r2
    9ede:	4493      	add	fp, r2
    9ee0:	e754      	b.n	9d8c <__aeabi_ddiv+0x3e4>
    9ee2:	4b47      	ldr	r3, [pc, #284]	; (a000 <__aeabi_ddiv+0x658>)
    9ee4:	18e3      	adds	r3, r4, r3
    9ee6:	2b00      	cmp	r3, #0
    9ee8:	dde5      	ble.n	9eb6 <__aeabi_ddiv+0x50e>
    9eea:	2201      	movs	r2, #1
    9eec:	4252      	negs	r2, r2
    9eee:	e7f2      	b.n	9ed6 <__aeabi_ddiv+0x52e>
    9ef0:	001d      	movs	r5, r3
    9ef2:	e6fa      	b.n	9cea <__aeabi_ddiv+0x342>
    9ef4:	469a      	mov	sl, r3
    9ef6:	e71c      	b.n	9d32 <__aeabi_ddiv+0x38a>
    9ef8:	42b0      	cmp	r0, r6
    9efa:	d839      	bhi.n	9f70 <__aeabi_ddiv+0x5c8>
    9efc:	d06e      	beq.n	9fdc <__aeabi_ddiv+0x634>
    9efe:	0011      	movs	r1, r2
    9f00:	e73a      	b.n	9d78 <__aeabi_ddiv+0x3d0>
    9f02:	9302      	str	r3, [sp, #8]
    9f04:	e73a      	b.n	9d7c <__aeabi_ddiv+0x3d4>
    9f06:	2a1f      	cmp	r2, #31
    9f08:	dc3c      	bgt.n	9f84 <__aeabi_ddiv+0x5dc>
    9f0a:	2320      	movs	r3, #32
    9f0c:	1a9b      	subs	r3, r3, r2
    9f0e:	000c      	movs	r4, r1
    9f10:	4658      	mov	r0, fp
    9f12:	4099      	lsls	r1, r3
    9f14:	4098      	lsls	r0, r3
    9f16:	1e4b      	subs	r3, r1, #1
    9f18:	4199      	sbcs	r1, r3
    9f1a:	465b      	mov	r3, fp
    9f1c:	40d4      	lsrs	r4, r2
    9f1e:	40d3      	lsrs	r3, r2
    9f20:	4320      	orrs	r0, r4
    9f22:	4308      	orrs	r0, r1
    9f24:	001a      	movs	r2, r3
    9f26:	0743      	lsls	r3, r0, #29
    9f28:	d009      	beq.n	9f3e <__aeabi_ddiv+0x596>
    9f2a:	230f      	movs	r3, #15
    9f2c:	4003      	ands	r3, r0
    9f2e:	2b04      	cmp	r3, #4
    9f30:	d005      	beq.n	9f3e <__aeabi_ddiv+0x596>
    9f32:	0001      	movs	r1, r0
    9f34:	1d08      	adds	r0, r1, #4
    9f36:	4288      	cmp	r0, r1
    9f38:	419b      	sbcs	r3, r3
    9f3a:	425b      	negs	r3, r3
    9f3c:	18d2      	adds	r2, r2, r3
    9f3e:	0213      	lsls	r3, r2, #8
    9f40:	d53a      	bpl.n	9fb8 <__aeabi_ddiv+0x610>
    9f42:	2301      	movs	r3, #1
    9f44:	9a02      	ldr	r2, [sp, #8]
    9f46:	2401      	movs	r4, #1
    9f48:	401a      	ands	r2, r3
    9f4a:	2300      	movs	r3, #0
    9f4c:	4694      	mov	ip, r2
    9f4e:	4698      	mov	r8, r3
    9f50:	2200      	movs	r2, #0
    9f52:	e5f7      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9f54:	2102      	movs	r1, #2
    9f56:	4249      	negs	r1, r1
    9f58:	468c      	mov	ip, r1
    9f5a:	9d03      	ldr	r5, [sp, #12]
    9f5c:	44e3      	add	fp, ip
    9f5e:	46ac      	mov	ip, r5
    9f60:	44e2      	add	sl, ip
    9f62:	45aa      	cmp	sl, r5
    9f64:	41ad      	sbcs	r5, r5
    9f66:	426d      	negs	r5, r5
    9f68:	4445      	add	r5, r8
    9f6a:	18ed      	adds	r5, r5, r3
    9f6c:	1a2d      	subs	r5, r5, r0
    9f6e:	e696      	b.n	9c9e <__aeabi_ddiv+0x2f6>
    9f70:	1e8a      	subs	r2, r1, #2
    9f72:	9903      	ldr	r1, [sp, #12]
    9f74:	004d      	lsls	r5, r1, #1
    9f76:	428d      	cmp	r5, r1
    9f78:	4189      	sbcs	r1, r1
    9f7a:	4249      	negs	r1, r1
    9f7c:	4441      	add	r1, r8
    9f7e:	1876      	adds	r6, r6, r1
    9f80:	9503      	str	r5, [sp, #12]
    9f82:	e78f      	b.n	9ea4 <__aeabi_ddiv+0x4fc>
    9f84:	201f      	movs	r0, #31
    9f86:	4240      	negs	r0, r0
    9f88:	1ac3      	subs	r3, r0, r3
    9f8a:	4658      	mov	r0, fp
    9f8c:	40d8      	lsrs	r0, r3
    9f8e:	0003      	movs	r3, r0
    9f90:	2a20      	cmp	r2, #32
    9f92:	d028      	beq.n	9fe6 <__aeabi_ddiv+0x63e>
    9f94:	2040      	movs	r0, #64	; 0x40
    9f96:	465d      	mov	r5, fp
    9f98:	1a82      	subs	r2, r0, r2
    9f9a:	4095      	lsls	r5, r2
    9f9c:	4329      	orrs	r1, r5
    9f9e:	1e4a      	subs	r2, r1, #1
    9fa0:	4191      	sbcs	r1, r2
    9fa2:	4319      	orrs	r1, r3
    9fa4:	2307      	movs	r3, #7
    9fa6:	2200      	movs	r2, #0
    9fa8:	400b      	ands	r3, r1
    9faa:	d009      	beq.n	9fc0 <__aeabi_ddiv+0x618>
    9fac:	230f      	movs	r3, #15
    9fae:	2200      	movs	r2, #0
    9fb0:	400b      	ands	r3, r1
    9fb2:	0008      	movs	r0, r1
    9fb4:	2b04      	cmp	r3, #4
    9fb6:	d1bd      	bne.n	9f34 <__aeabi_ddiv+0x58c>
    9fb8:	0001      	movs	r1, r0
    9fba:	0753      	lsls	r3, r2, #29
    9fbc:	0252      	lsls	r2, r2, #9
    9fbe:	0b12      	lsrs	r2, r2, #12
    9fc0:	08c9      	lsrs	r1, r1, #3
    9fc2:	4319      	orrs	r1, r3
    9fc4:	2301      	movs	r3, #1
    9fc6:	4688      	mov	r8, r1
    9fc8:	9902      	ldr	r1, [sp, #8]
    9fca:	2400      	movs	r4, #0
    9fcc:	4019      	ands	r1, r3
    9fce:	468c      	mov	ip, r1
    9fd0:	e5b8      	b.n	9b44 <__aeabi_ddiv+0x19c>
    9fd2:	4552      	cmp	r2, sl
    9fd4:	d8be      	bhi.n	9f54 <__aeabi_ddiv+0x5ac>
    9fd6:	468b      	mov	fp, r1
    9fd8:	2500      	movs	r5, #0
    9fda:	e660      	b.n	9c9e <__aeabi_ddiv+0x2f6>
    9fdc:	9d03      	ldr	r5, [sp, #12]
    9fde:	429d      	cmp	r5, r3
    9fe0:	d3c6      	bcc.n	9f70 <__aeabi_ddiv+0x5c8>
    9fe2:	0011      	movs	r1, r2
    9fe4:	e762      	b.n	9eac <__aeabi_ddiv+0x504>
    9fe6:	2500      	movs	r5, #0
    9fe8:	e7d8      	b.n	9f9c <__aeabi_ddiv+0x5f4>
    9fea:	2280      	movs	r2, #128	; 0x80
    9fec:	465b      	mov	r3, fp
    9fee:	0312      	lsls	r2, r2, #12
    9ff0:	431a      	orrs	r2, r3
    9ff2:	9b01      	ldr	r3, [sp, #4]
    9ff4:	0312      	lsls	r2, r2, #12
    9ff6:	0b12      	lsrs	r2, r2, #12
    9ff8:	469c      	mov	ip, r3
    9ffa:	4688      	mov	r8, r1
    9ffc:	4c03      	ldr	r4, [pc, #12]	; (a00c <__aeabi_ddiv+0x664>)
    9ffe:	e5a1      	b.n	9b44 <__aeabi_ddiv+0x19c>
    a000:	000003ff 	.word	0x000003ff
    a004:	feffffff 	.word	0xfeffffff
    a008:	000007fe 	.word	0x000007fe
    a00c:	000007ff 	.word	0x000007ff

0000a010 <__aeabi_dmul>:
    a010:	b5f0      	push	{r4, r5, r6, r7, lr}
    a012:	4657      	mov	r7, sl
    a014:	4645      	mov	r5, r8
    a016:	46de      	mov	lr, fp
    a018:	464e      	mov	r6, r9
    a01a:	b5e0      	push	{r5, r6, r7, lr}
    a01c:	030c      	lsls	r4, r1, #12
    a01e:	4698      	mov	r8, r3
    a020:	004e      	lsls	r6, r1, #1
    a022:	0b23      	lsrs	r3, r4, #12
    a024:	b087      	sub	sp, #28
    a026:	0007      	movs	r7, r0
    a028:	4692      	mov	sl, r2
    a02a:	469b      	mov	fp, r3
    a02c:	0d76      	lsrs	r6, r6, #21
    a02e:	0fcd      	lsrs	r5, r1, #31
    a030:	2e00      	cmp	r6, #0
    a032:	d06b      	beq.n	a10c <__aeabi_dmul+0xfc>
    a034:	4b6d      	ldr	r3, [pc, #436]	; (a1ec <__aeabi_dmul+0x1dc>)
    a036:	429e      	cmp	r6, r3
    a038:	d035      	beq.n	a0a6 <__aeabi_dmul+0x96>
    a03a:	2480      	movs	r4, #128	; 0x80
    a03c:	465b      	mov	r3, fp
    a03e:	0f42      	lsrs	r2, r0, #29
    a040:	0424      	lsls	r4, r4, #16
    a042:	00db      	lsls	r3, r3, #3
    a044:	4314      	orrs	r4, r2
    a046:	431c      	orrs	r4, r3
    a048:	00c3      	lsls	r3, r0, #3
    a04a:	4699      	mov	r9, r3
    a04c:	4b68      	ldr	r3, [pc, #416]	; (a1f0 <__aeabi_dmul+0x1e0>)
    a04e:	46a3      	mov	fp, r4
    a050:	469c      	mov	ip, r3
    a052:	2300      	movs	r3, #0
    a054:	2700      	movs	r7, #0
    a056:	4466      	add	r6, ip
    a058:	9302      	str	r3, [sp, #8]
    a05a:	4643      	mov	r3, r8
    a05c:	031c      	lsls	r4, r3, #12
    a05e:	005a      	lsls	r2, r3, #1
    a060:	0fdb      	lsrs	r3, r3, #31
    a062:	4650      	mov	r0, sl
    a064:	0b24      	lsrs	r4, r4, #12
    a066:	0d52      	lsrs	r2, r2, #21
    a068:	4698      	mov	r8, r3
    a06a:	d100      	bne.n	a06e <__aeabi_dmul+0x5e>
    a06c:	e076      	b.n	a15c <__aeabi_dmul+0x14c>
    a06e:	4b5f      	ldr	r3, [pc, #380]	; (a1ec <__aeabi_dmul+0x1dc>)
    a070:	429a      	cmp	r2, r3
    a072:	d06d      	beq.n	a150 <__aeabi_dmul+0x140>
    a074:	2380      	movs	r3, #128	; 0x80
    a076:	0f41      	lsrs	r1, r0, #29
    a078:	041b      	lsls	r3, r3, #16
    a07a:	430b      	orrs	r3, r1
    a07c:	495c      	ldr	r1, [pc, #368]	; (a1f0 <__aeabi_dmul+0x1e0>)
    a07e:	00e4      	lsls	r4, r4, #3
    a080:	468c      	mov	ip, r1
    a082:	431c      	orrs	r4, r3
    a084:	00c3      	lsls	r3, r0, #3
    a086:	2000      	movs	r0, #0
    a088:	4462      	add	r2, ip
    a08a:	4641      	mov	r1, r8
    a08c:	18b6      	adds	r6, r6, r2
    a08e:	4069      	eors	r1, r5
    a090:	1c72      	adds	r2, r6, #1
    a092:	9101      	str	r1, [sp, #4]
    a094:	4694      	mov	ip, r2
    a096:	4307      	orrs	r7, r0
    a098:	2f0f      	cmp	r7, #15
    a09a:	d900      	bls.n	a09e <__aeabi_dmul+0x8e>
    a09c:	e0b0      	b.n	a200 <__aeabi_dmul+0x1f0>
    a09e:	4a55      	ldr	r2, [pc, #340]	; (a1f4 <__aeabi_dmul+0x1e4>)
    a0a0:	00bf      	lsls	r7, r7, #2
    a0a2:	59d2      	ldr	r2, [r2, r7]
    a0a4:	4697      	mov	pc, r2
    a0a6:	465b      	mov	r3, fp
    a0a8:	4303      	orrs	r3, r0
    a0aa:	4699      	mov	r9, r3
    a0ac:	d000      	beq.n	a0b0 <__aeabi_dmul+0xa0>
    a0ae:	e087      	b.n	a1c0 <__aeabi_dmul+0x1b0>
    a0b0:	2300      	movs	r3, #0
    a0b2:	469b      	mov	fp, r3
    a0b4:	3302      	adds	r3, #2
    a0b6:	2708      	movs	r7, #8
    a0b8:	9302      	str	r3, [sp, #8]
    a0ba:	e7ce      	b.n	a05a <__aeabi_dmul+0x4a>
    a0bc:	4642      	mov	r2, r8
    a0be:	9201      	str	r2, [sp, #4]
    a0c0:	2802      	cmp	r0, #2
    a0c2:	d067      	beq.n	a194 <__aeabi_dmul+0x184>
    a0c4:	2803      	cmp	r0, #3
    a0c6:	d100      	bne.n	a0ca <__aeabi_dmul+0xba>
    a0c8:	e20e      	b.n	a4e8 <__aeabi_dmul+0x4d8>
    a0ca:	2801      	cmp	r0, #1
    a0cc:	d000      	beq.n	a0d0 <__aeabi_dmul+0xc0>
    a0ce:	e162      	b.n	a396 <__aeabi_dmul+0x386>
    a0d0:	2300      	movs	r3, #0
    a0d2:	2400      	movs	r4, #0
    a0d4:	2200      	movs	r2, #0
    a0d6:	4699      	mov	r9, r3
    a0d8:	9901      	ldr	r1, [sp, #4]
    a0da:	4001      	ands	r1, r0
    a0dc:	b2cd      	uxtb	r5, r1
    a0de:	2100      	movs	r1, #0
    a0e0:	0312      	lsls	r2, r2, #12
    a0e2:	0d0b      	lsrs	r3, r1, #20
    a0e4:	0b12      	lsrs	r2, r2, #12
    a0e6:	051b      	lsls	r3, r3, #20
    a0e8:	4313      	orrs	r3, r2
    a0ea:	4a43      	ldr	r2, [pc, #268]	; (a1f8 <__aeabi_dmul+0x1e8>)
    a0ec:	0524      	lsls	r4, r4, #20
    a0ee:	4013      	ands	r3, r2
    a0f0:	431c      	orrs	r4, r3
    a0f2:	0064      	lsls	r4, r4, #1
    a0f4:	07ed      	lsls	r5, r5, #31
    a0f6:	0864      	lsrs	r4, r4, #1
    a0f8:	432c      	orrs	r4, r5
    a0fa:	4648      	mov	r0, r9
    a0fc:	0021      	movs	r1, r4
    a0fe:	b007      	add	sp, #28
    a100:	bc3c      	pop	{r2, r3, r4, r5}
    a102:	4690      	mov	r8, r2
    a104:	4699      	mov	r9, r3
    a106:	46a2      	mov	sl, r4
    a108:	46ab      	mov	fp, r5
    a10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a10c:	4303      	orrs	r3, r0
    a10e:	4699      	mov	r9, r3
    a110:	d04f      	beq.n	a1b2 <__aeabi_dmul+0x1a2>
    a112:	465b      	mov	r3, fp
    a114:	2b00      	cmp	r3, #0
    a116:	d100      	bne.n	a11a <__aeabi_dmul+0x10a>
    a118:	e189      	b.n	a42e <__aeabi_dmul+0x41e>
    a11a:	4658      	mov	r0, fp
    a11c:	f7fb fa90 	bl	5640 <__clzsi2>
    a120:	0003      	movs	r3, r0
    a122:	3b0b      	subs	r3, #11
    a124:	2b1c      	cmp	r3, #28
    a126:	dd00      	ble.n	a12a <__aeabi_dmul+0x11a>
    a128:	e17a      	b.n	a420 <__aeabi_dmul+0x410>
    a12a:	221d      	movs	r2, #29
    a12c:	1ad3      	subs	r3, r2, r3
    a12e:	003a      	movs	r2, r7
    a130:	0001      	movs	r1, r0
    a132:	465c      	mov	r4, fp
    a134:	40da      	lsrs	r2, r3
    a136:	3908      	subs	r1, #8
    a138:	408c      	lsls	r4, r1
    a13a:	0013      	movs	r3, r2
    a13c:	408f      	lsls	r7, r1
    a13e:	4323      	orrs	r3, r4
    a140:	469b      	mov	fp, r3
    a142:	46b9      	mov	r9, r7
    a144:	2300      	movs	r3, #0
    a146:	4e2d      	ldr	r6, [pc, #180]	; (a1fc <__aeabi_dmul+0x1ec>)
    a148:	2700      	movs	r7, #0
    a14a:	1a36      	subs	r6, r6, r0
    a14c:	9302      	str	r3, [sp, #8]
    a14e:	e784      	b.n	a05a <__aeabi_dmul+0x4a>
    a150:	4653      	mov	r3, sl
    a152:	4323      	orrs	r3, r4
    a154:	d12a      	bne.n	a1ac <__aeabi_dmul+0x19c>
    a156:	2400      	movs	r4, #0
    a158:	2002      	movs	r0, #2
    a15a:	e796      	b.n	a08a <__aeabi_dmul+0x7a>
    a15c:	4653      	mov	r3, sl
    a15e:	4323      	orrs	r3, r4
    a160:	d020      	beq.n	a1a4 <__aeabi_dmul+0x194>
    a162:	2c00      	cmp	r4, #0
    a164:	d100      	bne.n	a168 <__aeabi_dmul+0x158>
    a166:	e157      	b.n	a418 <__aeabi_dmul+0x408>
    a168:	0020      	movs	r0, r4
    a16a:	f7fb fa69 	bl	5640 <__clzsi2>
    a16e:	0003      	movs	r3, r0
    a170:	3b0b      	subs	r3, #11
    a172:	2b1c      	cmp	r3, #28
    a174:	dd00      	ble.n	a178 <__aeabi_dmul+0x168>
    a176:	e149      	b.n	a40c <__aeabi_dmul+0x3fc>
    a178:	211d      	movs	r1, #29
    a17a:	1acb      	subs	r3, r1, r3
    a17c:	4651      	mov	r1, sl
    a17e:	0002      	movs	r2, r0
    a180:	40d9      	lsrs	r1, r3
    a182:	4653      	mov	r3, sl
    a184:	3a08      	subs	r2, #8
    a186:	4094      	lsls	r4, r2
    a188:	4093      	lsls	r3, r2
    a18a:	430c      	orrs	r4, r1
    a18c:	4a1b      	ldr	r2, [pc, #108]	; (a1fc <__aeabi_dmul+0x1ec>)
    a18e:	1a12      	subs	r2, r2, r0
    a190:	2000      	movs	r0, #0
    a192:	e77a      	b.n	a08a <__aeabi_dmul+0x7a>
    a194:	2501      	movs	r5, #1
    a196:	9b01      	ldr	r3, [sp, #4]
    a198:	4c14      	ldr	r4, [pc, #80]	; (a1ec <__aeabi_dmul+0x1dc>)
    a19a:	401d      	ands	r5, r3
    a19c:	2300      	movs	r3, #0
    a19e:	2200      	movs	r2, #0
    a1a0:	4699      	mov	r9, r3
    a1a2:	e79c      	b.n	a0de <__aeabi_dmul+0xce>
    a1a4:	2400      	movs	r4, #0
    a1a6:	2200      	movs	r2, #0
    a1a8:	2001      	movs	r0, #1
    a1aa:	e76e      	b.n	a08a <__aeabi_dmul+0x7a>
    a1ac:	4653      	mov	r3, sl
    a1ae:	2003      	movs	r0, #3
    a1b0:	e76b      	b.n	a08a <__aeabi_dmul+0x7a>
    a1b2:	2300      	movs	r3, #0
    a1b4:	469b      	mov	fp, r3
    a1b6:	3301      	adds	r3, #1
    a1b8:	2704      	movs	r7, #4
    a1ba:	2600      	movs	r6, #0
    a1bc:	9302      	str	r3, [sp, #8]
    a1be:	e74c      	b.n	a05a <__aeabi_dmul+0x4a>
    a1c0:	2303      	movs	r3, #3
    a1c2:	4681      	mov	r9, r0
    a1c4:	270c      	movs	r7, #12
    a1c6:	9302      	str	r3, [sp, #8]
    a1c8:	e747      	b.n	a05a <__aeabi_dmul+0x4a>
    a1ca:	2280      	movs	r2, #128	; 0x80
    a1cc:	2300      	movs	r3, #0
    a1ce:	2500      	movs	r5, #0
    a1d0:	0312      	lsls	r2, r2, #12
    a1d2:	4699      	mov	r9, r3
    a1d4:	4c05      	ldr	r4, [pc, #20]	; (a1ec <__aeabi_dmul+0x1dc>)
    a1d6:	e782      	b.n	a0de <__aeabi_dmul+0xce>
    a1d8:	465c      	mov	r4, fp
    a1da:	464b      	mov	r3, r9
    a1dc:	9802      	ldr	r0, [sp, #8]
    a1de:	e76f      	b.n	a0c0 <__aeabi_dmul+0xb0>
    a1e0:	465c      	mov	r4, fp
    a1e2:	464b      	mov	r3, r9
    a1e4:	9501      	str	r5, [sp, #4]
    a1e6:	9802      	ldr	r0, [sp, #8]
    a1e8:	e76a      	b.n	a0c0 <__aeabi_dmul+0xb0>
    a1ea:	46c0      	nop			; (mov r8, r8)
    a1ec:	000007ff 	.word	0x000007ff
    a1f0:	fffffc01 	.word	0xfffffc01
    a1f4:	0000abe0 	.word	0x0000abe0
    a1f8:	800fffff 	.word	0x800fffff
    a1fc:	fffffc0d 	.word	0xfffffc0d
    a200:	464a      	mov	r2, r9
    a202:	4649      	mov	r1, r9
    a204:	0c17      	lsrs	r7, r2, #16
    a206:	0c1a      	lsrs	r2, r3, #16
    a208:	041b      	lsls	r3, r3, #16
    a20a:	0c1b      	lsrs	r3, r3, #16
    a20c:	0408      	lsls	r0, r1, #16
    a20e:	0019      	movs	r1, r3
    a210:	0c00      	lsrs	r0, r0, #16
    a212:	4341      	muls	r1, r0
    a214:	0015      	movs	r5, r2
    a216:	4688      	mov	r8, r1
    a218:	0019      	movs	r1, r3
    a21a:	437d      	muls	r5, r7
    a21c:	4379      	muls	r1, r7
    a21e:	9503      	str	r5, [sp, #12]
    a220:	4689      	mov	r9, r1
    a222:	0029      	movs	r1, r5
    a224:	0015      	movs	r5, r2
    a226:	4345      	muls	r5, r0
    a228:	444d      	add	r5, r9
    a22a:	9502      	str	r5, [sp, #8]
    a22c:	4645      	mov	r5, r8
    a22e:	0c2d      	lsrs	r5, r5, #16
    a230:	46aa      	mov	sl, r5
    a232:	9d02      	ldr	r5, [sp, #8]
    a234:	4455      	add	r5, sl
    a236:	45a9      	cmp	r9, r5
    a238:	d906      	bls.n	a248 <__aeabi_dmul+0x238>
    a23a:	468a      	mov	sl, r1
    a23c:	2180      	movs	r1, #128	; 0x80
    a23e:	0249      	lsls	r1, r1, #9
    a240:	4689      	mov	r9, r1
    a242:	44ca      	add	sl, r9
    a244:	4651      	mov	r1, sl
    a246:	9103      	str	r1, [sp, #12]
    a248:	0c29      	lsrs	r1, r5, #16
    a24a:	9104      	str	r1, [sp, #16]
    a24c:	4641      	mov	r1, r8
    a24e:	0409      	lsls	r1, r1, #16
    a250:	042d      	lsls	r5, r5, #16
    a252:	0c09      	lsrs	r1, r1, #16
    a254:	4688      	mov	r8, r1
    a256:	0029      	movs	r1, r5
    a258:	0c25      	lsrs	r5, r4, #16
    a25a:	0424      	lsls	r4, r4, #16
    a25c:	4441      	add	r1, r8
    a25e:	0c24      	lsrs	r4, r4, #16
    a260:	9105      	str	r1, [sp, #20]
    a262:	0021      	movs	r1, r4
    a264:	4341      	muls	r1, r0
    a266:	4688      	mov	r8, r1
    a268:	0021      	movs	r1, r4
    a26a:	4379      	muls	r1, r7
    a26c:	468a      	mov	sl, r1
    a26e:	4368      	muls	r0, r5
    a270:	4641      	mov	r1, r8
    a272:	4450      	add	r0, sl
    a274:	4681      	mov	r9, r0
    a276:	0c08      	lsrs	r0, r1, #16
    a278:	4448      	add	r0, r9
    a27a:	436f      	muls	r7, r5
    a27c:	4582      	cmp	sl, r0
    a27e:	d903      	bls.n	a288 <__aeabi_dmul+0x278>
    a280:	2180      	movs	r1, #128	; 0x80
    a282:	0249      	lsls	r1, r1, #9
    a284:	4689      	mov	r9, r1
    a286:	444f      	add	r7, r9
    a288:	0c01      	lsrs	r1, r0, #16
    a28a:	4689      	mov	r9, r1
    a28c:	0039      	movs	r1, r7
    a28e:	4449      	add	r1, r9
    a290:	9102      	str	r1, [sp, #8]
    a292:	4641      	mov	r1, r8
    a294:	040f      	lsls	r7, r1, #16
    a296:	9904      	ldr	r1, [sp, #16]
    a298:	0c3f      	lsrs	r7, r7, #16
    a29a:	4688      	mov	r8, r1
    a29c:	0400      	lsls	r0, r0, #16
    a29e:	19c0      	adds	r0, r0, r7
    a2a0:	4480      	add	r8, r0
    a2a2:	4641      	mov	r1, r8
    a2a4:	9104      	str	r1, [sp, #16]
    a2a6:	4659      	mov	r1, fp
    a2a8:	0c0f      	lsrs	r7, r1, #16
    a2aa:	0409      	lsls	r1, r1, #16
    a2ac:	0c09      	lsrs	r1, r1, #16
    a2ae:	4688      	mov	r8, r1
    a2b0:	4359      	muls	r1, r3
    a2b2:	468a      	mov	sl, r1
    a2b4:	0039      	movs	r1, r7
    a2b6:	4351      	muls	r1, r2
    a2b8:	4689      	mov	r9, r1
    a2ba:	4641      	mov	r1, r8
    a2bc:	434a      	muls	r2, r1
    a2be:	4651      	mov	r1, sl
    a2c0:	0c09      	lsrs	r1, r1, #16
    a2c2:	468b      	mov	fp, r1
    a2c4:	437b      	muls	r3, r7
    a2c6:	18d2      	adds	r2, r2, r3
    a2c8:	445a      	add	r2, fp
    a2ca:	4293      	cmp	r3, r2
    a2cc:	d903      	bls.n	a2d6 <__aeabi_dmul+0x2c6>
    a2ce:	2380      	movs	r3, #128	; 0x80
    a2d0:	025b      	lsls	r3, r3, #9
    a2d2:	469b      	mov	fp, r3
    a2d4:	44d9      	add	r9, fp
    a2d6:	4651      	mov	r1, sl
    a2d8:	0409      	lsls	r1, r1, #16
    a2da:	0c09      	lsrs	r1, r1, #16
    a2dc:	468a      	mov	sl, r1
    a2de:	4641      	mov	r1, r8
    a2e0:	4361      	muls	r1, r4
    a2e2:	437c      	muls	r4, r7
    a2e4:	0c13      	lsrs	r3, r2, #16
    a2e6:	0412      	lsls	r2, r2, #16
    a2e8:	444b      	add	r3, r9
    a2ea:	4452      	add	r2, sl
    a2ec:	46a1      	mov	r9, r4
    a2ee:	468a      	mov	sl, r1
    a2f0:	003c      	movs	r4, r7
    a2f2:	4641      	mov	r1, r8
    a2f4:	436c      	muls	r4, r5
    a2f6:	434d      	muls	r5, r1
    a2f8:	4651      	mov	r1, sl
    a2fa:	444d      	add	r5, r9
    a2fc:	0c0f      	lsrs	r7, r1, #16
    a2fe:	197d      	adds	r5, r7, r5
    a300:	45a9      	cmp	r9, r5
    a302:	d903      	bls.n	a30c <__aeabi_dmul+0x2fc>
    a304:	2180      	movs	r1, #128	; 0x80
    a306:	0249      	lsls	r1, r1, #9
    a308:	4688      	mov	r8, r1
    a30a:	4444      	add	r4, r8
    a30c:	9f04      	ldr	r7, [sp, #16]
    a30e:	9903      	ldr	r1, [sp, #12]
    a310:	46b8      	mov	r8, r7
    a312:	4441      	add	r1, r8
    a314:	468b      	mov	fp, r1
    a316:	4583      	cmp	fp, r0
    a318:	4180      	sbcs	r0, r0
    a31a:	4241      	negs	r1, r0
    a31c:	4688      	mov	r8, r1
    a31e:	4651      	mov	r1, sl
    a320:	0408      	lsls	r0, r1, #16
    a322:	042f      	lsls	r7, r5, #16
    a324:	0c00      	lsrs	r0, r0, #16
    a326:	183f      	adds	r7, r7, r0
    a328:	4658      	mov	r0, fp
    a32a:	9902      	ldr	r1, [sp, #8]
    a32c:	1810      	adds	r0, r2, r0
    a32e:	4689      	mov	r9, r1
    a330:	4290      	cmp	r0, r2
    a332:	4192      	sbcs	r2, r2
    a334:	444f      	add	r7, r9
    a336:	46ba      	mov	sl, r7
    a338:	4252      	negs	r2, r2
    a33a:	4699      	mov	r9, r3
    a33c:	4693      	mov	fp, r2
    a33e:	44c2      	add	sl, r8
    a340:	44d1      	add	r9, sl
    a342:	44cb      	add	fp, r9
    a344:	428f      	cmp	r7, r1
    a346:	41bf      	sbcs	r7, r7
    a348:	45c2      	cmp	sl, r8
    a34a:	4189      	sbcs	r1, r1
    a34c:	4599      	cmp	r9, r3
    a34e:	419b      	sbcs	r3, r3
    a350:	4593      	cmp	fp, r2
    a352:	4192      	sbcs	r2, r2
    a354:	427f      	negs	r7, r7
    a356:	4249      	negs	r1, r1
    a358:	0c2d      	lsrs	r5, r5, #16
    a35a:	4252      	negs	r2, r2
    a35c:	430f      	orrs	r7, r1
    a35e:	425b      	negs	r3, r3
    a360:	4313      	orrs	r3, r2
    a362:	197f      	adds	r7, r7, r5
    a364:	18ff      	adds	r7, r7, r3
    a366:	465b      	mov	r3, fp
    a368:	193c      	adds	r4, r7, r4
    a36a:	0ddb      	lsrs	r3, r3, #23
    a36c:	9a05      	ldr	r2, [sp, #20]
    a36e:	0264      	lsls	r4, r4, #9
    a370:	431c      	orrs	r4, r3
    a372:	0243      	lsls	r3, r0, #9
    a374:	4313      	orrs	r3, r2
    a376:	1e5d      	subs	r5, r3, #1
    a378:	41ab      	sbcs	r3, r5
    a37a:	465a      	mov	r2, fp
    a37c:	0dc0      	lsrs	r0, r0, #23
    a37e:	4303      	orrs	r3, r0
    a380:	0252      	lsls	r2, r2, #9
    a382:	4313      	orrs	r3, r2
    a384:	01e2      	lsls	r2, r4, #7
    a386:	d556      	bpl.n	a436 <__aeabi_dmul+0x426>
    a388:	2001      	movs	r0, #1
    a38a:	085a      	lsrs	r2, r3, #1
    a38c:	4003      	ands	r3, r0
    a38e:	4313      	orrs	r3, r2
    a390:	07e2      	lsls	r2, r4, #31
    a392:	4313      	orrs	r3, r2
    a394:	0864      	lsrs	r4, r4, #1
    a396:	485a      	ldr	r0, [pc, #360]	; (a500 <__aeabi_dmul+0x4f0>)
    a398:	4460      	add	r0, ip
    a39a:	2800      	cmp	r0, #0
    a39c:	dd4d      	ble.n	a43a <__aeabi_dmul+0x42a>
    a39e:	075a      	lsls	r2, r3, #29
    a3a0:	d009      	beq.n	a3b6 <__aeabi_dmul+0x3a6>
    a3a2:	220f      	movs	r2, #15
    a3a4:	401a      	ands	r2, r3
    a3a6:	2a04      	cmp	r2, #4
    a3a8:	d005      	beq.n	a3b6 <__aeabi_dmul+0x3a6>
    a3aa:	1d1a      	adds	r2, r3, #4
    a3ac:	429a      	cmp	r2, r3
    a3ae:	419b      	sbcs	r3, r3
    a3b0:	425b      	negs	r3, r3
    a3b2:	18e4      	adds	r4, r4, r3
    a3b4:	0013      	movs	r3, r2
    a3b6:	01e2      	lsls	r2, r4, #7
    a3b8:	d504      	bpl.n	a3c4 <__aeabi_dmul+0x3b4>
    a3ba:	2080      	movs	r0, #128	; 0x80
    a3bc:	4a51      	ldr	r2, [pc, #324]	; (a504 <__aeabi_dmul+0x4f4>)
    a3be:	00c0      	lsls	r0, r0, #3
    a3c0:	4014      	ands	r4, r2
    a3c2:	4460      	add	r0, ip
    a3c4:	4a50      	ldr	r2, [pc, #320]	; (a508 <__aeabi_dmul+0x4f8>)
    a3c6:	4290      	cmp	r0, r2
    a3c8:	dd00      	ble.n	a3cc <__aeabi_dmul+0x3bc>
    a3ca:	e6e3      	b.n	a194 <__aeabi_dmul+0x184>
    a3cc:	2501      	movs	r5, #1
    a3ce:	08db      	lsrs	r3, r3, #3
    a3d0:	0762      	lsls	r2, r4, #29
    a3d2:	431a      	orrs	r2, r3
    a3d4:	0264      	lsls	r4, r4, #9
    a3d6:	9b01      	ldr	r3, [sp, #4]
    a3d8:	4691      	mov	r9, r2
    a3da:	0b22      	lsrs	r2, r4, #12
    a3dc:	0544      	lsls	r4, r0, #21
    a3de:	0d64      	lsrs	r4, r4, #21
    a3e0:	401d      	ands	r5, r3
    a3e2:	e67c      	b.n	a0de <__aeabi_dmul+0xce>
    a3e4:	2280      	movs	r2, #128	; 0x80
    a3e6:	4659      	mov	r1, fp
    a3e8:	0312      	lsls	r2, r2, #12
    a3ea:	4211      	tst	r1, r2
    a3ec:	d008      	beq.n	a400 <__aeabi_dmul+0x3f0>
    a3ee:	4214      	tst	r4, r2
    a3f0:	d106      	bne.n	a400 <__aeabi_dmul+0x3f0>
    a3f2:	4322      	orrs	r2, r4
    a3f4:	0312      	lsls	r2, r2, #12
    a3f6:	0b12      	lsrs	r2, r2, #12
    a3f8:	4645      	mov	r5, r8
    a3fa:	4699      	mov	r9, r3
    a3fc:	4c43      	ldr	r4, [pc, #268]	; (a50c <__aeabi_dmul+0x4fc>)
    a3fe:	e66e      	b.n	a0de <__aeabi_dmul+0xce>
    a400:	465b      	mov	r3, fp
    a402:	431a      	orrs	r2, r3
    a404:	0312      	lsls	r2, r2, #12
    a406:	0b12      	lsrs	r2, r2, #12
    a408:	4c40      	ldr	r4, [pc, #256]	; (a50c <__aeabi_dmul+0x4fc>)
    a40a:	e668      	b.n	a0de <__aeabi_dmul+0xce>
    a40c:	0003      	movs	r3, r0
    a40e:	4654      	mov	r4, sl
    a410:	3b28      	subs	r3, #40	; 0x28
    a412:	409c      	lsls	r4, r3
    a414:	2300      	movs	r3, #0
    a416:	e6b9      	b.n	a18c <__aeabi_dmul+0x17c>
    a418:	f7fb f912 	bl	5640 <__clzsi2>
    a41c:	3020      	adds	r0, #32
    a41e:	e6a6      	b.n	a16e <__aeabi_dmul+0x15e>
    a420:	0003      	movs	r3, r0
    a422:	3b28      	subs	r3, #40	; 0x28
    a424:	409f      	lsls	r7, r3
    a426:	2300      	movs	r3, #0
    a428:	46bb      	mov	fp, r7
    a42a:	4699      	mov	r9, r3
    a42c:	e68a      	b.n	a144 <__aeabi_dmul+0x134>
    a42e:	f7fb f907 	bl	5640 <__clzsi2>
    a432:	3020      	adds	r0, #32
    a434:	e674      	b.n	a120 <__aeabi_dmul+0x110>
    a436:	46b4      	mov	ip, r6
    a438:	e7ad      	b.n	a396 <__aeabi_dmul+0x386>
    a43a:	2501      	movs	r5, #1
    a43c:	1a2a      	subs	r2, r5, r0
    a43e:	2a38      	cmp	r2, #56	; 0x38
    a440:	dd06      	ble.n	a450 <__aeabi_dmul+0x440>
    a442:	9b01      	ldr	r3, [sp, #4]
    a444:	2400      	movs	r4, #0
    a446:	401d      	ands	r5, r3
    a448:	2300      	movs	r3, #0
    a44a:	2200      	movs	r2, #0
    a44c:	4699      	mov	r9, r3
    a44e:	e646      	b.n	a0de <__aeabi_dmul+0xce>
    a450:	2a1f      	cmp	r2, #31
    a452:	dc21      	bgt.n	a498 <__aeabi_dmul+0x488>
    a454:	2520      	movs	r5, #32
    a456:	0020      	movs	r0, r4
    a458:	1aad      	subs	r5, r5, r2
    a45a:	001e      	movs	r6, r3
    a45c:	40ab      	lsls	r3, r5
    a45e:	40a8      	lsls	r0, r5
    a460:	40d6      	lsrs	r6, r2
    a462:	1e5d      	subs	r5, r3, #1
    a464:	41ab      	sbcs	r3, r5
    a466:	4330      	orrs	r0, r6
    a468:	4318      	orrs	r0, r3
    a46a:	40d4      	lsrs	r4, r2
    a46c:	0743      	lsls	r3, r0, #29
    a46e:	d009      	beq.n	a484 <__aeabi_dmul+0x474>
    a470:	230f      	movs	r3, #15
    a472:	4003      	ands	r3, r0
    a474:	2b04      	cmp	r3, #4
    a476:	d005      	beq.n	a484 <__aeabi_dmul+0x474>
    a478:	0003      	movs	r3, r0
    a47a:	1d18      	adds	r0, r3, #4
    a47c:	4298      	cmp	r0, r3
    a47e:	419b      	sbcs	r3, r3
    a480:	425b      	negs	r3, r3
    a482:	18e4      	adds	r4, r4, r3
    a484:	0223      	lsls	r3, r4, #8
    a486:	d521      	bpl.n	a4cc <__aeabi_dmul+0x4bc>
    a488:	2501      	movs	r5, #1
    a48a:	9b01      	ldr	r3, [sp, #4]
    a48c:	2401      	movs	r4, #1
    a48e:	401d      	ands	r5, r3
    a490:	2300      	movs	r3, #0
    a492:	2200      	movs	r2, #0
    a494:	4699      	mov	r9, r3
    a496:	e622      	b.n	a0de <__aeabi_dmul+0xce>
    a498:	251f      	movs	r5, #31
    a49a:	0021      	movs	r1, r4
    a49c:	426d      	negs	r5, r5
    a49e:	1a28      	subs	r0, r5, r0
    a4a0:	40c1      	lsrs	r1, r0
    a4a2:	0008      	movs	r0, r1
    a4a4:	2a20      	cmp	r2, #32
    a4a6:	d01d      	beq.n	a4e4 <__aeabi_dmul+0x4d4>
    a4a8:	355f      	adds	r5, #95	; 0x5f
    a4aa:	1aaa      	subs	r2, r5, r2
    a4ac:	4094      	lsls	r4, r2
    a4ae:	4323      	orrs	r3, r4
    a4b0:	1e5c      	subs	r4, r3, #1
    a4b2:	41a3      	sbcs	r3, r4
    a4b4:	2507      	movs	r5, #7
    a4b6:	4303      	orrs	r3, r0
    a4b8:	401d      	ands	r5, r3
    a4ba:	2200      	movs	r2, #0
    a4bc:	2d00      	cmp	r5, #0
    a4be:	d009      	beq.n	a4d4 <__aeabi_dmul+0x4c4>
    a4c0:	220f      	movs	r2, #15
    a4c2:	2400      	movs	r4, #0
    a4c4:	401a      	ands	r2, r3
    a4c6:	0018      	movs	r0, r3
    a4c8:	2a04      	cmp	r2, #4
    a4ca:	d1d6      	bne.n	a47a <__aeabi_dmul+0x46a>
    a4cc:	0003      	movs	r3, r0
    a4ce:	0765      	lsls	r5, r4, #29
    a4d0:	0264      	lsls	r4, r4, #9
    a4d2:	0b22      	lsrs	r2, r4, #12
    a4d4:	08db      	lsrs	r3, r3, #3
    a4d6:	432b      	orrs	r3, r5
    a4d8:	2501      	movs	r5, #1
    a4da:	4699      	mov	r9, r3
    a4dc:	9b01      	ldr	r3, [sp, #4]
    a4de:	2400      	movs	r4, #0
    a4e0:	401d      	ands	r5, r3
    a4e2:	e5fc      	b.n	a0de <__aeabi_dmul+0xce>
    a4e4:	2400      	movs	r4, #0
    a4e6:	e7e2      	b.n	a4ae <__aeabi_dmul+0x49e>
    a4e8:	2280      	movs	r2, #128	; 0x80
    a4ea:	2501      	movs	r5, #1
    a4ec:	0312      	lsls	r2, r2, #12
    a4ee:	4322      	orrs	r2, r4
    a4f0:	9901      	ldr	r1, [sp, #4]
    a4f2:	0312      	lsls	r2, r2, #12
    a4f4:	0b12      	lsrs	r2, r2, #12
    a4f6:	400d      	ands	r5, r1
    a4f8:	4699      	mov	r9, r3
    a4fa:	4c04      	ldr	r4, [pc, #16]	; (a50c <__aeabi_dmul+0x4fc>)
    a4fc:	e5ef      	b.n	a0de <__aeabi_dmul+0xce>
    a4fe:	46c0      	nop			; (mov r8, r8)
    a500:	000003ff 	.word	0x000003ff
    a504:	feffffff 	.word	0xfeffffff
    a508:	000007fe 	.word	0x000007fe
    a50c:	000007ff 	.word	0x000007ff

0000a510 <__aeabi_i2d>:
    a510:	b570      	push	{r4, r5, r6, lr}
    a512:	2800      	cmp	r0, #0
    a514:	d030      	beq.n	a578 <__aeabi_i2d+0x68>
    a516:	17c3      	asrs	r3, r0, #31
    a518:	18c4      	adds	r4, r0, r3
    a51a:	405c      	eors	r4, r3
    a51c:	0fc5      	lsrs	r5, r0, #31
    a51e:	0020      	movs	r0, r4
    a520:	f7fb f88e 	bl	5640 <__clzsi2>
    a524:	4b17      	ldr	r3, [pc, #92]	; (a584 <__aeabi_i2d+0x74>)
    a526:	4a18      	ldr	r2, [pc, #96]	; (a588 <__aeabi_i2d+0x78>)
    a528:	1a1b      	subs	r3, r3, r0
    a52a:	1ad2      	subs	r2, r2, r3
    a52c:	2a1f      	cmp	r2, #31
    a52e:	dd18      	ble.n	a562 <__aeabi_i2d+0x52>
    a530:	4a16      	ldr	r2, [pc, #88]	; (a58c <__aeabi_i2d+0x7c>)
    a532:	1ad2      	subs	r2, r2, r3
    a534:	4094      	lsls	r4, r2
    a536:	2200      	movs	r2, #0
    a538:	0324      	lsls	r4, r4, #12
    a53a:	055b      	lsls	r3, r3, #21
    a53c:	0b24      	lsrs	r4, r4, #12
    a53e:	0d5b      	lsrs	r3, r3, #21
    a540:	2100      	movs	r1, #0
    a542:	0010      	movs	r0, r2
    a544:	0324      	lsls	r4, r4, #12
    a546:	0d0a      	lsrs	r2, r1, #20
    a548:	0b24      	lsrs	r4, r4, #12
    a54a:	0512      	lsls	r2, r2, #20
    a54c:	4322      	orrs	r2, r4
    a54e:	4c10      	ldr	r4, [pc, #64]	; (a590 <__aeabi_i2d+0x80>)
    a550:	051b      	lsls	r3, r3, #20
    a552:	4022      	ands	r2, r4
    a554:	4313      	orrs	r3, r2
    a556:	005b      	lsls	r3, r3, #1
    a558:	07ed      	lsls	r5, r5, #31
    a55a:	085b      	lsrs	r3, r3, #1
    a55c:	432b      	orrs	r3, r5
    a55e:	0019      	movs	r1, r3
    a560:	bd70      	pop	{r4, r5, r6, pc}
    a562:	0021      	movs	r1, r4
    a564:	4091      	lsls	r1, r2
    a566:	000a      	movs	r2, r1
    a568:	210b      	movs	r1, #11
    a56a:	1a08      	subs	r0, r1, r0
    a56c:	40c4      	lsrs	r4, r0
    a56e:	055b      	lsls	r3, r3, #21
    a570:	0324      	lsls	r4, r4, #12
    a572:	0b24      	lsrs	r4, r4, #12
    a574:	0d5b      	lsrs	r3, r3, #21
    a576:	e7e3      	b.n	a540 <__aeabi_i2d+0x30>
    a578:	2500      	movs	r5, #0
    a57a:	2300      	movs	r3, #0
    a57c:	2400      	movs	r4, #0
    a57e:	2200      	movs	r2, #0
    a580:	e7de      	b.n	a540 <__aeabi_i2d+0x30>
    a582:	46c0      	nop			; (mov r8, r8)
    a584:	0000041e 	.word	0x0000041e
    a588:	00000433 	.word	0x00000433
    a58c:	00000413 	.word	0x00000413
    a590:	800fffff 	.word	0x800fffff
    a594:	00000a11 	.word	0x00000a11
    a598:	000004e6 	.word	0x000004e6
    a59c:	00000494 	.word	0x00000494
    a5a0:	0000049c 	.word	0x0000049c
    a5a4:	000004a4 	.word	0x000004a4
    a5a8:	000004ac 	.word	0x000004ac
    a5ac:	000004b4 	.word	0x000004b4
    a5b0:	000004c2 	.word	0x000004c2
    a5b4:	000004ca 	.word	0x000004ca
    a5b8:	000004e6 	.word	0x000004e6
    a5bc:	000004e6 	.word	0x000004e6
    a5c0:	000004e6 	.word	0x000004e6
    a5c4:	000004e6 	.word	0x000004e6
    a5c8:	000004e6 	.word	0x000004e6
    a5cc:	000004e6 	.word	0x000004e6
    a5d0:	000004e6 	.word	0x000004e6
    a5d4:	000004e6 	.word	0x000004e6
    a5d8:	000004e6 	.word	0x000004e6
    a5dc:	000004e6 	.word	0x000004e6
    a5e0:	000004e6 	.word	0x000004e6
    a5e4:	000004e6 	.word	0x000004e6
    a5e8:	000004e6 	.word	0x000004e6
    a5ec:	000004e6 	.word	0x000004e6
    a5f0:	000004e6 	.word	0x000004e6
    a5f4:	000004e6 	.word	0x000004e6
    a5f8:	000004e6 	.word	0x000004e6
    a5fc:	000004e6 	.word	0x000004e6
    a600:	000004e6 	.word	0x000004e6
    a604:	000004e6 	.word	0x000004e6
    a608:	000004e6 	.word	0x000004e6
    a60c:	000004e6 	.word	0x000004e6
    a610:	000004e6 	.word	0x000004e6
    a614:	000004e6 	.word	0x000004e6
    a618:	000004e6 	.word	0x000004e6
    a61c:	000004e6 	.word	0x000004e6
    a620:	000004e6 	.word	0x000004e6
    a624:	000004e6 	.word	0x000004e6
    a628:	000004e6 	.word	0x000004e6
    a62c:	000004e6 	.word	0x000004e6
    a630:	000004e6 	.word	0x000004e6
    a634:	000004e6 	.word	0x000004e6
    a638:	000004e6 	.word	0x000004e6
    a63c:	000004e6 	.word	0x000004e6
    a640:	000004e6 	.word	0x000004e6
    a644:	000004e6 	.word	0x000004e6
    a648:	000004e6 	.word	0x000004e6
    a64c:	000004e6 	.word	0x000004e6
    a650:	000004e6 	.word	0x000004e6
    a654:	000004e6 	.word	0x000004e6
    a658:	000004e6 	.word	0x000004e6
    a65c:	000004e6 	.word	0x000004e6
    a660:	000004e6 	.word	0x000004e6
    a664:	000004e6 	.word	0x000004e6
    a668:	000004e6 	.word	0x000004e6
    a66c:	000004e6 	.word	0x000004e6
    a670:	000004e6 	.word	0x000004e6
    a674:	000004e6 	.word	0x000004e6
    a678:	000004e6 	.word	0x000004e6
    a67c:	000004e6 	.word	0x000004e6
    a680:	000004e6 	.word	0x000004e6
    a684:	000004e6 	.word	0x000004e6
    a688:	000004e6 	.word	0x000004e6
    a68c:	000004e6 	.word	0x000004e6
    a690:	000004e6 	.word	0x000004e6
    a694:	000004e6 	.word	0x000004e6
    a698:	000004d8 	.word	0x000004d8
    a69c:	31333231 	.word	0x31333231
    a6a0:	32313332 	.word	0x32313332
    a6a4:	33323133 	.word	0x33323133
    a6a8:	00000000 	.word	0x00000000
    a6ac:	42000800 	.word	0x42000800
    a6b0:	42000c00 	.word	0x42000c00
    a6b4:	42001000 	.word	0x42001000
    a6b8:	42001400 	.word	0x42001400
    a6bc:	42002c00 	.word	0x42002c00
    a6c0:	42003000 	.word	0x42003000
    a6c4:	42003400 	.word	0x42003400
    a6c8:	47455252 	.word	0x47455252
    a6cc:	00000000 	.word	0x00000000
    a6d0:	00444441 	.word	0x00444441
    a6d4:	00004d52 	.word	0x00004d52
    a6d8:	504f5453 	.word	0x504f5453
    a6dc:	00000000 	.word	0x00000000
    a6e0:	52415453 	.word	0x52415453
    a6e4:	00000054 	.word	0x00000054
    a6e8:	00595251 	.word	0x00595251
    a6ec:	00545352 	.word	0x00545352
    a6f0:	54505243 	.word	0x54505243
    a6f4:	00000000 	.word	0x00000000
    a6f8:	0000080a 	.word	0x0000080a
    a6fc:	626d754e 	.word	0x626d754e
    a700:	6f207265 	.word	0x6f207265
    a704:	61532066 	.word	0x61532066
    a708:	656c706d 	.word	0x656c706d
    a70c:	25203a73 	.word	0x25203a73
    a710:	5309756c 	.word	0x5309756c
    a714:	6c706d61 	.word	0x6c706d61
    a718:	61522065 	.word	0x61522065
    a71c:	203a6574 	.word	0x203a6574
    a720:	43096625 	.word	0x43096625
    a724:	6e6e6168 	.word	0x6e6e6168
    a728:	3a736c65 	.word	0x3a736c65
    a72c:	000a7525 	.word	0x000a7525
    a730:	73656f44 	.word	0x73656f44
    a734:	746f4e20 	.word	0x746f4e20
    a738:	69784520 	.word	0x69784520
    a73c:	00007473 	.word	0x00007473
    a740:	00003524 	.word	0x00003524
    a744:	00003532 	.word	0x00003532
    a748:	000035cc 	.word	0x000035cc
    a74c:	0000366c 	.word	0x0000366c
    a750:	000036d0 	.word	0x000036d0

0000a754 <_usb_device_irq_bits>:
    a754:	00080004 00800070 01000001 00000200     ....p...........

0000a764 <_usb_endpoint_irq_bits>:
    a764:	60100c03 00004286 00004282 00004282     ...`.B...B...B..
    a774:	000042f0 000042f0 0000429a 0000428c     .B...B...B...B..
    a784:	000042a0 000042de 000044c0 000044a0     .B...B...D...D..
    a794:	000044a0 0000452c 000044b2 000044ce     .D..,E...D...D..
    a7a4:	000044a4 000044dc 0000451c 00004d12     .D...D...E...M..
    a7b4:	00004bd8 00004bf2 00004c66 00004c9a     .K...K..fL...L..
    a7c4:	00004cae 00004c86 00004ce2 00004cf2     .L...L...L...L..
    a7d4:	000a0920 00006425 45444441 00000044      ...%d..ADDED...
    a7e4:	41564e49 0044494c 4c4c5546 00000000     INVALID.FULL....
    a7f4:	20444441 4f525245 00000052 4f4d4552     ADD ERROR...REMO
    a804:	00444556 54504d45 00000059 504f5453     VED.EMPTY...STOP
    a814:	00444550 52415453 00444554 45524c41     PED.STARTED.ALRE
    a824:	20594441 4e494f47 00000047 45555254     ADY GOING...TRUE
    a834:	00000000 534c4146 00000045 000058b4     ....FALSE....X..
    a844:	00005884 00005896 000057d8 00005896     .X...X...W...X..
    a854:	0000587a 00005896 000057d8 00005884     zX...X...W...X..
    a864:	00005884 0000587a 000057d8 000057e0     .X..zX...W...W..
    a874:	000057e0 000057e0 0000589c 00005884     .W...W...X...X..
    a884:	00005884 00005858 0000593c 00005858     .X..XX..<Y..XX..
    a894:	0000587a 00005858 0000593c 00005884     zX..XX..<Y...X..
    a8a4:	00005884 0000587a 0000593c 000057e0     .X..zX..<Y...W..
    a8b4:	000057e0 000057e0 00005946 00005c34     .W...W..FY..4\..
    a8c4:	00005b84 00005b84 00005b82 00005c26     .[...[...[..&\..
    a8d4:	00005c26 00005c1c 00005b82 00005c26     &\...\...[..&\..
    a8e4:	00005c1c 00005c26 00005b82 00005c2c     .\..&\...[..,\..
    a8f4:	00005c2c 00005c2c 00005cbc 6900666e     ,\..,\...\..nf.i
    a904:	7974696e 006e6100                       nity.an.

0000a90c <fpi.6134>:
    a90c:	00000035 fffffbce 000003cb 00000001     5...............
    a91c:	00000000                                ....

0000a920 <fpinan.6170>:
    a920:	00000034 fffffbce 000003cb 00000001     4...............
	...

0000a938 <tinytens>:
    a938:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    a948:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    a958:	64ac6f43 11680628 4f500043 00584953     Co.d(.h.C.POSIX.
    a968:	0000002e 00000000                       ........

0000a970 <__mprec_bigtens>:
    a970:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    a980:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    a990:	7f73bf3c 75154fdd                       <.s..O.u

0000a998 <__mprec_tens>:
    a998:	00000000 3ff00000 00000000 40240000     .......?......$@
    a9a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    a9b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    a9c8:	00000000 412e8480 00000000 416312d0     .......A......cA
    a9d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    a9e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    a9f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    aa08:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    aa18:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    aa28:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    aa38:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    aa48:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    aa58:	79d99db4 44ea7843                       ...yCx.D

0000aa60 <p05.6052>:
    aa60:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    aa70:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    aa80:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    aa90:	35343332 39383736 64636261 00006665              23456789abcdef.

0000aa9f <_ctype_>:
    aa9f:	20202000 20202020 28282020 20282828     .         ((((( 
    aaaf:	20202020 20202020 20202020 20202020                     
    aabf:	10108820 10101010 10101010 10101010      ...............
    aacf:	04040410 04040404 10040404 10101010     ................
    aadf:	41411010 41414141 01010101 01010101     ..AAAAAA........
    aaef:	01010101 01010101 01010101 10101010     ................
    aaff:	42421010 42424242 02020202 02020202     ..BBBBBB........
    ab0f:	02020202 02020202 02020202 10101010     ................
    ab1f:	00000020 00000000 00000000 00000000      ...............
	...
    ab9f:	009ba000 009b8200 009b3c00 009a5a00     .........<...Z..
    abaf:	009b3c00 009b7400 009b3c00 009a5a00     .<...t...<...Z..
    abbf:	009b8200 009b8200 009b7400 009a5a00     .........t...Z..
    abcf:	009a5200 009a5200 009a5200 009db800     .R...R...R......
    abdf:	00a20000 00a0c000 00a0c000 00a0bc00     ................
    abef:	00a1d800 00a1d800 00a1ca00 00a0bc00     ................
    abff:	00a1d800 00a1ca00 00a1d800 00a0bc00     ................
    ac0f:	00a1e000 00a1e000 00a1e000 00a3e400     ................
	...

0000ac20 <_init>:
    ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac22:	46c0      	nop			; (mov r8, r8)
    ac24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac26:	bc08      	pop	{r3}
    ac28:	469e      	mov	lr, r3
    ac2a:	4770      	bx	lr

0000ac2c <__init_array_start>:
    ac2c:	000000dd 	.word	0x000000dd

0000ac30 <_fini>:
    ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac32:	46c0      	nop			; (mov r8, r8)
    ac34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac36:	bc08      	pop	{r3}
    ac38:	469e      	mov	lr, r3
    ac3a:	4770      	bx	lr

0000ac3c <__fini_array_start>:
    ac3c:	000000b5 	.word	0x000000b5
